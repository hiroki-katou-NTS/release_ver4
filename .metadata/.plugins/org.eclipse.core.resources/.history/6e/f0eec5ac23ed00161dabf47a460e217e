module nts.uk.pr.view.cmm013.b.viewmodel {

    export class ScreenModel {
        searchbox: KnockoutObservable<GridLists>;
        lbl_002: KnockoutObservable<Label_002>;
        lbl_003: KnockoutObservable<Label_003>;
        inp_002: KnockoutObservable<Input_002>;
        inp_003: KnockoutObservable<Input_003>;
        inp_005: KnockoutObservable<Input_005>;
        constructor() {
            var self = this;
            
            self.searchbox = ko.observable(new GridLists());
            self.lbl_002 = ko.observable(new Label_002());
            self.lbl_003 = ko.observable(new Label_003());
            self.inp_002 = ko.observable(new Input_002());
            self.inp_003 = ko.observable(new Input_003());
            self.inp_005 = ko.observable(new Input_005());
        }
        
        
    }

    

    export class ItemModel {
        code: string;
        constructor(code: string) {
            this.code = code;
        }
    }



    class GridLists {
        dataSource: KnockoutObservableArray<ItemModel>;
        columns: KnockoutObservableArray<nts.uk.ui.NtsGridListColumn>;
        currentCode: KnockoutObservable<any>;
        currentCodeList: KnockoutObservableArray<any>;

        constructor() {
            this.dataSource = ko.observableArray([
                new ItemModel_GridList('A000001', '基本給'),
                new ItemModel_GridList('A000002', '基本給'),
                new ItemModel_GridList('A000003', '基12本'),
                new ItemModel_GridList('A000004', '基12本'),
                new ItemModel_GridList('A000005', '基12本'),
                new ItemModel_GridList('A000006', '基12本'),
                new ItemModel_GridList('A000007', '基12本'),
                new ItemModel_GridList('A000008', '基12本'),
                new ItemModel_GridList('A000009', '基12本'),
                new ItemModel_GridList('A000010', '基12本')

            ]);
            this.columns = ko.observableArray([
                { headerText: 'コード', prop: 'code', width: 100 },
                { headerText: '名称', prop: 'name', width: 80 }
                
            ]);
            this.currentCode = ko.observable();
            this.currentCodeList = ko.observableArray([]);
            this.currentCode.subscribe((function(codeChanged) {
                
                }));
        }
        findObj(value: string): any{
            let self= this;
            let itemModel: ItemModel_GridList;
            _.find(self.dataSource(), function(obj: ItemModel_GridList){
                if(obj.code == value){
                    itemModel= obj;
                    }
                })
            }
    }

    class ItemModel_GridList {
        code: string;
        name: string;
       

        constructor(code: string, name: string) {
            this.code = code;
            this.name = name;
        }
    }

    class Label_002 {
        constraint: string = 'LayoutCode';
        inline: KnockoutObservable<boolean>;
        required: KnockoutObservable<boolean>;
        enable: KnockoutObservable<boolean>;


        constructor() {
            var self = this;
            self.inline = ko.observable(true);
            self.required = ko.observable(true)
            self.enable = ko.observable(true);

        }
    }

    class Label_003 {
        constraint: string = 'LayoutName';
        inline: KnockoutObservable<boolean>;
        required: KnockoutObservable<boolean>;
        enable: KnockoutObservable<boolean>;


        constructor() {
            var self = this;
            self.inline = ko.observable(true);
            self.required = ko.observable(true)
            self.enable = ko.observable(true);
        }
    }

    class Input_002 {
        texteditor: any;

        constructor() {
            var self = this;
            self.texteditor = {
                value: ko.observable(''),
                constraint: 'ResidenceCode',
                option: ko.mapping.fromJS(new nts.uk.ui.option.TextEditorOption({
                    textmode: "text",
                    placeholder: "Placeholder for text editor",
                    width: "80px",
                    textalign: "left"
                })),
                required: ko.observable(true),
                enable: ko.observable(false),
                readonly: ko.observable(false)
            };
        }
    }

    class Input_003 {
        texteditor: any;

        constructor() {
            var self = this;
            self.texteditor = {
                value: ko.observable(''),
                constraint: 'ResidenceCode',
                option: ko.mapping.fromJS(new nts.uk.ui.option.TextEditorOption({
                    textmode: "text",
                    placeholder: "Placeholder text",
                    width: "160px",
                    textalign: "left"
                })),
                required: ko.observable(true),
                enable: ko.observable(true),
                readonly: ko.observable(false)
            };
        }
    }
 
    class Input_005 {
        multilineeditor: any;
        constructor() {
            var self = this;
            self.multilineeditor = {
                value: ko.observable(''),
                constraint: 'ResidenceCode',
                option: ko.mapping.fromJS(new nts.uk.ui.option.MultilineEditorOption({
                    resizeable: true,
                    placeholder: "Placeholder for text editor",
                    width: "380",
                    textalign: "left"
                })),
                required: ko.observable(true),
                enable: ko.observable(true),
                readonly: ko.observable(false)
            };
        }
    }

}