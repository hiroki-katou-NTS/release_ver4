module nts.uk.pr.view.cmm013.a.viewmodel {

    export class ScreenModel {
        listbox: KnockoutObservable<ListBoxx>;
        searchboxx: KnockoutObservable<GridLists>;
        label_002: KnockoutObservable<Label_002>;
        label_003: KnockoutObservable<Label_003>;
        inp_002: KnockoutObservable<String>;
        inp_003: KnockoutObservable<String>;
        selectbox : KnockoutObservable<SelectBox>;
        tabs: KnockoutObservableArray<nts.uk.ui.NtsTabPanelModel>;
        selectedTab: KnockoutObservable<string>;
        constructor() {
            var self = this;
            self.tabs = ko.observableArray([
                { id: 'tab-1', title: '基本情報', content: '.tab-content-1', enable: ko.observable(true), visible: ko.observable(true) },
                { id: 'tab-2', title: '計算式の設定', content: '.tab-content-2', enable: ko.observable(true), visible: ko.observable(true) }
            ]);
            self.selectedTab = ko.observable('tab-1');
            self.listbox = ko.observable(new ListBoxx());
            self.searchboxx = ko.observable(new GridLists());
            self.label_002 = ko.observable(new Label_002());
            self.label_003 = ko.observable(new Label_003());
            self.inp_002 = ko.observable("");
            self.inp_003 = ko.observable("");
            self.selectbox = ko.observable(new SelectBox());

        }
    }

    export class ListBoxx {
        itemList: KnockoutObservableArray<ItemModel>;
        itemName: KnockoutObservable<string>;
        currentCode: KnockoutObservable<number>
        selectedCode: KnockoutObservable<string>;
        selectedCodes: KnockoutObservableArray<string>;
        isEnable: KnockoutObservable<boolean>;


        constructor() {
            var self = this;
            self.itemList = ko.observableArray([
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
            ]);
            self.itemName = ko.observable('');
            self.currentCode = ko.observable(3);
            self.selectedCode = ko.observable(null)
            self.isEnable = ko.observable(true);
            self.selectedCodes = ko.observableArray([]);


            $('#list-box').on('selectionChanging', function(event) {
                console.log('Selecting value:' + (<any>event.originalEvent).detail);
            })
            $('#list-box').on('selectionChanged', function(event: any) {
                console.log('Selected value:' + (<any>event.originalEvent).detail)
            })
        }
    }

    export class ItemModel {
        code: string;
        constructor(code: string) {
            this.code = code;
        }
    }



    class GridLists {
        dataSource: KnockoutObservableArray<ItemModel>;
        columns: KnockoutObservableArray<nts.uk.ui.NtsGridListColumn>;
        currentCode: KnockoutObservable<any>;
        currentCodeList: KnockoutObservableArray<any>;

        constructor() {
            this.dataSource = ko.observableArray([
                new ItemModel_GridList('001', '基本給', "description"),
                new ItemModel_GridList('002', '基本給', "description"),
                new ItemModel_GridList('003', '基12本', "description"),
                new ItemModel_GridList('004', '基12本', "description"),
                new ItemModel_GridList('005', '基12本', "description"),
                new ItemModel_GridList('006', '基12本', "description"),
                new ItemModel_GridList('007', '基12本', "description"),
                new ItemModel_GridList('008', '基12本', "description"),
                new ItemModel_GridList('009', '基12本', "description"),
                new ItemModel_GridList('010', '基12本', "description")

            ]);
            this.columns = ko.observableArray([
                { headerText: 'コード', prop: 'code', width: 50 },
                { headerText: '名称', prop: 'name', width: 80 },
                { headerText: '説明', prop: 'description', width: 80 }
            ]);
            this.currentCode = ko.observable();
            this.currentCodeList = ko.observableArray([]);
        }
    }

    class ItemModel_GridList {
        code: string;
        name: string;
        description: string;

        constructor(code: string, name: string, description: string) {
            this.code = code;
            this.name = name;
            this.description = description;
        }
    }

    class Label_002 {
        constraint: string = 'LayoutCode';
        inline: KnockoutObservable<boolean>;
        required: KnockoutObservable<boolean>;
        enable: KnockoutObservable<boolean>;


        constructor() {
            var self = this;
            self.inline = ko.observable(true);
            self.required = ko.observable(true)
            self.enable = ko.observable(true);

        }
    }

    class Label_003 {
        constraint: string = 'LayoutName';
        inline: KnockoutObservable<boolean>;
        required: KnockoutObservable<boolean>;
        enable: KnockoutObservable<boolean>;


        constructor() {
            var self = this;
            self.inline = ko.observable(true);
            self.required = ko.observable(true)
            self.enable = ko.observable(true);
        }
    }

    class SelectBox {
        itemList: KnockoutObservableArray<any>;
        selectedId: KnockoutObservable<number>;
        enable: KnockoutObservable<boolean>;

        constructor() {
            var self = this;
            self.itemList = ko.observableArray([
                new BoxModel(1, 'box 1'),
                new BoxModel(2, 'box 2'),
                new BoxModel(3, 'box 3')
            ]);
            self.selectedId = ko.observable(1);
            self.enable = ko.observable(true);
        }
    }

    class BoxModel {
        id: number;
        name: string;
        constructor(id, name) {
            var self = this;
            self.id = id;
            self.name = name;
        }
    }

}