module nts.uk.pr.view.cmm013.b.viewmodel {

    export class ScreenModel {
        searchbox: KnockoutObservable<GridLists>;
        label_002: KnockoutObservable<Label_002>;
        label_003: KnockoutObservable<Label_003>;
        label_004: KnockoutObservable<Label_004>;
        label_005: KnockoutObservable<Label_005>;
        label_006: KnockoutObservable<Label_006>;
        hasCellphone: KnockoutObservable<boolean>;
        selectbox: KnockoutObservable<SelectBox>;
        selectbox_2: KnockoutObservable<SelectBox_2>;
        inp_002: KnockoutObservable<Input_002>;
        inp_003: KnockoutObservable<Input_003>;
        inp_004: KnockoutObservable<Input_004>;
        inp_005: KnockoutObservable<Input_005>;
        switchbt_1: KnockoutObservable<SwitchButton_1>;
        switchbt_2: KnockoutObservable<SwitchButton_2>;
        switchbt_3: KnockoutObservable<SwitchButton_3>;
        switchbt_4: KnockoutObservable<SwitchButton_4>;
        constructor() {
            var self = this;
            
            self.searchbox = ko.observable(new GridLists());
            self.label_002 = ko.observable(new Label_002());
            self.label_003 = ko.observable(new Label_003());
            self.label_004 = ko.observable(new Label_004());
            self.label_005 = ko.observable(new Label_005());
            self.label_006 = ko.observable(new Label_006());
            self.selectbox = ko.observable(new SelectBox());
            self.selectbox_2 = ko.observable(new SelectBox_2());
            self.hasCellphone = ko.observable(false);
            self.switchbt_1 = ko.observable(new SwitchButton_1());
            self.switchbt_2 = ko.observable(new SwitchButton_2());
            self.switchbt_3 = ko.observable(new SwitchButton_3());
            self.switchbt_4 = ko.observable(new SwitchButton_4());
            self.inp_002 = ko.observable(new Input_002());
            self.inp_003 = ko.observable(new Input_003());
            self.inp_004 = ko.observable(new Input_004());
            self.inp_005 = ko.observable(new Input_005());
        }
    }

    

    export class ItemModel {
        code: string;
        constructor(code: string) {
            this.code = code;
        }
    }



    class GridLists {
        dataSource: KnockoutObservableArray<ItemModel>;
        columns: KnockoutObservableArray<nts.uk.ui.NtsGridListColumn>;
        currentCode: KnockoutObservable<any>;
        currentCodeList: KnockoutObservableArray<any>;

        constructor() {
            this.dataSource = ko.observableArray([
                new ItemModel_GridList('001', '基本給'),
                new ItemModel_GridList('002', '基本給'),
                new ItemModel_GridList('003', '基12本'),
                new ItemModel_GridList('004', '基12本'),
                new ItemModel_GridList('005', '基12本'),
                new ItemModel_GridList('006', '基12本'),
                new ItemModel_GridList('007', '基12本'),
                new ItemModel_GridList('008', '基12本'),
                new ItemModel_GridList('009', '基12本'),
                new ItemModel_GridList('010', '基12本')

            ]);
            this.columns = ko.observableArray([
                { headerText: 'コード', prop: 'code', width: 160 },
                { headerText: '名称', prop: 'name', width: 80 }
                
            ]);
            this.currentCode = ko.observable();
            this.currentCodeList = ko.observableArray([]);
        }
    }

    class ItemModel_GridList {
        code: string;
        name: string;
       

        constructor(code: string, name: string) {
            this.code = code;
            this.name = name;
        }
    }

    class Label_002 {
        constraint: string = 'LayoutCode';
        inline: KnockoutObservable<boolean>;
        required: KnockoutObservable<boolean>;
        enable: KnockoutObservable<boolean>;


        constructor() {
            var self = this;
            self.inline = ko.observable(true);
            self.required = ko.observable(true)
            self.enable = ko.observable(true);

        }
    }

    class Label_003 {
        constraint: string = 'LayoutName';
        inline: KnockoutObservable<boolean>;
        required: KnockoutObservable<boolean>;
        enable: KnockoutObservable<boolean>;


        constructor() {
            var self = this;
            self.inline = ko.observable(true);
            self.required = ko.observable(true)
            self.enable = ko.observable(true);
        }
    }

    class SelectBox {
        itemList: KnockoutObservableArray<any>;
        selectedId: KnockoutObservable<number>;
        enable: KnockoutObservable<boolean>;

        constructor() {
            var self = this;
            self.itemList = ko.observableArray([
                new BoxModel(1, 'box 1'),
                new BoxModel(2, 'box 2'),
                new BoxModel(3, 'box 3')
            ]);
            self.selectedId = ko.observable(1);
            self.enable = ko.observable(true);
        }
    }

    class BoxModel {
        id: number;
        name: string;
        constructor(id, name) {
            var self = this;
            self.id = id;
            self.name = name;
        }
    }

    class SwitchButton_1 {
        roundingRules: KnockoutObservableArray<any>;
        selectedRuleCode: any;

        constructor() {
            var self = this;
            self.roundingRules = ko.observableArray([
                { code: '1', name: '四捨五入' },
                { code: '2', name: '切り上げ' }
            ]);
            self.selectedRuleCode = ko.observable(1);
        }
    }

    class SwitchButton_2 {
        roundingRules: KnockoutObservableArray<any>;
        selectedRuleCode: any;

        constructor() {
            var self = this;
            self.roundingRules = ko.observableArray([
                { code: '1', name: '四捨五入' },
                { code: '2', name: '切り上げ' }
            ]);
            self.selectedRuleCode = ko.observable(1);
        }
    }

    class SwitchButton_3 {
        roundingRules: KnockoutObservableArray<any>;
        selectedRuleCode: any;

        constructor() {
            var self = this;
            self.roundingRules = ko.observableArray([
                { code: '1', name: '四捨五入' },
                { code: '2', name: '切り上げ' }
            ]);
            self.selectedRuleCode = ko.observable(1);
        }
    }

    class SwitchButton_4 {
        roundingRules: KnockoutObservableArray<any>;
        selectedRuleCode: any;

        constructor() {
            var self = this;
            self.roundingRules = ko.observableArray([
                { code: '1', name: '四捨五入' },
                { code: '2', name: '切り上げ' }
            ]);
            self.selectedRuleCode = ko.observable(1);
        }
    }

    class Input_002 {
        texteditor: any;

        constructor() {
            var self = this;
            self.texteditor = {
                value: ko.observable(''),
                constraint: 'ResidenceCode',
                option: ko.mapping.fromJS(new nts.uk.ui.option.TextEditorOption({
                    textmode: "text",
                    placeholder: "Placeholder for text editor",
                    width: "80px",
                    textalign: "left"
                })),
                required: ko.observable(true),
                enable: ko.observable(false),
                readonly: ko.observable(false)
            };
        }
    }

    class Input_003 {
        texteditor: any;

        constructor() {
            var self = this;
            self.texteditor = {
                value: ko.observable(''),
                constraint: 'ResidenceCode',
                option: ko.mapping.fromJS(new nts.uk.ui.option.TextEditorOption({
                    textmode: "text",
                    placeholder: "Placeholder text",
                    width: "160px",
                    textalign: "left"
                })),
                required: ko.observable(true),
                enable: ko.observable(true),
                readonly: ko.observable(false)
            };
        }
    }

    class Label_004 {
        constraint: string = 'LayoutName';
        inline: KnockoutObservable<boolean>;
        required: KnockoutObservable<boolean>;
        enable: KnockoutObservable<boolean>;


        constructor() {
            var self = this;
            self.inline = ko.observable(true);
            self.required = ko.observable(true)
            self.enable = ko.observable(true);
        }
    }

    class SelectBox_2 {
        itemList: KnockoutObservableArray<any>;
        selectedId: KnockoutObservable<number>;
        enable: KnockoutObservable<boolean>;

        constructor() {
            var self = this;
            self.itemList = ko.observableArray([
                new BoxModel_2(1, 'box 1'),
                new BoxModel_2(2, 'box 2'),
                new BoxModel_2(3, 'box 3'),
                new BoxModel_2(4, 'box 4')
            ]);
            self.selectedId = ko.observable(1);
            self.enable = ko.observable(true);
        }
    }

    class BoxModel_2 {
        id: number;
        name: string;
        constructor(id, name) {
            var self = this;
            self.id = id;
            self.name = name;
        }
    }

    class Input_004 {
        texteditor: any;

        constructor() {
            var self = this;
            self.texteditor = {
                value: ko.observable('1'),
                constraint: 'ResidenceCode',
                option: ko.mapping.fromJS(new nts.uk.ui.option.TextEditorOption({
                    textmode: "text",
                    placeholder: "",
                    width: "30px",
                    textalign: "left"
                })),
                required: ko.observable(true),
                enable: ko.observable(true),
                readonly: ko.observable(false)
            };
        }
    }

    class Label_005 {
        constraint: string = 'LayoutName';
        inline: KnockoutObservable<boolean>;
        required: KnockoutObservable<boolean>;
        enable: KnockoutObservable<boolean>;


        constructor() {
            var self = this;
            self.inline = ko.observable(true);
            self.enable = ko.observable(true);
        }
    }

    class Label_006 {
        constraint: string = 'LayoutName';
        inline: KnockoutObservable<boolean>;
        required: KnockoutObservable<boolean>;
        enable: KnockoutObservable<boolean>;


        constructor() {
            var self = this;
            self.inline = ko.observable(true);
            self.enable = ko.observable(true);
        }
    }

    class Input_005 {
        multilineeditor: any;
        constructor() {
            var self = this;
            self.multilineeditor = {
                value: ko.observable(''),
                constraint: 'ResidenceCode',
                option: ko.mapping.fromJS(new nts.uk.ui.option.MultilineEditorOption({
                    resizeable: true,
                    placeholder: "Placeholder for text editor",
                    width: "380",
                    textalign: "left"
                })),
                required: ko.observable(true),
                enable: ko.observable(true),
                readonly: ko.observable(false)
            };
        }
    }

}