module nts.uk.pr.view.cmm013.a.viewmodel {

    export class ScreenModel {
        listbox: KnockoutObservable<ListBoxx>;
        searchboxx: KnockoutObservable<GridLists>;
        tabs: KnockoutObservableArray<nts.uk.ui.NtsTabPanelModel>;
        selectedTab: KnockoutObservable<string>;
        constructor() {
            var self = this;
            self.tabs = ko.observableArray([
                { id: 'tab-1', title: '基本情報', content: '.tab-content-1', enable: ko.observable(true), visible: ko.observable(true) },
                { id: 'tab-2', title: '計算式の設定', content: '.tab-content-2', enable: ko.observable(true), visible: ko.observable(true) }
            ]);
            self.selectedTab = ko.observable('tab-1');
            self.listbox = ko.observable(new ListBoxx());
            self.searchboxx = ko.observable(new GridLists());
        }
    }

    export class ListBoxx {
        itemList: KnockoutObservableArray<ItemModel>;
        itemName: KnockoutObservable<string>;
        currentCode: KnockoutObservable<number>
        selectedCode: KnockoutObservable<string>;
        selectedCodes: KnockoutObservableArray<string>;
        isEnable: KnockoutObservable<boolean>;

        constructor() {
            var self = this;
            self.itemList = ko.observableArray([
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
                new ItemModel('基本給2基本給2基本給2'),
            ]);
            self.itemName = ko.observable('');
            self.currentCode = ko.observable(3);
            self.selectedCode = ko.observable(null)
            self.isEnable = ko.observable(true);
            self.selectedCodes = ko.observableArray([]);

            $('#list-box').on('selectionChanging', function(event) {
                console.log('Selecting value:' + (<any>event.originalEvent).detail);
            })
            $('#list-box').on('selectionChanged', function(event: any) {
                console.log('Selected value:' + (<any>event.originalEvent).detail)
            })
        }
    }

    export class ItemModel {
        code: string;
        constructor(code: string) {
            this.code = code;
        }
    }

    export class SearchBoxx {
        dataSource: any;
        singleSelectedCode: any;
        selectedCodes: any;
        headers: any;
        constructor() {
            var self = this;
            self.dataSource = ko.observableArray([new Node('0001', 'Hanoi Vietnam', []),
                new Node('0003', 'Bangkok Thailand', []),
                new Node('0004', 'Tokyo Japan', []),
                new Node('0005', 'Jakarta Indonesia', []),
                new Node('0002', 'Seoul Korea', []),
                new Node('0006', 'Paris France', []),
                new Node('0007', 'United States', [new Node('0008', 'Washington US', []), new Node('0009', 'Newyork US', [])]),
                new Node('0010', 'Beijing China', []),
                new Node('0011', 'London United Kingdom', []),
                new Node('0012', '', [])]);
            self.singleSelectedCode = ko.observable(null);
            self.selectedCodes = ko.observableArray([]);
            self.headers = ko.observableArray(["Item Value Header", "Item Text Header"]);
        }
    }

    export class Node {
        code: string;
        name: string;
        nodeText: string;
        childs: any;
        constructor(code: string, name: string, childs: Array<Node>) {
            var self = this;
            self.code = code;
            self.name = name;
            self.nodeText = self.code + ' ' + self.name;
            self.childs = childs;
        }
    }

    class GridLists {
        dataSource: KnockoutObservableArray<ItemModel>;
        columns: KnockoutObservableArray<nts.uk.ui.NtsGridListColumn>;
        currentCode: KnockoutObservable<any>;
        currentCodeList: KnockoutObservableArray<any>;

        constructor() {
            this.dataSource = ko.observableArray([
                new ItemModel_GridList('001', '基本給', "description 1"),
                new ItemModel_GridList('150', '役職手当', "description 2"),
                new ItemModel_GridList('ABC', '基12本ghj給', "description 3"),
                new ItemModel_GridList('ABC', '基12本ghj給', "description 3"),
                new ItemModel_GridList('ABC', '基12本ghj給', "description 3"),
                new ItemModel_GridList('ABC', '基12本ghj給', "description 3"),
                new ItemModel_GridList('ABC', '基12本ghj給', "description 3"),
                new ItemModel_GridList('ABC', '基12本ghj給', "description 3"),
                new ItemModel_GridList('ABC', '基12本ghj給', "description 3"),
                new ItemModel_GridList('ABC', '基12本ghj給', "description 3")

            ]);
            this.columns = ko.observableArray([
                { headerText: 'コード', prop: 'code', width: 100 },
                { headerText: '名称', prop: 'name', width: 150 },
                { headerText: '説明', prop: 'description', width: 200 }
            ]);
            this.currentCode = ko.observable();
            this.currentCodeList = ko.observableArray([]);
        }

        selectSomeItems() {
            this.currentCode('150');
            this.currentCodeList.removeAll();
            this.currentCodeList.push('001');
            this.currentCodeList.push('ABC');
        }

        deselectAll() {
            this.currentCode(null);
            this.currentCodeList.removeAll();
        }
    }

    class ItemModel_GridList {
        code: string;
        name: string;
        description: string;

        constructor(code: string, name: string, description: string) {
            this.code = code;
            this.name = name;
            this.description = description;
        }
    }



}