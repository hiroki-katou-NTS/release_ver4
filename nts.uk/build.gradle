import org.gradle.api.Project

apply plugin: 'java'

buildscript {
	repositories {
		maven {
			name 'nsvnmk'
			url 'http://192.168.50.6:8081/artifactory/plugins-release'
		}
	}
	dependencies {
		//http://mvnrepository.com/artifact/de.aaschmid.gradle.plugins/gradle-cpd-plugin
		classpath "de.aaschmid.gradle.plugins:gradle-cpd-plugin:0.5"

		//http://mvnrepository.com/artifact/com.bmuschko/gradle-cargo-plugin
		classpath "com.bmuschko:gradle-cargo-plugin:2.2.1"

		//http://mvnrepository.com/artifact/com.eriwen/gradle-js-plugin
		classpath 'com.eriwen:gradle-js-plugin:1.12.0'
		
		//Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
		
		classpath 'de.richsource.gradle.plugins:typescript-gradle-plugin:1.8.0'
	}
}

//すべてのプロジェクトに適応すべき内容はここに追記する
allprojects {
	apply from: "$rootDir/gradle/properties.gradle"
	apply from: "$rootDir/gradle/library_properties.gradle"
	apply plugin: "com.jfrog.artifactory"

	//ビルド及び実行は、Java8を対象とする
	sourceCompatibility = "$javaVersion"
	targetCompatibility = "$javaVersion" 

	task cleanandbuildallproject (dependsOn: ['clean', 'build'])<< {
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'eclipse-wtp'
	repositories {
		maven {
			name 'aspose'
			url 'http://maven.aspose.com/artifactory/simple/ext-release-local/'
		}
	}
	
	//compileJavaとcompileTestJavaの実行時の文字コードをunicodeで指定
	[compileJava, compileTestJava]*.options*.encoding = "$defaultEncoding"
	
	dependencies {
	   // Apache commons lang
		compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
		
		// Lombok
		compile group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
		
		// JUnit
		testCompile group: 'junit', name: 'junit', version: '4.12'
		testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
		
		// JMockit
		testCompile group: 'org.jmockit', name: 'jmockit', version: '1.28'
		
		// CDI
		compileOnly group: 'javax.enterprise', name: 'cdi-api', version: '1.2'

		// EJB
		compileOnly group: 'javax.ejb', name: 'javax.ejb-api', version: '3.2'
		
		// Concurrency Utilities for Java EE
		compile group: 'javax.enterprise.concurrent', name: 'javax.enterprise.concurrent-api', version: '1.0'
		
		// JPA
		compile group: 'org.eclipse.persistence', name: 'javax.persistence', version: '2.1.1'
		compile group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.6.4'
		
		// JAX-RS
		compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0.1'
		
		// Jackson
		compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.4'
		compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.4'

		// servlet
		compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
		
		// Log4J
		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
		compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.7'
		
		// SLF4J
		compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22'
		compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.22'
		
		compile group: 'nts.gul', name: 'nts.gul', version: '0.15.1'
		compile group: 'nts.arc', name: 'nts.arc', version: '0.22.6'
	}
}

project (':shr:nts.uk.shr.com') {
	dependencies {
		compile group: 'com.sun.faces', name: 'jsf-api', version: '2.2.13'
		compile group: 'aspose', name: 'cells', version: '9.0.0'
		// Mime Detection Utility
		compile group: 'eu.medsea.mimeutil', name: 'mime-util', version: '2.1.3'
	}
}

project (':shr:nts.uk.shr.ws') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':shr:nts.uk.shr.find')
	}
}

project (':shr:nts.uk.shr.find') {
	dependencies {
	}
}

project (':ctx:basic:nts.uk.ctx.basic.ws') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:basic:nts.uk.ctx.basic.app')
	}
}
project (':ctx:basic:nts.uk.ctx.basic.dom') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:basic:nts.uk.ctx.basic.app') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':shr:nts.uk.shr.find')
		compile project(':ctx:basic:nts.uk.ctx.basic.dom')
	}
}
project (':ctx:basic:nts.uk.ctx.basic.infra') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:basic:nts.uk.ctx.basic.dom')
	}
}
project (':ctx:basic:nts.uk.ctx.basic.ac') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:basic:nts.uk.ctx.basic.dom')
	}
}
project (':ctx:basic:nts.uk.ctx.basic.pub') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:basic:nts.uk.ctx.basic.pubimp') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:basic:nts.uk.ctx.basic.pub')
		compile project(':ctx:basic:nts.uk.ctx.basic.dom')
		compile project(':ctx:basic:nts.uk.ctx.basic.infra')
	}
}




//========================sys:portal　↓=====================================

project (':ctx:sys:portal:nts.uk.ctx.sys.portal.ws') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:sys:portal:nts.uk.ctx.sys.portal.app')
	}
}
project (':ctx:sys:portal:nts.uk.ctx.sys.portal.dom') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:sys:portal:nts.uk.ctx.sys.portal.app') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':shr:nts.uk.shr.find')
		compile project(':ctx:sys:portal:nts.uk.ctx.sys.portal.dom')
	}
}
project (':ctx:sys:portal:nts.uk.ctx.sys.portal.infra') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:sys:portal:nts.uk.ctx.sys.portal.dom')
	}
}
project (':ctx:sys:portal:nts.uk.ctx.sys.portal.ac') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:sys:portal:nts.uk.ctx.sys.portal.dom')
	}
}
project (':ctx:sys:portal:nts.uk.ctx.sys.portal.pub') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:sys:portal:nts.uk.ctx.sys.portal.pubimp') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:sys:portal:nts.uk.ctx.sys.portal.pub')
		compile project(':ctx:sys:portal:nts.uk.ctx.sys.portal.dom')
		compile project(':ctx:sys:portal:nts.uk.ctx.sys.portal.infra')
	}
}
//========================sys:portal ↑=====================================



//=========================at:schedule↓===================================
project (':ctx:at:schedule:nts.uk.ctx.at.schedule.ws') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:at:schedule:nts.uk.ctx.at.schedule.app')
	}
}
project (':ctx:at:schedule:nts.uk.ctx.at.schedule.dom') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:at:schedule:nts.uk.ctx.at.schedule.app') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':shr:nts.uk.shr.find')
		compile project(':ctx:at:schedule:nts.uk.ctx.at.schedule.dom')
	}
}
project (':ctx:at:schedule:nts.uk.ctx.at.schedule.infra') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:at:schedule:nts.uk.ctx.at.schedule.dom')
	}
}
project (':ctx:at:schedule:nts.uk.ctx.at.schedule.ac') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:at:schedule:nts.uk.ctx.at.schedule.dom')
	}
}
project (':ctx:at:schedule:nts.uk.ctx.at.schedule.pub') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:at:schedule:nts.uk.ctx.at.schedule.pubimp') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:at:schedule:nts.uk.ctx.at.schedule.pub')
		compile project(':ctx:at:schedule:nts.uk.ctx.at.schedule.dom')
		compile project(':ctx:at:schedule:nts.uk.ctx.at.schedule.infra')
	}
}
//=========================at:schedule↑=====================================

//=========================at:record↓===================================
project (':ctx:at:record:nts.uk.ctx.at.record.ws') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:at:record:nts.uk.ctx.at.record.app')
	}
}
project (':ctx:at:record:nts.uk.ctx.at.record.dom') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:at:record:nts.uk.ctx.at.record.app') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':shr:nts.uk.shr.find')
		compile project(':ctx:at:record:nts.uk.ctx.at.record.dom')
	}
}
project (':ctx:at:record:nts.uk.ctx.at.record.infra') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:at:record:nts.uk.ctx.at.record.dom')
	}
}
project (':ctx:at:record:nts.uk.ctx.at.record.ac') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:at:record:nts.uk.ctx.at.record.dom')
	}
}
project (':ctx:at:record:nts.uk.ctx.at.record.pub') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:at:record:nts.uk.ctx.at.record.pubimp') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:at:record:nts.uk.ctx.at.record.pub')
		compile project(':ctx:at:record:nts.uk.ctx.at.record.dom')
		compile project(':ctx:at:record:nts.uk.ctx.at.record.infra')
	}
}
//=========================at:record↑=====================================




project (':ctx:pr:core:nts.uk.ctx.pr.core.ws') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:pr:core:nts.uk.ctx.pr.core.app')
	}
}
project (':ctx:pr:core:nts.uk.ctx.pr.core.dom') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:pr:core:nts.uk.ctx.pr.core.app') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':shr:nts.uk.shr.find')
		compile project(':ctx:pr:core:nts.uk.ctx.pr.core.dom')
		//compile project(':ctx:pr:core:nts.uk.ctx.pr.core.ac')
	}
}
project (':ctx:pr:core:nts.uk.ctx.pr.core.infra') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:pr:core:nts.uk.ctx.pr.core.app')
		compile project(':ctx:pr:core:nts.uk.ctx.pr.core.dom')
	}
}
project (':ctx:pr:core:nts.uk.ctx.pr.core.ac') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:pr:core:nts.uk.ctx.pr.core.dom')
		compile project(':ctx:basic:nts.uk.ctx.basic.pub')
		//compile project(':ctx:basic:nts.uk.ctx.basic.pubimp')
	}
}
project (':ctx:pr:core:nts.uk.ctx.pr.core.pub') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:pr:core:nts.uk.ctx.pr.core.pubimp') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:pr:core:nts.uk.ctx.pr.core.pub')
		compile project(':ctx:pr:core:nts.uk.ctx.pr.core.dom')
		compile project(':ctx:pr:core:nts.uk.ctx.pr.core.infra')
	}
}

project (':ctx:pr:formula:nts.uk.ctx.pr.formula.ws') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:pr:formula:nts.uk.ctx.pr.formula.app')
	}
}
project (':ctx:pr:formula:nts.uk.ctx.pr.formula.dom') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:pr:formula:nts.uk.ctx.pr.formula.app') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':shr:nts.uk.shr.find')
		compile project(':ctx:pr:formula:nts.uk.ctx.pr.formula.dom')
	}
}
project (':ctx:pr:formula:nts.uk.ctx.pr.formula.infra') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:pr:formula:nts.uk.ctx.pr.formula.dom')
	}
}
project (':ctx:pr:formula:nts.uk.ctx.pr.formula.ac') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:pr:core:nts.uk.ctx.pr.core.pub')
		compile project(':ctx:pr:formula:nts.uk.ctx.pr.formula.app')
		compile project(':ctx:pr:formula:nts.uk.ctx.pr.formula.dom')
	}
}
project (':ctx:pr:formula:nts.uk.ctx.pr.formula.pub') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:pr:formula:nts.uk.ctx.pr.formula.pubimp') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:pr:formula:nts.uk.ctx.pr.formula.pub')
		compile project(':ctx:pr:formula:nts.uk.ctx.pr.formula.dom')
	}
}

project (':ctx:pr:report:nts.uk.ctx.pr.report.ws') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:pr:report:nts.uk.ctx.pr.report.app')
	}
}
project (':ctx:pr:report:nts.uk.ctx.pr.report.dom') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:pr:report:nts.uk.ctx.pr.report.app') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':shr:nts.uk.shr.find')
		compile project(':ctx:pr:report:nts.uk.ctx.pr.report.dom')
		//compile project(':ctx:pr:report:nts.uk.ctx.pr.report.ac')
	}
}
project (':ctx:pr:report:nts.uk.ctx.pr.report.infra') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:pr:report:nts.uk.ctx.pr.report.app')
		compile project(':ctx:pr:report:nts.uk.ctx.pr.report.dom')
	}
}
project (':ctx:pr:report:nts.uk.ctx.pr.report.ac') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:pr:report:nts.uk.ctx.pr.report.dom')
		compile project(':ctx:pr:core:nts.uk.ctx.pr.core.pub')
		//compile project(':ctx:pr:core:nts.uk.ctx.pr.core.pubimp')
	}
}
project (':ctx:pr:report:nts.uk.ctx.pr.report.pub') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}
project (':ctx:pr:report:nts.uk.ctx.pr.report.pubimp') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':ctx:pr:report:nts.uk.ctx.pr.report.pub')
		compile project(':ctx:pr:report:nts.uk.ctx.pr.report.dom')
	}
}


project (':web:nts.uk.com.web') {
	apply plugin: 'war'
	apply plugin: "de.richsource.gradle.plugins.typescript"
	war {
		baseName= "nts.uk.com.web"
		into("view") {
			from compileTypeScript.outputs
		}
	}
	compileTypeScript {
		sourcemap = true
		charset="utf8"
		target = "ES5"
		source=  file("src/main/webapp/view")
		
	}
	
	def explodedWarPath = "${buildDir}/exploded/${war.baseName}.war"
	def explodedWarDeployFile = new File("${explodedWarPath}.dodeploy");
	
	
	task explodedWar(type: Copy) {  
		into explodedWarPath
		with war
		doLast {
			explodedWarDeployFile.write ''
		}
	}
	
	war.dependsOn explodedWar
	
	task copyStaticResource(type: Sync) {
		from "${rootDir}/${war.baseName}/src/main/webapp"
		into explodedWarPath
	}
	
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		providedCompile group: 'com.sun.faces', name: 'jsf-api', version: '2.2.13'

		runtime project (':ctx:basic:nts.uk.ctx.basic.ac')
		runtime project (':ctx:basic:nts.uk.ctx.basic.app')
		runtime project (':ctx:basic:nts.uk.ctx.basic.dom')
		runtime project (':ctx:basic:nts.uk.ctx.basic.infra')
		runtime project (':ctx:basic:nts.uk.ctx.basic.pub')
		runtime project (':ctx:basic:nts.uk.ctx.basic.pubimp')
		runtime project (':ctx:basic:nts.uk.ctx.basic.ws')
		
		runtime project (':shr:nts.uk.shr.ws')
		runtime project (':shr:nts.uk.shr.find')
		
		// shr find implement
		runtime project (':ctx:pr:core:nts.uk.ctx.pr.core.app')
		runtime project (':ctx:pr:core:nts.uk.ctx.pr.core.infra')
		runtime project (':ctx:pr:core:nts.uk.ctx.pr.core.pubimp')
		runtime project (':ctx:pr:core:nts.uk.ctx.pr.core.ac')
		runtime project (':ctx:pr:report:nts.uk.ctx.pr.report.app')
		runtime project (':ctx:pr:report:nts.uk.ctx.pr.report.infra')
		runtime project (':ctx:pr:report:nts.uk.ctx.pr.report.pubimp')
		runtime project (':ctx:pr:report:nts.uk.ctx.pr.report.ac')
		runtime project (':ctx:pr:formula:nts.uk.ctx.pr.formula.app')
		runtime project (':ctx:pr:formula:nts.uk.ctx.pr.formula.infra')
		runtime project (':ctx:pr:formula:nts.uk.ctx.pr.formula.pubimp')
		runtime project (':ctx:pr:formula:nts.uk.ctx.pr.formula.ac')
		

		runtime project (':ctx:sys:portal:nts.uk.ctx.sys.portal.ac')
		runtime project (':ctx:sys:portal:nts.uk.ctx.sys.portal.app')
		runtime project (':ctx:sys:portal:nts.uk.ctx.sys.portal.dom')
		runtime project (':ctx:sys:portal:nts.uk.ctx.sys.portal.infra')
		runtime project (':ctx:sys:portal:nts.uk.ctx.sys.portal.pub')
		runtime project (':ctx:sys:portal:nts.uk.ctx.sys.portal.pubimp')
		runtime project (':ctx:sys:portal:nts.uk.ctx.sys.portal.ws')
	}
}
//=====================nts.uk.com.js.web↓============================
project (':web:nts.uk.com.js.web') {
	apply plugin: 'war'
	apply plugin: "de.richsource.gradle.plugins.typescript"
	war {
		baseName= "nts.uk.com.js.web"
		into("lib/nittsu") {
			from compileTypeScript.outputs
		}
	}
	
	def explodedWarPath = "${buildDir}/exploded/${war.baseName}.war"
	def explodedWarDeployFile = new File("${explodedWarPath}.dodeploy");
	
	compileTypeScript {
		declaration=true
		sourcemap = true
		charset="utf8"
		target = "ES5"
		source=  file("src/main/webapp/lib")
		outFile =file("${buildDir}/js/nts.uk.com.web.nittsu.bundles.js")
		
	}
	task explodedWar(type: Copy) {  
		into explodedWarPath
		with war
		doLast {
			explodedWarDeployFile.write ''
		}
	}
	
	war.dependsOn explodedWar
	
	task copyStaticResource(type: Sync) {
		from "${rootDir}/${war.baseName}/src/main/webapp"
		into explodedWarPath
	}
	
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		
	}
}
//=====================nts.uk.com.js.web↑============================
//=====================nts.uk.at.web↓==============================
project (':web:nts.uk.at.web') {
	apply plugin: 'war'
	apply plugin: "de.richsource.gradle.plugins.typescript"
	war {
		baseName= "nts.uk.at.web"
		into("view") {
			from compileTypeScript.outputs
		}
	}
	compileTypeScript {
		sourcemap = true
		charset="utf8"
		target = "ES5"
		source=  file("src/main/webapp/view")
		
	}
	
	def explodedWarPath = "${buildDir}/exploded/${war.baseName}.war"
	def explodedWarDeployFile = new File("${explodedWarPath}.dodeploy");

	task explodedWar(type: Copy) {  
		into explodedWarPath
		with war
		doLast {
			explodedWarDeployFile.write ''
		}
	}
	
	war.dependsOn explodedWar
	
	task copyStaticResource(type: Sync) {
		from "${rootDir}/${war.baseName}/src/main/webapp"
		into explodedWarPath
	}
	
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		providedCompile group: 'com.sun.faces', name: 'jsf-api', version: '2.2.13'
		
		runtime project (':ctx:at:schedule:nts.uk.ctx.at.schedule.ac')
		runtime project (':ctx:at:schedule:nts.uk.ctx.at.schedule.app')
		runtime project (':ctx:at:schedule:nts.uk.ctx.at.schedule.dom')
		runtime project (':ctx:at:schedule:nts.uk.ctx.at.schedule.infra')
		runtime project (':ctx:at:schedule:nts.uk.ctx.at.schedule.pub')
		runtime project (':ctx:at:schedule:nts.uk.ctx.at.schedule.pubimp')
		runtime project (':ctx:at:schedule:nts.uk.ctx.at.schedule.ws')
		
		runtime project (':ctx:at:record:nts.uk.ctx.at.record.ac')
		runtime project (':ctx:at:record:nts.uk.ctx.at.record.app')
		runtime project (':ctx:at:record:nts.uk.ctx.at.record.dom')
		runtime project (':ctx:at:record:nts.uk.ctx.at.record.infra')
		runtime project (':ctx:at:record:nts.uk.ctx.at.record.pub')
		runtime project (':ctx:at:record:nts.uk.ctx.at.record.pubimp')
		runtime project (':ctx:at:record:nts.uk.ctx.at.record.ws')

	}
}
//=====================nts.uk.at.web↑==============================
project (':web:nts.uk.pr.web') {
	apply plugin: 'war'
	apply plugin: "de.richsource.gradle.plugins.typescript"
	war {
		baseName= "nts.uk.pr.web"
		into("view") {
			from compileTypeScript.outputs
		}
	}
	compileTypeScript {
		sourcemap = true
		charset="utf8"
		target = "ES5"
		source=  file("src/main/webapp/view")
		
	}
	def explodedWarPath = "${buildDir}/exploded/${war.baseName}.war"
	def explodedWarDeployFile = new File("${explodedWarPath}.dodeploy");

	task explodedWar(type: Copy) {  
		into explodedWarPath
		with war
		doLast {
			explodedWarDeployFile.write ''
		}
	}
	
	war.dependsOn explodedWar
	
	task copyStaticResource(type: Sync) {
		from "${rootDir}/${war.baseName}/src/main/webapp"
		into explodedWarPath
	}
	
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		providedCompile group: 'com.sun.faces', name: 'jsf-api', version: '2.2.13'
		
		runtime project (':ctx:pr:core:nts.uk.ctx.pr.core.ac')
		runtime project (':ctx:pr:core:nts.uk.ctx.pr.core.app')
		runtime project (':ctx:pr:core:nts.uk.ctx.pr.core.dom')
		runtime project (':ctx:pr:core:nts.uk.ctx.pr.core.infra')
		runtime project (':ctx:pr:core:nts.uk.ctx.pr.core.pub')
		runtime project (':ctx:pr:core:nts.uk.ctx.pr.core.pubimp')
		runtime project (':ctx:pr:core:nts.uk.ctx.pr.core.ws')

		runtime project (':ctx:pr:report:nts.uk.ctx.pr.report.ac')
		runtime project (':ctx:pr:report:nts.uk.ctx.pr.report.app')
		runtime project (':ctx:pr:report:nts.uk.ctx.pr.report.dom')
		runtime project (':ctx:pr:report:nts.uk.ctx.pr.report.infra')
		runtime project (':ctx:pr:report:nts.uk.ctx.pr.report.pub')
		runtime project (':ctx:pr:report:nts.uk.ctx.pr.report.pubimp')
		runtime project (':ctx:pr:report:nts.uk.ctx.pr.report.ws')

		runtime project (':ctx:pr:formula:nts.uk.ctx.pr.formula.ac')
		runtime project (':ctx:pr:formula:nts.uk.ctx.pr.formula.app')
		runtime project (':ctx:pr:formula:nts.uk.ctx.pr.formula.dom')
		runtime project (':ctx:pr:formula:nts.uk.ctx.pr.formula.infra')
		runtime project (':ctx:pr:formula:nts.uk.ctx.pr.formula.pub')
		runtime project (':ctx:pr:formula:nts.uk.ctx.pr.formula.pubimp')
		runtime project (':ctx:pr:formula:nts.uk.ctx.pr.formula.ws')
		
		runtime project (':screen:pr:nts.uk.screen.pr.ws')
		runtime project (':screen:pr:nts.uk.screen.pr.app')
		runtime project (':screen:pr:nts.uk.screen.pr.infra')
		
		runtime project (':file:pr:nts.uk.file.pr.app')
		runtime project (':file:pr:nts.uk.file.pr.infra')
		
		// to provide PrimitiveValue
		runtime project (':ctx:basic:nts.uk.ctx.basic.dom')
		runtime project (':ctx:basic:nts.uk.ctx.basic.pub')
		runtime project (':ctx:basic:nts.uk.ctx.basic.pubimp')
		runtime project (':ctx:basic:nts.uk.ctx.basic.infra')
	}
}


project (':screen:pr:nts.uk.screen.pr.ws') {
	dependencies {
		compile project (':screen:pr:nts.uk.screen.pr.app')
		compile project (':file:pr:nts.uk.file.pr.app')
	}
}

project (':screen:pr:nts.uk.screen.pr.app') {
	dependencies {
	 	compile project (':ctx:pr:core:nts.uk.ctx.pr.core.dom')
	}
}

project (':screen:pr:nts.uk.screen.pr.infra') {
	dependencies {
		compile project (':screen:pr:nts.uk.screen.pr.app')
	}
}

project (':file:pr:nts.uk.file.pr.app') {
	dependencies {
		compile project (':screen:pr:nts.uk.screen.pr.app')
		runtime project (':ctx:pr:core:nts.uk.ctx.pr.core.app')
		runtime project (':ctx:pr:report:nts.uk.ctx.pr.report.app')
		runtime project (':ctx:pr:formula:nts.uk.ctx.pr.formula.app')
 	 	compile project (':ctx:pr:core:nts.uk.ctx.pr.core.dom')
 	 	compile project (':ctx:pr:report:nts.uk.ctx.pr.report.dom')
 	 	compile project (':ctx:pr:formula:nts.uk.ctx.pr.formula.dom')
	}
}

project (':file:pr:nts.uk.file.pr.infra') {
	dependencies {
		compile project (':file:pr:nts.uk.file.pr.app')
		compile project (':ctx:pr:core:nts.uk.ctx.pr.core.infra')
		compile project (':ctx:pr:report:nts.uk.ctx.pr.report.infra')
		compile project (':ctx:pr:formula:nts.uk.ctx.pr.formula.infra')
		compile project (':ctx:basic:nts.uk.ctx.basic.infra')
		compile group: 'aspose', name: 'cells', version: '9.0.0'
	}
}


artifactory {
	contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
	publish {
		repository {
			repoKey = 'libs-release-local'
			username = "${artifactory_user}"
			password = "${artifactory_password}"
			maven = true
			
		}
	}
	resolve {
		repository {
			repoKey = 'plugins-release'
			username = "${artifactory_user}"
			password = "${artifactory_password}"
			maven = true
			
		}
	}
}