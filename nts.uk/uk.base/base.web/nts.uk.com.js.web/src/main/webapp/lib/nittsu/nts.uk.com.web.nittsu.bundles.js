var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var KeyCodes;
        (function (KeyCodes) {
            KeyCodes.Tab = 9;
            KeyCodes.Enter = 13;
        })(KeyCodes = uk.KeyCodes || (uk.KeyCodes = {}));
        var util;
        (function (util) {
            function compare(obj1, obj2) {
                for (var p in obj1) {
                    if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) {
                        return false;
                    }
                    switch (typeof (obj1[p])) {
                        case "object":
                            if (!compare(obj1[p], obj2[p]))
                                return false;
                            break;
                        case "function":
                            break;
                        default:
                            if (obj1[p] !== obj2[p]) {
                                return false;
                            }
                    }
                }
                for (var p in obj2) {
                    if (typeof (obj1[p]) == 'undefined')
                        return false;
                }
                return true;
            }
            util.compare = compare;
            /**
             * 常にtrueを返す関数が必要になったらこれ
             */
            function alwaysTrue() {
                return true;
            }
            util.alwaysTrue = alwaysTrue;
            /**
             * function find an item index in array
             * if key presented will perform find index of item in array which contain key equal to the 'item' parameter
             */
            function findIndex(arr, value, key) {
                for (var i = 0; i < arr.length; i++) {
                    var item = arr[i];
                    if (item[key] === value)
                        return i;
                }
                return -1;
            }
            util.findIndex = findIndex;
            /** function add item to array, this function is used in combine with visitDfs function
             * visitDfs(node, addToArray, childField, arr) will return flatArray by DFS order, start by node and following by each child belong to it.
             */
            function addToArray(node, arr) {
                arr.push(node);
            }
            /**
             * DFS algorithm function to iterate over an object with structre like tree
             */
            function visitDfs(node, func, childField, arr) {
                if (func) {
                    if (arr)
                        func(node, arr);
                    else
                        func(node);
                }
                var childs = node[childField];
                $.each(childs, function (child) {
                    visitDfs(childs[child], func, childField, arr);
                });
            }
            util.visitDfs = visitDfs;
            /**
             * return flatern array of array of tree-like objects
             */
            function flatArray(arr, childField) {
                var flatArr = [];
                if (!childField)
                    return arr;
                for (var i = 0; i < arr.length; i++) {
                    var item = arr[i];
                    visitDfs(item, addToArray, childField, flatArr);
                }
                return flatArr;
            }
            util.flatArray = flatArray;
            /**
             * return filtered array
             * @param {Array} array of items
             * @param {String} user input
             * @param {Array} array of fields used to search on
             * @param {String} if not null, search will perform in flatarray of arr
             */
            function searchArray(arr, searchTerm, fields, childField) {
                //if items is empty return empty array
                if (!arr) {
                    return [];
                }
                if (!(searchTerm instanceof String)) {
                    searchTerm = "" + searchTerm;
                }
                var flatArr = flatArray(arr, childField);
                var filter = searchTerm.toLowerCase();
                //if filter is empty return all the items
                if (!filter) {
                    return flatArr;
                }
                //filter data
                var filtered = flatArr.filter(function (item) {
                    var i = fields.length;
                    while (i--) {
                        var prop = fields[i];
                        var strProp = ("" + item[prop]).toLocaleLowerCase();
                        if (strProp.indexOf(filter) !== -1) {
                            return true;
                        }
                        ;
                    }
                    return false;
                });
                return filtered;
            }
            util.searchArray = searchArray;
            /**
             * SearchBox helper function to jump next search
             */
            function nextSelectionSearch(selected, arr, selectedKey, isArray) {
                var current = null;
                if (isArray) {
                    if (selected.length > 0)
                        current = selected[0];
                }
                else if (selected !== undefined && selected !== '' && selected !== null) {
                    current = selected;
                }
                if (arr.length > 0) {
                    if (current) {
                        for (var i = 0; i < arr.length - 1; i++) {
                            var item = arr[i];
                            if (item[selectedKey] === current)
                                return arr[i + 1][selectedKey];
                        }
                    }
                    if (selectedKey)
                        return arr[0][selectedKey];
                    return arr[0];
                }
                return undefined;
            }
            util.nextSelectionSearch = nextSelectionSearch;
            /**
             * Returns true if the target is null or undefined.
             */
            function isNullOrUndefined(target) {
                return target === null || target === undefined;
            }
            util.isNullOrUndefined = isNullOrUndefined;
            /**
             * Returns true if the target is null or undefined or blank.
             * @param  {any} [target] Target need to check
             * @return {boolean}      True for blank
             */
            function isNullOrEmpty(target) {
                return (target === undefined || target === null || target.length == 0);
            }
            util.isNullOrEmpty = isNullOrEmpty;
            /**
             * Generate random identifier string (UUIDv4)
             */
            function randomId() {
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0;
                    return ((c == 'x') ? r : (r & 0x3 | 0x8)).toString(16);
                });
            }
            util.randomId = randomId;
            /**
             * Returns true if current window is in frame.
             */
            function isInFrame() {
                return window.parent != window;
            }
            util.isInFrame = isInFrame;
            /**
             * valueMaybeEmptyがnullまたはundefinedの場合、defaultValueを返す。
             * そうでなければ、valueMaybeEmptyを返す。
             */
            function orDefault(valueMaybeEmpty, defaultValue) {
                return isNullOrUndefined(valueMaybeEmpty) ? defaultValue : valueMaybeEmpty;
            }
            util.orDefault = orDefault;
            function getConstraintMes(primitiveValues) {
                if (isNullOrEmpty(primitiveValues)) {
                    return "";
                }
                if (!Array.isArray(primitiveValues))
                    primitiveValues = [primitiveValues];
                var constraintText = "";
                _.forEach(primitiveValues, function (primitiveValue) {
                    var constraint = __viewContext.primitiveValueConstraints[primitiveValue];
                    switch (constraint.valueType) {
                        case 'String':
                            constraintText += (constraintText.length > 0) ? "/" : "";
                            constraintText += uk.text.getCharType(primitiveValue).buildConstraintText(constraint.maxLength);
                            break;
                        case 'Decimal':
                        case 'Integer':
                        case 'Date':
                        case 'Time':
                        case 'Clock':
                        case 'Duration': // ValidatorScriptではない。DynamicConstraintで使う？
                        case 'TimePoint':
                            constraintText += (constraintText.length > 0) ? "/" : "";
                            constraintText += constraint.min + "～" + constraint.max;
                            break;
                        default:
                            constraintText += 'ERROR';
                            break;
                    }
                });
                return constraintText;
            }
            util.getConstraintMes = getConstraintMes;
            function getConstraintLabel(primitiveValues) {
                var constraintText = getConstraintMes(primitiveValues);
                return "<span class='constraint-label'>(" + constraintText + ")</span>";
            }
            util.getConstraintLabel = getConstraintLabel;
            /**
             * Returns true if expects contains actual.
             */
            function isIn(actual, expects) {
                for (var i = 0; i < expects.length; i++) {
                    if (actual === expects[i])
                        return true;
                }
                return false;
            }
            util.isIn = isIn;
            ;
            function createTreeFromString(original, openChar, closeChar, seperatorChar, operatorChar) {
                var result = convertToTree(original, openChar, closeChar, seperatorChar, 1, operatorChar).result;
                //            result = moveToParentIfEmpty(result);
                return result;
            }
            util.createTreeFromString = createTreeFromString;
            function moveToParentIfEmpty(tree) {
                var result = [];
                _.forEach(tree, function (e) {
                    if (e.children.length > 0) {
                        e.children = moveToParentIfEmpty(e.children);
                        if (uk.text.isNullOrEmpty(e.value)) {
                            result = result.concat(e.children);
                        }
                        else {
                            result.push(e);
                        }
                    }
                    else {
                        result.push(e);
                    }
                });
                return result;
            }
            function convertToTree(original, openChar, closeChar, separatorChar, index, operatorChar) {
                var result = [];
                while (original.trim().length > 0) {
                    var firstOpenIndex = original.indexOf(openChar);
                    if (firstOpenIndex < 0) {
                        var values = original.split(separatorChar);
                        _.forEach(values, function (value) {
                            var data = splitByArray(value, operatorChar.slice());
                            _.each(data, function (v) {
                                var object = new TreeObject();
                                object.value = v;
                                object.children = [];
                                object.isOperator = operatorChar.indexOf(v) >= 0;
                                result.push(object);
                            });
                        });
                        return {
                            "result": result,
                            "index": index
                        };
                    }
                    else {
                        var object = new TreeObject();
                        object.value = original.substring(0, firstOpenIndex).trim();
                        object.index = index;
                        var closeIndex = findIndexOfCloseChar(original, openChar, closeChar, firstOpenIndex);
                        if (closeIndex >= 0) {
                            index++;
                            var res = convertToTree(original.substring(firstOpenIndex + 1, closeIndex).trim(), openChar, closeChar, separatorChar, index, operatorChar);
                            object.children = res.result;
                            index = res.index++;
                            result.push(object);
                            var firstSeperatorIndex = original.indexOf(separatorChar, closeIndex);
                            if (firstSeperatorIndex >= 0) {
                                original = original.substring(firstSeperatorIndex + 1, original.length).trim();
                            }
                            else {
                                return {
                                    "result": result,
                                    "index": index
                                };
                            }
                        }
                        else {
                            return {
                                "result": result,
                                "index": index
                            };
                        }
                    }
                }
                return {
                    "result": result,
                    "index": index
                };
            }
            function splitByArray(original, operatorChar) {
                var temp = [];
                var result = [];
                if (original.trim().length <= 0) {
                    return temp;
                }
                if (operatorChar.length <= 0) {
                    return [original];
                }
                var operator = operatorChar.shift();
                while (original.trim().length > 0) {
                    var index = original.indexOf(operator);
                    if (index >= 0) {
                        temp.push(original.substring(0, index).trim());
                        temp.push(original.substring(index, index + 1).trim());
                        original = original.substring(index + 1, original.length).trim();
                    }
                    else {
                        temp.push(original);
                        break;
                    }
                }
                _.each(temp, function (value) {
                    result = result.concat(splitByArray(value, operatorChar));
                });
                return result;
            }
            function findIndexOfCloseChar(original, openChar, closeChar, firstOpenIndex) {
                var openCount = 0;
                var closeCount = 0;
                for (var i = firstOpenIndex; i < original.length; i++) {
                    if (original.charAt(i) === openChar) {
                        openCount++;
                    }
                    else if (original.charAt(i) === closeChar) {
                        closeCount++;
                    }
                    if (openCount > 0 && openCount === closeCount) {
                        return i;
                    }
                }
                return -1;
            }
            var TreeObject = (function () {
                function TreeObject(value, children, index, isOperator) {
                    var self = this;
                    self.value = value;
                    self.children = children;
                    self.index = index;
                    self.isOperator = isOperator;
                }
                return TreeObject;
            }());
            util.TreeObject = TreeObject;
            /**
             * Like Java Optional
             */
            var optional;
            (function (optional) {
                function of(value) {
                    return new Optional(value);
                }
                optional.of = of;
                function empty() {
                    return new Optional(null);
                }
                optional.empty = empty;
                var Optional = (function () {
                    function Optional(value) {
                        this.value = orDefault(value, null);
                    }
                    Optional.prototype.ifPresent = function (consumer) {
                        if (this.isPresent()) {
                            consumer(this.value);
                        }
                        return this;
                    };
                    Optional.prototype.ifEmpty = function (action) {
                        if (!this.isPresent()) {
                            action();
                        }
                        return this;
                    };
                    Optional.prototype.map = function (mapper) {
                        return this.isPresent() ? of(mapper(this.value)) : empty();
                    };
                    Optional.prototype.isPresent = function () {
                        return this.value !== null;
                    };
                    Optional.prototype.get = function () {
                        if (!this.isPresent()) {
                            throw new Error('not present');
                        }
                        return this.value;
                    };
                    Optional.prototype.orElse = function (stead) {
                        return this.isPresent() ? this.value : stead;
                    };
                    Optional.prototype.orElseThrow = function (errorBuilder) {
                        if (!this.isPresent()) {
                            throw errorBuilder();
                        }
                    };
                    return Optional;
                }());
                optional.Optional = Optional;
            })(optional = util.optional || (util.optional = {}));
            var Range = (function () {
                function Range(start, end) {
                    if (start > end) {
                        throw new Error('start is larger than end');
                    }
                    this.start = start;
                    this.end = end;
                }
                Range.prototype.contains = function (value) {
                    return this.start <= value && value <= this.end;
                };
                Range.prototype.greaterThan = function (value) {
                    return value < this.start;
                };
                Range.prototype.greaterThanOrEqualTo = function (value) {
                    return value <= this.start;
                };
                Range.prototype.lessThan = function (value) {
                    return this.end < value;
                };
                Range.prototype.lessThanOrEqualTo = function (value) {
                    return this.end <= value;
                };
                Range.prototype.distanceFrom = function (value) {
                    if (this.greaterThan(value)) {
                        return value - this.start;
                    }
                    else if (this.lessThan(value)) {
                        return value - this.end;
                    }
                    else {
                        return 0;
                    }
                };
                return Range;
            }());
            util.Range = Range;
            var value;
            (function (value) {
                function reset($controls, defaultVal, immediateApply) {
                    var resetEvent = new CustomEvent(DefaultValue.RESET_EVT, {
                        detail: {
                            value: defaultVal,
                            immediateApply: immediateApply === undefined ? true : immediateApply
                        }
                    });
                    _.forEach($controls, function (control) {
                        control.dispatchEvent(resetEvent);
                    });
                }
                value.reset = reset;
                var DefaultValue = (function () {
                    function DefaultValue() {
                    }
                    DefaultValue.prototype.onReset = function ($control, koValue) {
                        var self = this;
                        $control.addClass("reset-element");
                        $control.on(DefaultValue.RESET_EVT, function (e) {
                            var param = e.detail;
                            self.asDefault($(this), koValue, param.value, param.immediateApply);
                        });
                        return this;
                    };
                    DefaultValue.prototype.applyReset = function ($control, koValue) {
                        var defaultVal = _.cloneDeep($control.data("default"));
                        var isDirty = defaultVal !== koValue();
                        if ($control.ntsError("hasError"))
                            $control.ntsError("clear");
                        if (defaultVal !== undefined && isDirty)
                            setTimeout(function () { return koValue(defaultVal); }, 0);
                        return { isDirty: isDirty };
                    };
                    DefaultValue.prototype.asDefault = function ($control, koValue, defaultValue, immediateApply) {
                        var defaultVal = defaultValue !== undefined ? defaultValue : koValue();
                        $control.data("default", defaultVal);
                        if (immediateApply)
                            this.applyReset($control, koValue);
                    };
                    DefaultValue.RESET_EVT = "reset";
                    return DefaultValue;
                }());
                value.DefaultValue = DefaultValue;
            })(value = util.value || (util.value = {}));
            var accessor;
            (function (accessor) {
                function defineInto(obj) {
                    return new AccessorDefine(obj);
                }
                accessor.defineInto = defineInto;
                var AccessorDefine = (function () {
                    function AccessorDefine(obj) {
                        this.obj = obj;
                    }
                    AccessorDefine.prototype.get = function (name, func) {
                        Object.defineProperty(this.obj, name, { get: func, configurable: true });
                        return this;
                    };
                    return AccessorDefine;
                }());
                accessor.AccessorDefine = AccessorDefine;
            })(accessor = util.accessor || (util.accessor = {}));
            var exception;
            (function (exception_1) {
                function isBundledBusinessErrors(exception) {
                    return !isNullOrUndefined(exception) && ($.isArray(exception["errors"])
                        && exception["businessException"]);
                }
                exception_1.isBundledBusinessErrors = isBundledBusinessErrors;
                function isErrorToReject(res) {
                    return !isNullOrUndefined(res) && (res.businessException || res.optimisticLock);
                }
                exception_1.isErrorToReject = isErrorToReject;
                function isBusinessError(res) {
                    return !isNullOrUndefined(res) && (res.businessException);
                }
                exception_1.isBusinessError = isBusinessError;
            })(exception = util.exception || (util.exception = {}));
        })(util = uk.util || (uk.util = {}));
        var WebStorageWrapper = (function () {
            function WebStorageWrapper(nativeStorage) {
                this.nativeStorage = nativeStorage;
            }
            WebStorageWrapper.prototype.setItem = function (key, value) {
                if (value === undefined) {
                    return;
                }
                this.nativeStorage.setItem(key, value);
            };
            WebStorageWrapper.prototype.setItemAsJson = function (key, value) {
                this.setItem(key, JSON.stringify(value));
            };
            WebStorageWrapper.prototype.containsKey = function (key) {
                return this.getItem(key) !== null;
            };
            ;
            WebStorageWrapper.prototype.getItem = function (key) {
                var value = this.nativeStorage.getItem(key);
                if (value === null || value === undefined || value === 'undefined') {
                    return util.optional.empty();
                }
                return util.optional.of(value);
            };
            WebStorageWrapper.prototype.getItemAndRemove = function (key) {
                var item = this.getItem(key);
                this.removeItem(key);
                return item;
            };
            WebStorageWrapper.prototype.removeItem = function (key) {
                this.nativeStorage.removeItem(key);
            };
            WebStorageWrapper.prototype.clear = function () {
                this.nativeStorage.clear();
            };
            return WebStorageWrapper;
        }());
        uk.WebStorageWrapper = WebStorageWrapper;
        /**
         * Utilities about jquery deferred
         */
        var deferred;
        (function (deferred) {
            /**
             * Repeats a task with jQuery Deferred
             */
            function repeat(configurator) {
                var conf = repeater.createConfiguration();
                configurator(conf);
                return repeater.begin(conf);
            }
            deferred.repeat = repeat;
            var repeater;
            (function (repeater) {
                function begin(conf) {
                    return conf.run();
                }
                repeater.begin = begin;
                function createConfiguration() {
                    return new Configuration();
                }
                repeater.createConfiguration = createConfiguration;
                var Configuration = (function () {
                    function Configuration() {
                        this.pauseMilliseconds = 0;
                        this.runAfter = 0;
                    }
                    Configuration.prototype.task = function (taskFunction) {
                        this.taskFunction = taskFunction;
                        return this;
                    };
                    Configuration.prototype.while = function (whileCondition) {
                        this.whileCondition = whileCondition;
                        return this;
                    };
                    Configuration.prototype.pause = function (pauseMilliseconds) {
                        this.pauseMilliseconds = pauseMilliseconds;
                        return this;
                    };
                    Configuration.prototype.after = function (runAfterMilliseconds) {
                        this.runAfter = runAfterMilliseconds;
                        return this;
                    };
                    Configuration.prototype.run = function () {
                        var _this = this;
                        var dfd = $.Deferred();
                        if (this.runAfter > 0) {
                            setTimeout(function () { return _this.repeat(dfd); }, this.runAfter);
                        }
                        else {
                            this.repeat(dfd);
                        }
                        return dfd.promise();
                    };
                    Configuration.prototype.repeat = function (dfd) {
                        var _this = this;
                        this.taskFunction().done(function (res) {
                            if (_this.whileCondition(res)) {
                                setTimeout(function () { return _this.repeat(dfd); }, _this.pauseMilliseconds);
                            }
                            else {
                                dfd.resolve(res);
                            }
                        }).fail(function (res) {
                            dfd.reject(res);
                        });
                    };
                    return Configuration;
                }());
            })(repeater = deferred.repeater || (deferred.repeater = {}));
        })(deferred = uk.deferred || (uk.deferred = {}));
        var resource;
        (function (resource) {
            var names = window['names'] || {};
            var messages = window['messages'] || {};
            function getText(code, params) {
                var text = names[code];
                if (text) {
                    text = formatParams(text, params);
                    text = formatCompCustomizeResource(text);
                    return text.replace(/\\r\\n/g, '\r\n');
                }
                return code;
            }
            resource.getText = getText;
            function getMessage(messageId, params) {
                var message = messages[messageId];
                if (!message) {
                    var responseText_1 = "";
                    nts.uk.request.syncAjax("com", "i18n/resources/rawcontent/" + messageId).done(function (res) {
                        responseText_1 = res;
                    }).fail(function () {
                    });
                    if (responseText_1.length == 0 || responseText_1 === messageId) {
                        return messageId;
                    }
                    message = responseText_1;
                    messages[messageId] = message;
                }
                message = formatParams(message, params);
                message = formatCompCustomizeResource(message);
                return message.replace(/\\r\\n/g, '\r\n');
            }
            resource.getMessage = getMessage;
            function formatCompCustomizeResource(message) {
                var compDependceParamRegex = /{#(\w*)}/;
                var matches;
                while (matches = compDependceParamRegex.exec(message)) {
                    var code = matches[1];
                    var text_1 = getText(code);
                    message = message.replace(compDependceParamRegex, text_1);
                }
                return message;
            }
            function formatParams(message, args) {
                if (args == null || args.length == 0)
                    return message;
                var paramRegex = /{([0-9])+(:\w+)?}/;
                var matches;
                var formatter = uk.time.getFormatter();
                while (matches = paramRegex.exec(message)) {
                    var code = matches[1];
                    var text_2 = args[parseInt(code)];
                    //                if(text!=undefined && text.indexOf("#")==0){
                    //                    text = getText(text.substring(1))
                    //                }
                    var param = matches[2];
                    if (param !== undefined && formatter !== undefined) {
                        text_2 = uk.time.applyFormat(param.substring(1), text_2, formatter);
                    }
                    message = message.replace(paramRegex, text_2);
                }
                return message;
            }
            function getControlName(name) {
                var hashIdx = name.indexOf("#");
                if (hashIdx !== 0)
                    return name;
                var names = name.substring(hashIdx + 2, name.length - 1).split(",");
                if (names.length > 1) {
                    var params_1 = new Array();
                    _.forEach(names, function (n, idx) {
                        if (idx === 0)
                            return true;
                        params_1.push(getText(n.trim()));
                    });
                    return getText(names[0], params_1);
                }
                return getText(names[0]);
            }
            resource.getControlName = getControlName;
        })(resource = uk.resource || (uk.resource = {}));
        uk.sessionStorage = new WebStorageWrapper(window.sessionStorage);
        uk.localStorage = new WebStorageWrapper(window.localStorage);
        var characteristics;
        (function (characteristics) {
            /**
             * Now, "characteristic data" is saved in Local Storage.
             * In the future, the data may be saved in DB using Ajax.
             * So these APIs have jQuery Deferred Interface to support asynchronous.
             */
            var delayToEmulateAjax = 100;
            function convertObjectToArray(key) {
                var result = [];
                for (var p in key) {
                    result.push([p, key[p]]);
                }
                result.sort(function (a, b) {
                    return (a > b) ? 1 : (a < b) ? -1 : 0;
                });
                return result.toString();
            }
            function saveByObjectKey(key, value) {
                return save(convertObjectToArray(key), value);
            }
            characteristics.saveByObjectKey = saveByObjectKey;
            function restoreByObjectKey(key) {
                return restore(convertObjectToArray(key));
            }
            characteristics.restoreByObjectKey = restoreByObjectKey;
            function save(key, value) {
                var dfd = $.Deferred();
                setTimeout(function () {
                    uk.localStorage.setItemAsJson(createKey(key), value);
                    dfd.resolve();
                }, delayToEmulateAjax);
                return dfd.promise();
            }
            characteristics.save = save;
            function restore(key) {
                var dfd = $.Deferred();
                setTimeout(function () {
                    var value = uk.localStorage.getItem(createKey(key))
                        .map(function (v) { return JSON.parse(v); }).orElse(undefined);
                    dfd.resolve(value);
                }, delayToEmulateAjax);
                return dfd.promise();
            }
            characteristics.restore = restore;
            function remove(key) {
                var dfd = $.Deferred();
                setTimeout(function () {
                    uk.localStorage.removeItem(createKey(key));
                    dfd.resolve();
                }, delayToEmulateAjax);
                return dfd.promise();
            }
            characteristics.remove = remove;
            function createKey(key) {
                return 'nts.uk.characteristics.' + key;
            }
        })(characteristics = uk.characteristics || (uk.characteristics = {}));
        var types;
        (function (types_1) {
            function matchArguments(values, types) {
                if (values.length !== types.length) {
                    return false;
                }
                for (var i = 0; i < values.length; i++) {
                    if (typeof values[i] !== types[i])
                        return false;
                }
                return true;
            }
            types_1.matchArguments = matchArguments;
        })(types = uk.types || (uk.types = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var format;
        (function (format) {
            var NoFormatter = (function () {
                function NoFormatter() {
                }
                NoFormatter.prototype.format = function (source) {
                    return source;
                };
                return NoFormatter;
            }());
            format.NoFormatter = NoFormatter;
        })(format = uk.format || (uk.format = {}));
        var text;
        (function (text_3) {
            var regexp = {
                allHalfNumeric: /^\d*$/,
                allHalfAlphabet: /^[a-zA-Z]*$/,
                allHalfAlphanumeric: /^[a-zA-Z0-9]*$/,
                allHalfKatakanaReg: /^[ｱ-ﾝｧ-ｫｬ-ｮｯｦ ﾞﾟ｡.ｰ､･'-]*$/,
                allFullKatakanaReg: /^[ァ-ー　。．ー、・’－ヴヽヾ]*$/,
                allHiragana: /^[ぁ-ん　ー ]*$/,
                workplaceCode: /^[a-zA-Z0-9_-]{1,10}$/
            };
            /**
             * 文字列の半角文字数を数える（Unicode用）
             * @param text 解析対象の文字列
             */
            function countHalf(text) {
                var count = 0;
                for (var i = 0; i < text.length; i++) {
                    var c = text.charCodeAt(i);
                    // 0x20 ～ 0x80: 半角記号と半角英数字
                    // 0xff61 ～ 0xff9f: 半角カタカナ
                    if ((0x20 <= c && c <= 0x7e) || (0xff61 <= c && c <= 0xff9f)) {
                        count += 1;
                    }
                    else {
                        count += 2;
                    }
                }
                return count;
            }
            text_3.countHalf = countHalf;
            function limitText(str, maxlength, index) {
                var idx = nts.uk.util.isNullOrUndefined(index) ? 0 : index;
                return str.substring(idx, findIdxFullHafl(str, maxlength, idx));
            }
            text_3.limitText = limitText;
            function findIdxFullHafl(text, max, index) {
                var count = 0;
                for (var i = index; i < text.length; i++) {
                    var c = text.charCodeAt(i);
                    var charLength = 2;
                    // 0x20 ～ 0x80: 半角記号と半角英数字
                    // 0xff61 ～ 0xff9f: 半角カタカナ
                    if ((0x20 <= c && c <= 0x7e) || (0xff61 <= c && c <= 0xff9f)) {
                        charLength = 1;
                    }
                    if (charLength + count <= max) {
                        count += charLength;
                    }
                    else {
                        return i;
                    }
                }
                return text.length - index;
            }
            function toOneByteAlphaNumberic(text) {
                return text.replace(/[！-～　]/g, function (s) {
                    if (s === "　") {
                        return String.fromCharCode(s.charCodeAt(0) - 12256);
                    }
                    return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
                });
            }
            text_3.toOneByteAlphaNumberic = toOneByteAlphaNumberic;
            function toTwoByteAlphaNumberic(text) {
                return text.replace(/[\!-\~ ]/g, function (s) {
                    if (s === " ") {
                        return String.fromCharCode(s.charCodeAt(0) + 12256);
                    }
                    return String.fromCharCode(s.charCodeAt(0) + 0xFEE0);
                });
            }
            text_3.toTwoByteAlphaNumberic = toTwoByteAlphaNumberic;
            function katakanaToHiragana(text) {
                text = text.replace(/[ァ-ヴ]/g, function (s) {
                    return String.fromCharCode(s.charCodeAt(0) - 0x60);
                }).replace(/ﾞ/g, '゛').replace(/ﾟ/g, '゜')
                    .replace(/(う゛)/g, 'ゔ').replace(/ヷ/g, 'わ゛')
                    .replace(/ヸ/g, 'ゐ゛').replace(/ヹ/g, 'ゑ゛')
                    .replace(/ヺ/g, 'を゛').replace(/(ヽ゛)/g, 'ゞ')
                    .replace(/ヽ/g, 'ゝ').replace(/ヾ/g, 'ゞ');
                return text;
            }
            text_3.katakanaToHiragana = katakanaToHiragana;
            function hiraganaToKatakana(text, opt) {
                text = text.replace(/[ぁ-ゔ]/g, function (s) {
                    return String.fromCharCode(s.charCodeAt(0) + 0x60);
                }).replace(/ﾞ/g, '゛').replace(/ﾟ/g, '゜')
                    .replace(/(ウ゛)/g, 'ヴ').replace(/(ワ゛)/g, 'ヷ')
                    .replace(/(ヰ゛)/g, 'ヸ').replace(/(ヱ゛)/g, 'ヹ')
                    .replace(/(ヲ゛)/g, 'ヺ').replace(/(ゝ゛)/g, 'ヾ')
                    .replace(/ゝ/g, 'ヽ').replace(/ゞ/g, 'ヾ');
                if (opt !== false) {
                    text = text.replace(/ゕ/g, 'ヵ').replace(/ゖ/g, 'ヶ');
                }
                return text;
            }
            text_3.hiraganaToKatakana = hiraganaToKatakana;
            /**
             * 半角カタカナを全角カタカナに変換
             *
             * @param {String} str 変換したい文字列
             */
            function oneByteKatakanaToTwoByte(text) {
                var katakanaMap = {
                    'ｶﾞ': 'ガ', 'ｷﾞ': 'ギ', 'ｸﾞ': 'グ', 'ｹﾞ': 'ゲ', 'ｺﾞ': 'ゴ',
                    'ｻﾞ': 'ザ', 'ｼﾞ': 'ジ', 'ｽﾞ': 'ズ', 'ｾﾞ': 'ゼ', 'ｿﾞ': 'ゾ',
                    'ﾀﾞ': 'ダ', 'ﾁﾞ': 'ヂ', 'ﾂﾞ': 'ヅ', 'ﾃﾞ': 'デ', 'ﾄﾞ': 'ド',
                    'ﾊﾞ': 'バ', 'ﾋﾞ': 'ビ', 'ﾌﾞ': 'ブ', 'ﾍﾞ': 'ベ', 'ﾎﾞ': 'ボ',
                    'ﾊﾟ': 'パ', 'ﾋﾟ': 'ピ', 'ﾌﾟ': 'プ', 'ﾍﾟ': 'ペ', 'ﾎﾟ': 'ポ',
                    'ｳﾞ': 'ヴ', 'ﾜﾞ': 'ヷ', 'ｦﾞ': 'ヺ',
                    'ｱ': 'ア', 'ｲ': 'イ', 'ｳ': 'ウ', 'ｴ': 'エ', 'ｵ': 'オ',
                    'ｶ': 'カ', 'ｷ': 'キ', 'ｸ': 'ク', 'ｹ': 'ケ', 'ｺ': 'コ',
                    'ｻ': 'サ', 'ｼ': 'シ', 'ｽ': 'ス', 'ｾ': 'セ', 'ｿ': 'ソ',
                    'ﾀ': 'タ', 'ﾁ': 'チ', 'ﾂ': 'ツ', 'ﾃ': 'テ', 'ﾄ': 'ト',
                    'ﾅ': 'ナ', 'ﾆ': 'ニ', 'ﾇ': 'ヌ', 'ﾈ': 'ネ', 'ﾉ': 'ノ',
                    'ﾊ': 'ハ', 'ﾋ': 'ヒ', 'ﾌ': 'フ', 'ﾍ': 'ヘ', 'ﾎ': 'ホ',
                    'ﾏ': 'マ', 'ﾐ': 'ミ', 'ﾑ': 'ム', 'ﾒ': 'メ', 'ﾓ': 'モ',
                    'ﾔ': 'ヤ', 'ﾕ': 'ユ', 'ﾖ': 'ヨ',
                    'ﾗ': 'ラ', 'ﾘ': 'リ', 'ﾙ': 'ル', 'ﾚ': 'レ', 'ﾛ': 'ロ',
                    'ﾜ': 'ワ', 'ｦ': 'ヲ', 'ﾝ': 'ン',
                    'ｧ': 'ァ', 'ｨ': 'ィ', 'ｩ': 'ゥ', 'ｪ': 'ェ', 'ｫ': 'ォ',
                    'ｯ': 'ッ', 'ｬ': 'ャ', 'ｭ': 'ュ', 'ｮ': 'ョ',
                    '｡': '。', '､': '、', 'ｰ': 'ー', '｢': '「', '｣': '」', '･': '・'
                };
                var expression = new RegExp('(' + Object.keys(katakanaMap).join('|') + ')', 'g');
                return text.replace(expression, function (match) {
                    return katakanaMap[match];
                }).replace(/ﾞ/g, '゛').replace(/ﾟ/g, '゜');
            }
            text_3.oneByteKatakanaToTwoByte = oneByteKatakanaToTwoByte;
            function anyChar(text) {
                return {
                    probe: true,
                    messageId: 'FND_E_ANY'
                };
            }
            text_3.anyChar = anyChar;
            /**
             * 文字列が半角数字のみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allHalfNumeric(text) {
                return {
                    probe: regexp.allHalfNumeric.test(text),
                    messageId: 'FND_E_NUMERIC'
                };
            }
            text_3.allHalfNumeric = allHalfNumeric;
            /**
             * 文字列が半角英字のみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allHalfAlphabet(text) {
                return {
                    probe: regexp.allHalfAlphabet.test(text),
                    messageId: 'NO_MESSAGE'
                };
            }
            text_3.allHalfAlphabet = allHalfAlphabet;
            /**
             * 文字列が半角英数字のみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allHalfAlphanumeric(text) {
                return {
                    probe: regexp.allHalfAlphanumeric.test(text),
                    messageId: 'FND_E_ALPHANUMERIC'
                };
            }
            text_3.allHalfAlphanumeric = allHalfAlphanumeric;
            /**
             * 文字列が半角カナのみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allHalfKatakana(text) {
                return {
                    probe: regexp.allHalfKatakanaReg.test(text),
                    messageId: 'NO_MESSAGE'
                };
            }
            text_3.allHalfKatakana = allHalfKatakana;
            /**
             * 文字列が全角カナのみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allFullKatakana(text) {
                return {
                    probe: regexp.allFullKatakanaReg.test(text),
                    messageId: 'FND_E_KANA'
                };
            }
            text_3.allFullKatakana = allFullKatakana;
            /**
             * 文字列が半角文字のみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allHalf(text) {
                return {
                    probe: text.length === countHalf(text),
                    messageId: 'FND_E_ANYHALFWIDTH'
                };
            }
            text_3.allHalf = allHalf;
            /**
             * 文字列が平仮名のみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allHiragana(text) {
                return {
                    probe: regexp.allHiragana.test(text),
                    messageId: 'NO_MESSAGE'
                };
            }
            text_3.allHiragana = allHiragana;
            /**
             * 文字列がカタカナのみで構成された1文字以上の文字列かどうか判断する
             * @param text 解析対象の文字列
             */
            function allKatakana(text) {
                return {
                    probe: regexp.allFullKatakanaReg.test(text),
                    messageId: 'NO_MESSAGE'
                };
            }
            text_3.allKatakana = allKatakana;
            /**
             * Determines if text is half integer
             * @param text text to check
             */
            function halfInt(text) {
                var val = parseFloat(text);
                var probe = false;
                if (val !== NaN && (val * 2) % 1 === 0)
                    probe = true;
                return {
                    probe: probe,
                    messageId: 'FND_E_HALFINT'
                };
            }
            text_3.halfInt = halfInt;
            /**
             * Determinies if text is workplace code
             * @param text text to check
             */
            function workplaceCode(text) {
                return {
                    probe: regexp.workplaceCode.test(text),
                    messageId: 'FND_E_ALPHANUMERIC'
                };
            }
            text_3.workplaceCode = workplaceCode;
            /**
             * 文字列中のHTML記号をサニタイズする
             * @param text 変換対象の文字列
             */
            function htmlEncode(text) {
                var element = document.createElement('pre');
                if (typeof element.textContent !== 'undefined') {
                    element.textContent = text;
                }
                else {
                    element.innerText = text;
                }
                return element.innerHTML;
            }
            text_3.htmlEncode = htmlEncode;
            /**
             * 1文字目のみ小文字に変換する
             * @param text 変換対象の文字列
             */
            function toLowerCaseFirst(text) {
                return text.charAt(0).toLowerCase() + text.slice(1);
            }
            text_3.toLowerCaseFirst = toLowerCaseFirst;
            ;
            /**
             * 1文字目のみ大文字に変換する
             * @param text 変換対象の文字列
             */
            function toUpperCaseFirst(text) {
                return text.charAt(0).toUpperCase() + text.slice(1);
            }
            text_3.toUpperCaseFirst = toUpperCaseFirst;
            /**
             * Convert lower case text to upper case one
             * @param text text to convert
             */
            function toUpperCase(text) {
                return text.replace(/[a-z]/g, function (c) {
                    return String.fromCharCode(c.charCodeAt(0) - 0x20);
                });
            }
            text_3.toUpperCase = toUpperCase;
            /**
            * 指定された文字列が、null、undefined、Emptyか判定する
            * @param text 判定対象の文字列
            */
            function isNullOrEmpty(text) {
                var result = true;
                if (text !== null && text !== undefined) {
                    var convertValue = String(text);
                    result = convertValue.length === 0;
                }
                return result;
            }
            text_3.isNullOrEmpty = isNullOrEmpty;
            /**
            * 指定した文字列の各書式項目を、対応するオブジェクトの値と等価のテキストに置換する
            * @param text 書式文字列
            * @param args 置換の文字列（配列可）
            */
            function format(format) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                var replaceFunction = undefined;
                if (typeof args === 'object') {
                    replaceFunction = function (m, k) { return args[k]; };
                }
                else {
                    var workArgs = arguments;
                    replaceFunction = function (m, k) { return workArgs[Number(k) + 1]; };
                }
                return format.replace(/\{(\w+)\}/g, replaceFunction);
            }
            text_3.format = format;
            /**
            * 変換文字列の先頭に、文字数分の指定文字列を追加する
            * @param text 変換対象の文字列
            * @param paddingChar 指定文字列
            * @param length 文字数
            */
            function padLeft(text, paddingChar, length) {
                return charPadding(text, paddingChar, true, length);
            }
            text_3.padLeft = padLeft;
            /**
            * 変換文字列の末尾に、文字数分の指定文字列を追加する
            * @param text 変換対象の文字列
            * @param paddingChar 指定文字列
            * @param length 文字数
            */
            function padRight(text, paddingChar, length) {
                return charPadding(text, paddingChar, false, length);
            }
            text_3.padRight = padRight;
            /**
            * 指定した文字列に、指定した文字列数分、指定文字列を追加する
            * @param text 変換対象の文字列
            * @param paddingChar 埋める文字列
            * @param isPadLeft 左埋めフラグ（false：右埋め）
            * @param length 文字数
            */
            function charPadding(text, paddingChar, isPadLeft, length) {
                var result;
                if (countHalf(paddingChar) !== 1) {
                    throw new Error('paddingChar "' + paddingChar + '" is not single character');
                }
                var lengthOfSource = countHalf(text);
                var shortage = length - lengthOfSource;
                if (shortage <= 0) {
                    return text;
                }
                var pad = new Array(shortage + 1).join(paddingChar);
                if (isPadLeft) {
                    return pad + text;
                }
                else {
                    return text + pad;
                }
            }
            text_3.charPadding = charPadding;
            function replaceAll(originalString, find, replace) {
                return originalString.split(find).join(replace);
            }
            text_3.replaceAll = replaceAll;
            function removeFromStart(originalString, charSet) {
                if (originalString.length === charSet.length) {
                    return (originalString === charSet) ? "" : originalString;
                }
                var i = findLastContinousIndex(originalString, charSet, 0, true);
                return originalString.substr(i, originalString.length - i);
            }
            text_3.removeFromStart = removeFromStart;
            function removeFromEnd(originalString, charSet) {
                if (originalString.length === charSet.length) {
                    return (originalString === charSet) ? "" : originalString;
                }
                var i = findLastContinousIndex(originalString, charSet, originalString.length, false);
                return originalString.substr(0, i);
            }
            text_3.removeFromEnd = removeFromEnd;
            function findLastContinousIndex(originalString, charSet, startIndex, fromStart) {
                if (originalString.substring(startIndex, fromStart ? (startIndex + charSet.length) : (startIndex - charSet.length)) !== charSet) {
                    return startIndex;
                }
                else {
                    return findLastContinousIndex(originalString, charSet, fromStart ? (startIndex + charSet.length) : (startIndex - charSet.length), fromStart);
                }
            }
            /**
             * Type of characters
             */
            var CharType = (function () {
                function CharType(viewName, width, validator) {
                    this.viewName = viewName;
                    this.width = width;
                    this.validator = validator;
                }
                CharType.prototype.validate = function (text) {
                    var result = new uk.ui.validation.ValidationResult();
                    var validateResult = this.validator(text);
                    if (validateResult === true || validateResult.probe) {
                        result.isValid = true;
                        result.errorMessage = validateResult.messageId;
                        result.errorCode = validateResult.messageId;
                    }
                    else {
                        result.fail(validateResult.messageId, validateResult.messageId);
                    }
                    return result;
                };
                CharType.prototype.buildConstraintText = function (maxLength) {
                    return this.viewName + this.getViewLength(maxLength) + '文字';
                };
                CharType.prototype.getViewLength = function (length) {
                    return Math.floor(length / (this.width * 2));
                };
                return CharType;
            }());
            text_3.CharType = CharType;
            var charTypes = {
                AnyHalfWidth: new CharType('半角', 0.5, nts.uk.text.allHalf),
                AlphaNumeric: new CharType('半角英数字', 0.5, nts.uk.text.allHalfAlphanumeric),
                Alphabet: new CharType('半角英字', 0.5, nts.uk.text.allHalfAlphabet),
                Numeric: new CharType('半角数字', 0.5, nts.uk.text.allHalfNumeric),
                Any: new CharType('全角', 1, nts.uk.text.anyChar),
                Kana: new CharType('カナ', 1, nts.uk.text.allFullKatakana),
                HalfInt: new CharType('半整数', 0.5, nts.uk.text.halfInt),
                WorkplaceCode: new CharType('半角英数字', 0.5, nts.uk.text.workplaceCode)
            };
            function getCharType(primitiveValueName) {
                var constraint = __viewContext.primitiveValueConstraints[primitiveValueName];
                if (constraint === undefined)
                    return null;
                if (primitiveValueName === "WorkplaceCode" && !constraint.charType) {
                    constraint.charType = "WorkplaceCode";
                }
                else if (constraint.charType === undefined)
                    constraint.charType = "Any";
                var charType = charTypes[constraint.charType];
                if (charType === undefined) {
                    throw new Error('invalid charTypeName: ' + constraint.charType);
                }
                return charType;
            }
            text_3.getCharType = getCharType;
            function getCharTypeByType(charTypeName) {
                var charType = charTypes[charTypeName];
                if (charType === undefined) {
                    throw new Error('invalid charTypeName: ' + charTypeName);
                }
                return charType;
            }
            text_3.getCharTypeByType = getCharTypeByType;
            /**
             * Format for EmployeeCode
             * @return {String}  EmployeeCode
             */
            function formatCode(code, filldirection, fillcharacter, length) {
                if (filldirection === "left")
                    return padLeft(code, fillcharacter, length);
                else
                    return padRight(code, fillcharacter, length);
            }
            text_3.formatCode = formatCode;
            function splitOrPadRight(originalString, length, char) {
                if (originalString === undefined || length > originalString.length) {
                    originalString = text.padRight(originalString ? originalString : "", char ? char : " ", length);
                }
                else {
                    originalString = originalString.substr(0, length);
                }
                return originalString;
            }
            text_3.splitOrPadRight = splitOrPadRight;
            function addSeperation(amount) {
                var leng = amount.indexOf(".") > -1 ? amount.indexOf(".") : amount.length;
                if (leng < 4)
                    return amount;
                var result = amount.substring(leng);
                var num = parseInt(amount.substring(0, leng));
                var times = Math.floor(leng / 3);
                for (var i = 0; i < times; i++) {
                    var block = num % 1000;
                    if (i > 0)
                        result = padLeft("" + block, "0", 3) + "," + result;
                    else
                        result = padLeft("" + block, "0", 3) + result;
                    num = Math.floor(num / 1000);
                }
                result = num % 1000 + "," + result;
                return result;
            }
            function formatCurrency(amount, locale) {
                var result = addSeperation("" + amount);
                if (locale == 'en' || locale == 'EN')
                    return "￥" + result;
                return result + "円";
            }
            text_3.formatCurrency = formatCurrency;
            function reverseDirection(direction) {
                if (direction === "left")
                    return "right";
                else if (direction === "right")
                    return "left";
                else if (direction === "top")
                    return "bottom";
                else if (direction === "bottom")
                    return "top";
            }
            text_3.reverseDirection = reverseDirection;
            function getISOFormat(format) {
                format = uk.util.orDefault(format, "ISO");
                if (format.toLowerCase() === "iso")
                    return "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]";
                if (format.toLowerCase() === "date")
                    return "YYYY/MM/DD";
                if (format.toLowerCase() === "yearmonth")
                    return "YYYY/MM";
                if (format.toLowerCase() === "time")
                    return "HH:mm";
                if (format.toLowerCase() === "datetime")
                    return "YYYY/MM/DD HH:mm";
                format = format.replace(/y/g, "Y");
                return format;
            }
            text_3.getISOFormat = getISOFormat;
            var StringFormatter = (function () {
                function StringFormatter(args) {
                    this.args = args;
                }
                StringFormatter.prototype.format = function (source) {
                    var constraintName = this.args.constraintName;
                    var autofill = this.args.editorOption.autofill;
                    if (!uk.util.isNullOrEmpty(source)) {
                        if (autofill === true || constraintName === "EmployeeCode") {
                            var constraint = this.args.constraint;
                            var filldirection = this.args.editorOption.filldirection;
                            var fillcharacter = this.args.editorOption.fillcharacter;
                            var length = (constraint && constraint.maxLength) ? constraint.maxLength : 10;
                            return formatCode(source, filldirection, fillcharacter, length);
                        }
                    }
                    return source;
                };
                return StringFormatter;
            }());
            text_3.StringFormatter = StringFormatter;
            var NumberFormatter = (function () {
                function NumberFormatter(option) {
                    this.option = option;
                }
                NumberFormatter.prototype.format = function (source) {
                    return nts.uk.util.isNullOrEmpty(source) ? (!nts.uk.util.isNullOrEmpty(this.option.option.defaultValue)
                        ? this.option.option.defaultValue : source)
                        : uk.ntsNumber.formatNumber(source, this.option.option);
                };
                return NumberFormatter;
            }());
            text_3.NumberFormatter = NumberFormatter;
            var TimeFormatter = (function () {
                function TimeFormatter(option) {
                    this.option = option;
                }
                TimeFormatter.prototype.format = function (source) {
                    if (nts.uk.util.isNullOrEmpty(source)) {
                        return "";
                    }
                    var result;
                    if (this.option.inputFormat === "yearmonth") {
                        result = uk.time.parseYearMonth(source);
                    }
                    else if (this.option.inputFormat === "time") {
                        result = uk.time.parseTime(source, true);
                    }
                    else {
                        result = moment(source, "YYYYMMDD");
                        if (result.isValid()) {
                            var format = getISOFormat(this.option.inputFormat);
                            return result.format(format);
                        }
                        return source;
                    }
                    if (result.success)
                        return result.format();
                    return source;
                };
                return TimeFormatter;
            }());
            text_3.TimeFormatter = TimeFormatter;
            var TimeWithDayFormatter = (function () {
                function TimeWithDayFormatter(option) {
                    this.option = option;
                }
                TimeWithDayFormatter.prototype.format = function (source) {
                    if (nts.uk.util.isNullOrEmpty(source) || !isFinite(source)) {
                        return source;
                    }
                    var timeWithDayAttr = uk.time.minutesBased.clock.dayattr.create(source);
                    return this.option.timeWithDay ? timeWithDayAttr.fullText : timeWithDayAttr.shortText;
                };
                return TimeWithDayFormatter;
            }());
            text_3.TimeWithDayFormatter = TimeWithDayFormatter;
            var NumberUnit = (function () {
                function NumberUnit(unitID, unitText, position, language) {
                    this.unitID = unitID;
                    this.unitText = unitText;
                    this.position = position;
                    this.language = language;
                }
                return NumberUnit;
            }());
            text_3.NumberUnit = NumberUnit;
            var units = {
                "JPY": {
                    "ja": new NumberUnit("JPY", "円", "right", "ja"),
                    "en": new NumberUnit("JPY", "\u00A5", "left", "en")
                },
                "PERCENT": {
                    "ja": new NumberUnit("PERCENT", "%", "right", "ja"),
                    "en": new NumberUnit("PERCENT", "%", "right", "en")
                },
                "DAYS": {
                    "ja": new NumberUnit("DAYS", "日", "right", "ja")
                },
                "MONTHS": {
                    "ja": new NumberUnit("MONTHS", "ヶ月", "right", "ja")
                },
                "YEARS": {
                    "ja": new NumberUnit("YEARS", "年", "right", "ja")
                },
                "FIS_MONTH": {
                    "ja": new NumberUnit("FIS_MONTH", "月度", "right", "ja")
                },
                "FIS_YEAR": {
                    "ja": new NumberUnit("FIS_YEAR", "年度", "right", "ja")
                },
                "TIMES": {
                    "ja": new NumberUnit("TIMES", "回", "right", "ja")
                },
                "AGE": {
                    "ja": new NumberUnit("AGE", "歳", "right", "ja")
                }
            };
            function getNumberUnit(unitId) {
                //TODO: get system language. Default: japanese
                return units[unitId][systemLanguage];
            }
            text_3.getNumberUnit = getNumberUnit;
        })(text = uk.text || (uk.text = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ntsNumber;
        (function (ntsNumber) {
            function isInteger(value, option) {
                if (option !== undefined && option.groupseperator !== undefined) {
                    value = isInteger(value) ? value : uk.text.replaceAll(value.toString(), option.groupseperator(), '');
                }
                return !isNaN(value) && parseInt(value) == value && !isNaN(parseInt(value, 10));
            }
            function isDecimal(value, option) {
                if (option !== undefined) {
                    var seperator = typeof option.groupseperator === 'function' ? option.groupseperator() : option.groupseperator;
                    value = isDecimal(value) || seperator === undefined ? value : uk.text.replaceAll(value.toString(), seperator, '');
                }
                return !isNaN(value) && parseFloat(value) == value && !isNaN(parseFloat(value));
            }
            function isNumber(value, isDecimalValue, option, message) {
                if (isDecimalValue) {
                    if (message !== undefined)
                        message.id = 'FND_E_REALNUMBER';
                    return isDecimal(value, option);
                }
                else {
                    if (message !== undefined)
                        message.id = 'FND_E_INTEGER';
                    return isInteger(value, option);
                }
            }
            ntsNumber.isNumber = isNumber;
            function isHalfInt(value, message) {
                var val = parseFloat(value);
                if (message !== undefined)
                    message.id = 'FND_E_HALFINT';
                if (val !== NaN && ((Math.ceil(val) - val) === 0.5) && (val * 2) % 1 === 0)
                    return true;
                return false;
            }
            ntsNumber.isHalfInt = isHalfInt;
            ntsNumber.trunc = (typeof Math.trunc === 'function') ? Math.trunc : function (value) { return value > 0 ? Math.floor(value) : Math.ceil(value); };
            function getDecimal(value, scale) {
                var scaleX = Math.pow(10, scale);
                return ntsNumber.trunc(value * scaleX) / scaleX;
            }
            ntsNumber.getDecimal = getDecimal;
            function formatNumber(value, formatOption) {
                if (value === undefined || value === null || value.toString().trim().lenth <= 0) {
                    return value;
                }
                switch (formatOption.formatId) {
                    case 'Number_Separated':
                        formatOption.grouplength = 3;
                        break;
                }
                var groupSeperator = formatOption.groupseperator ? formatOption.groupseperator : ',';
                var groupLength = formatOption.grouplength ? formatOption.grouplength : 0;
                var decimalSeperator = formatOption.decimalseperator ? formatOption.decimalseperator : ".";
                var decimalLength = formatOption.decimallength ? formatOption.decimallength : 0;
                var formattedValue = "";
                var stringValue = uk.text.replaceAll(value.toString(), groupSeperator, '');
                var isMinus = stringValue.charAt(0) === '-';
                var values = isMinus ? stringValue.split('-')[1].split(decimalSeperator) : stringValue.split(decimalSeperator);
                if (groupLength > 0) {
                    var x = values[0].split('').reverse().join('');
                    for (var i = 0; i < x.length;) {
                        formattedValue += x.substr(i, groupLength) + (x.length > i + groupLength ? groupSeperator : "");
                        i += groupLength;
                    }
                    formattedValue = formattedValue.split('').reverse().join('');
                }
                else {
                    formattedValue = values[0];
                }
                if (values[1] === undefined || decimalLength > values[1].length) {
                    values[1] = uk.text.padRight(values[1] ? values[1] : "", '0', values[1] ? decimalLength : decimalLength + 1);
                }
                else {
                    values[1] = values[1].substr(0, decimalLength);
                }
                values[1] = uk.text.splitOrPadRight(values[1], decimalLength, '0');
                return (isMinus ? '-' : '') + formattedValue + (decimalLength <= 0 ? '' : decimalSeperator + values[1]);
            }
            ntsNumber.formatNumber = formatNumber;
        })(ntsNumber = uk.ntsNumber || (uk.ntsNumber = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="reference.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time_1) {
            var MINUTES_IN_DAY = 24 * 60;
            var defaultInputFormat = [
                "YYYY/M/D",
                "YYYY-M-D",
                "YYYYMMDD",
                "YYYY/M",
                "YYYY-M",
                "YYYYMM",
                "H:mm",
                "Hmm",
                "YYYY"];
            var dotW = ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"];
            function getYearMonthJapan(year, month) {
                if (month)
                    return year + "年 " + month + " 月";
                return year;
            }
            var JapanYearMonth = (function () {
                function JapanYearMonth(empire, year, month) {
                    this.empire = empire;
                    this.year = year;
                    this.month = month;
                }
                JapanYearMonth.prototype.getEmpire = function () {
                    return this.empire;
                };
                JapanYearMonth.prototype.getYear = function () {
                    return this.year;
                };
                JapanYearMonth.prototype.getMonth = function () {
                    return this.month;
                };
                JapanYearMonth.prototype.toString = function () {
                    return (this.empire === undefined ? "" : this.empire + " ")
                        + (this.year === undefined ? "" : this.year + " 年 ")
                        + (this.month === undefined ? "" : this.month + " 月");
                };
                return JapanYearMonth;
            }());
            time_1.JapanYearMonth = JapanYearMonth;
            function yearInJapanEmpire(date) {
                var year = moment.utc(date, defaultInputFormat, true).year();
                if (year == 1868) {
                    return new JapanYearMonth("明治元年");
                }
                if (year <= 1912) {
                    var diff = year - 1867;
                    return new JapanYearMonth("明治 ", diff);
                }
                if (year <= 1926) {
                    var diff = year - 1911;
                    return new JapanYearMonth("大正 ", diff);
                }
                if (year < 1989) {
                    var diff = year - 1925;
                    return new JapanYearMonth("昭和 ", diff);
                }
                if (year == 1989) {
                    return new JapanYearMonth("平成元年 ", diff);
                }
                var diff = year - 1988;
                return new JapanYearMonth("平成 ", diff);
            }
            time_1.yearInJapanEmpire = yearInJapanEmpire;
            function yearmonthInJapanEmpire(yearmonth) {
                if (!(yearmonth instanceof String)) {
                    yearmonth = "" + yearmonth;
                }
                var nguyennien = "元年";
                yearmonth = yearmonth.replace("/", "");
                var year = parseInt(yearmonth.substring(0, 4));
                var month = parseInt(yearmonth.substring(4));
                if (year == 1868) {
                    return new JapanYearMonth("明治元年 ", undefined, month);
                }
                if (year < 1912) {
                    var diff = year - 1867;
                    return new JapanYearMonth("明治 ", diff, month);
                }
                if (year == 1912) {
                    if (month < 8)
                        return new JapanYearMonth("明治 ", 45, month);
                    return new JapanYearMonth("大正元年 ", undefined, month);
                }
                if (year < 1926) {
                    var diff = year - 1911;
                    return new JapanYearMonth("大正 ", diff, month);
                }
                if (year == 1926) {
                    if (month < 12)
                        return new JapanYearMonth("大正", 15, month);
                    return new JapanYearMonth("昭和元年 ", undefined, month);
                }
                if (year < 1989) {
                    var diff = year - 1925;
                    return new JapanYearMonth("昭和 ", diff, month);
                }
                if (year == 1989) {
                    return new JapanYearMonth("平成元年 ", undefined, month);
                }
                var diff = year - 1988;
                return new JapanYearMonth("平成 ", diff, month);
            }
            time_1.yearmonthInJapanEmpire = yearmonthInJapanEmpire;
            var JapanDateMoment = (function () {
                function JapanDateMoment(date, outputFormat) {
                    var MomentResult = parseMoment(date, outputFormat);
                    var year = MomentResult.momentObject.year();
                    var month = MomentResult.momentObject.month() + 1;
                }
                JapanDateMoment.prototype.toString = function () {
                    return (this.empire === undefined ? "" : this.empire + " ")
                        + (this.year === undefined ? "" : this.year + " 年 ")
                        + (this.month === undefined ? "" : this.month + " 月")
                        + (this.day === undefined ? "" : this.day + " ");
                };
                return JapanDateMoment;
            }());
            time_1.JapanDateMoment = JapanDateMoment;
            function dateInJapanEmpire(date) {
                return new JapanDateMoment(date);
            }
            time_1.dateInJapanEmpire = dateInJapanEmpire;
            /**
            * Format by pattern
            * @param  {number} [seconds]	  Input seconds
            * @param  {string} [formatOption] Format option
            * @return {string}				Formatted duration
            */
            function formatSeconds(seconds, formatOption) {
                seconds = parseInt(String(seconds));
                var ss = uk.text.padLeft(String(seconds % 60), '0', 2);
                var minutes = Math.floor(seconds / 60);
                var mm = uk.text.padLeft(String(minutes % 60), '0', 2);
                var hours = uk.ntsNumber.trunc(seconds / 60 / 60);
                var h = String(hours);
                // TODO: use formatOption
                return "h:mm:ss"
                    .replace(/h/g, h)
                    .replace(/mm/g, mm)
                    .replace(/ss/g, ss);
            }
            time_1.formatSeconds = formatSeconds;
            /**
            * Format date
            * @param  {Date}   date	 date
            * @param  {String} [format] format
            * @return {String}		  formatted date
            */
            function formatDate(date, format) {
                if (!format)
                    format = 'yyyy-MM-dd hh:mm:ss.SSS';
                format = format.replace(/yyyy/g, date.getFullYear());
                format = format.replace(/yy/g, ('0' + (date.getFullYear() % 100)).slice(-2));
                format = format.replace(/MM/g, ('0' + (date.getMonth() + 1)).slice(-2));
                format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2));
                if (format.indexOf("DDD") != -1) {
                    var daystr = "(" + dotW[date.getDay()] + ")";
                    format = format.replace("DDD", daystr);
                }
                else if (format.indexOf("D") != -1) {
                    var daystr = "(" + dotW[date.getDay()].substring(0, 1) + ")";
                    format = format.replace("D", daystr);
                }
                format = format.replace(/hh/g, ('0' + date.getHours()).slice(-2));
                format = format.replace(/mm/g, ('0' + date.getMinutes()).slice(-2));
                format = format.replace(/ss/g, ('0' + date.getSeconds()).slice(-2));
                if (format.match(/S/g)) {
                    var milliSeconds = ('00' + date.getMilliseconds()).slice(-3);
                    var length = format.match(/S/g).length;
                    for (var i = 0; i < length; i++)
                        format = format.replace(/S/, milliSeconds.substring(i, i + 1));
                }
                return format;
            }
            time_1.formatDate = formatDate;
            /**
            * Format YearMonth
            * @param  {Number} [yearMonth]	Input Yearmonth
            * @return {String}				Formatted YearMonth
            */
            function formatYearMonth(yearMonth) {
                var result;
                var num = parseInt(String(yearMonth));
                var year = String(Math.floor(num / 100));
                var month = uk.text.charPadding(String(num % 100), '0', true, 2);
                result = year + '/' + month;
                return result;
            }
            time_1.formatYearMonth = formatYearMonth;
            /**
            * Format by pattern
            * @param  {Date}   [date]		 Input date
            * @param  {String} [inputFormat]  Input format
            * @param  {String} [outputFormat] Output format
            * @return {String}				Formatted date
            */
            function formatPattern(date, inputFormat, outputFormat) {
                outputFormat = uk.text.getISOFormat(outputFormat);
                var inputFormats = (inputFormat) ? inputFormat : defaultInputFormat;
                return moment.utc(date, inputFormats).format(outputFormat);
            }
            time_1.formatPattern = formatPattern;
            var ParseResult = (function () {
                function ParseResult(success) {
                    this.success = success;
                }
                return ParseResult;
            }());
            time_1.ParseResult = ParseResult;
            var ResultParseTime = (function (_super) {
                __extends(ResultParseTime, _super);
                function ResultParseTime(success, minus, hours, minutes, msg) {
                    _super.call(this, success);
                    this.minus = minus;
                    this.hours = hours;
                    this.minutes = minutes;
                    this.msg = msg || "FND_E_TIME";
                }
                ResultParseTime.succeeded = function (minus, hours, minutes) {
                    return new ResultParseTime(true, minus, hours, minutes);
                };
                ResultParseTime.failed = function () {
                    return new ResultParseTime(false);
                };
                ResultParseTime.prototype.format = function () {
                    if (!this.success)
                        return "";
                    return (this.minus ? '-' : '') + this.hours + ':' + uk.text.padLeft(String(this.minutes), '0', 2);
                };
                ResultParseTime.prototype.toValue = function () {
                    if (!this.success)
                        return 0;
                    return (this.minus ? -1 : 1) * (this.hours * 60 + this.minutes);
                };
                ResultParseTime.prototype.getMsg = function () { return this.msg; };
                return ResultParseTime;
            }(ParseResult));
            time_1.ResultParseTime = ResultParseTime;
            function parseTime(time, isMinutes) {
                if (time === undefined || time === null) {
                    return ResultParseTime.failed();
                }
                if (isMinutes) {
                    var hoursX = uk.ntsNumber.trunc(time / 60);
                    time = (time < 0 && hoursX == 0 ? "-" : "") + hoursX + uk.text.padLeft((Math.abs(time - hoursX * 60)).toString(), '0', 2);
                }
                if (!(time instanceof String)) {
                    time = time.toString();
                }
                if (time.length < 1 || time.split(':').length > 2 || time.split('-').length > 2
                    || time.lastIndexOf('-') > 0 || (time.length == 1 && !uk.ntsNumber.isNumber(time.charAt(0)))) {
                    return ResultParseTime.failed();
                }
                var minusNumber = time.charAt(0) === '-';
                if (minusNumber) {
                    time = time.split('-')[1];
                }
                var minutes;
                var hours;
                if (time.indexOf(':') > -1) {
                    var times = time.split(':');
                    minutes = times[1];
                    hours = times[0];
                }
                else {
                    time = uk.ntsNumber.trunc(time);
                    time = uk.text.padLeft(time, "0", time.length > 4 ? time.length : 4);
                    minutes = time.substr(-2, 2);
                    hours = time.substr(0, time.length - 2);
                }
                if (!uk.ntsNumber.isNumber(minutes, false) || parseInt(minutes) > 59 || !uk.ntsNumber.isNumber(hours, false)) {
                    return ResultParseTime.failed();
                }
                return ResultParseTime.succeeded(minusNumber, parseInt(hours), parseInt(minutes));
            }
            time_1.parseTime = parseTime;
            var ResultParseYearMonth = (function (_super) {
                __extends(ResultParseYearMonth, _super);
                function ResultParseYearMonth(success, msg, year, month) {
                    _super.call(this, success);
                    this.year = year;
                    this.month = month;
                    this.msg = msg || "must yyyymm or yyyy/mm format: year in [1900-9999] and month in [1-12] ";
                }
                ResultParseYearMonth.succeeded = function (year, month) {
                    return new ResultParseYearMonth(true, "", year, month);
                };
                ResultParseYearMonth.failed = function (msg) {
                    return new ResultParseYearMonth(false, msg);
                };
                ResultParseYearMonth.prototype.format = function () {
                    if (!this.success) {
                        return "";
                    }
                    return this.year + '/' + uk.text.padLeft(String(this.month), '0', 2);
                };
                ResultParseYearMonth.prototype.toValue = function () {
                    if (!this.success) {
                        return 0;
                    }
                    return (this.year * 100 + this.month);
                };
                ResultParseYearMonth.prototype.getMsg = function () { return this.msg; };
                return ResultParseYearMonth;
            }(ParseResult));
            time_1.ResultParseYearMonth = ResultParseYearMonth;
            function parseYearMonth(yearMonth) {
                if (yearMonth === undefined || yearMonth === null) {
                    return ResultParseYearMonth.failed("yearmonth can not empty!");
                }
                if (!(yearMonth instanceof String)) {
                    yearMonth = yearMonth.toString();
                }
                var stringLengh = yearMonth.length;
                yearMonth = yearMonth.replace("/", "");
                yearMonth = yearMonth.replace("/", "");
                var checkNum = yearMonth.replace(/[0-9]/g, "");
                if (checkNum.length > 0)
                    return ResultParseYearMonth.failed("yearmonth must contain digits and slashes only!");
                if (yearMonth.length != 6 && yearMonth.length != 5)
                    return ResultParseYearMonth.failed("wrong yearmonth format: must be yyyy/mm or yyyymm");
                var year = parseInt(yearMonth.substring(0, 4));
                var month = parseInt(yearMonth.substring(4));
                if (year < 1900 || year > 9999)
                    return ResultParseYearMonth.failed("wrong year: year must in range 1900-9999");
                if (month < 1 || month > 12)
                    return ResultParseYearMonth.failed("wrong month: month must in range 1-12");
                return ResultParseYearMonth.succeeded(year, month);
            }
            time_1.parseYearMonth = parseYearMonth;
            var ResultParseTimeOfTheDay = (function (_super) {
                __extends(ResultParseTimeOfTheDay, _super);
                function ResultParseTimeOfTheDay(success, msg, hour, minute) {
                    _super.call(this, success);
                    this.hour = hour;
                    this.minute = minute;
                    this.msg = msg || nts.uk.resource.getMessage("FND_E_DATE_YMD");
                }
                ResultParseTimeOfTheDay.succeeded = function (hour, minute) {
                    return new ResultParseTimeOfTheDay(true, "", hour, minute);
                };
                ResultParseTimeOfTheDay.failed = function (msg) {
                    return new ResultParseTimeOfTheDay(false, msg);
                };
                ResultParseTimeOfTheDay.prototype.format = function () {
                    if (!this.success) {
                        return "";
                    }
                    return this.hour + ':' + uk.text.padLeft(String(this.minute), '0', 2);
                };
                ResultParseTimeOfTheDay.prototype.toValue = function () {
                    if (!this.success) {
                        return 0;
                    }
                    return (this.hour * 100 + this.minute);
                };
                ResultParseTimeOfTheDay.prototype.getMsg = function () { return this.msg; };
                return ResultParseTimeOfTheDay;
            }(ParseResult));
            time_1.ResultParseTimeOfTheDay = ResultParseTimeOfTheDay;
            function parseTimeOfTheDay(timeOfDay) {
                if (timeOfDay === undefined || timeOfDay === null) {
                    return ResultParseTimeOfTheDay.failed("time of the day cannot be empty!");
                }
                if (!(timeOfDay instanceof String)) {
                    timeOfDay = timeOfDay.toString();
                }
                timeOfDay = timeOfDay.replace(":", "");
                var checkNum = timeOfDay.replace(/[0-9]/g, "");
                var stringLength = timeOfDay.length;
                if (checkNum.length > 0)
                    return ResultParseTimeOfTheDay.failed(nts.uk.resource.getMessage("FND_E_DATE_YMD"));
                if (stringLength < 3 || stringLength > 4)
                    return ResultParseTimeOfTheDay.failed(nts.uk.resource.getMessage("FND_E_DATE_YMD"));
                var hour = parseInt(timeOfDay.substring(0, stringLength - 2));
                var minute = parseInt(timeOfDay.substring(stringLength - 2));
                //console.log(checkNum.substring(0,stringLength-2));
                if (hour < 0 || hour > 23)
                    return ResultParseTimeOfTheDay.failed(nts.uk.resource.getMessage("FND_E_DATE_YMD"));
                if (minute < 0 || minute > 59)
                    return ResultParseTimeOfTheDay.failed(nts.uk.resource.getMessage("FND_E_DATE_YMD"));
                return ResultParseTimeOfTheDay.succeeded(hour, minute);
            }
            time_1.parseTimeOfTheDay = parseTimeOfTheDay;
            var ResultParseYearMonthDate = (function (_super) {
                __extends(ResultParseYearMonthDate, _super);
                function ResultParseYearMonthDate(success, msg, year, month, date) {
                    _super.call(this, success);
                    this.year = year;
                    this.month = month;
                    this.date = date;
                    this.msg = msg || nts.uk.resource.getMessage("FND_E_DATE_YMD");
                }
                ResultParseYearMonthDate.succeeded = function (year, month, date) {
                    return new ResultParseYearMonthDate(true, "", year, month, date);
                };
                ResultParseYearMonthDate.failed = function (msg) {
                    return new ResultParseYearMonthDate(false, msg);
                };
                ResultParseYearMonthDate.prototype.format = function () {
                    if (!this.success) {
                        return "";
                    }
                    return this.year + '/' + uk.text.padLeft(String(this.month), '0', 2) + uk.text.padLeft(String(this.date), '0', 2);
                };
                ResultParseYearMonthDate.prototype.toValue = function () {
                    if (!this.success) {
                        return 0;
                    }
                    return (this.year * 10000 + this.month * 100 + this.date);
                };
                ResultParseYearMonthDate.prototype.getMsg = function () { return this.msg; };
                return ResultParseYearMonthDate;
            }(ParseResult));
            time_1.ResultParseYearMonthDate = ResultParseYearMonthDate;
            function parseYearMonthDate(yearMonthDate) {
                if (yearMonthDate === undefined || yearMonthDate === null) {
                    return ResultParseYearMonthDate.failed("full date can not empty!");
                }
                if (!(yearMonthDate instanceof String)) {
                    yearMonthDate = yearMonthDate.toString();
                }
                yearMonthDate = yearMonthDate.replace("/", "");
                yearMonthDate = yearMonthDate.replace("/", "");
                var checkNum = yearMonthDate.replace(/[0-9]/g, "");
                if (checkNum.length !== 0)
                    return ResultParseYearMonthDate.failed("full date must contain digits and slashes only");
                if (yearMonthDate.length != 8)
                    return ResultParseYearMonthDate.failed("full date format must be yyyy/mm/dd or yyyymmdd");
                var year = parseInt(yearMonthDate.substring(0, 4));
                if (year < 1900 || year > 9999) {
                    return ResultParseYearMonthDate.failed("invalid: year must in range 1900-9999");
                }
                var month = parseInt(yearMonthDate.substring(4, 6));
                if (month < 1 || month > 12)
                    return ResultParseYearMonthDate.failed("invalid: month must in range 1-12");
                var date = parseInt(yearMonthDate.substring(6));
                var maxDate = 30;
                switch (month) {
                    case 2:
                        if (year % 400 == 0) {
                            maxDate = 29;
                        }
                        else if (year % 4 == 0 && year % 25 != 0) {
                            maxDate = 29;
                        }
                        else {
                            maxDate = 28;
                        }
                        break;
                    case 1:
                    case 3:
                    case 5:
                    case 7:
                    case 8:
                    case 10:
                    case 12:
                        maxDate = 31;
                        break;
                    default:
                        maxDate = 30;
                        break;
                }
                if (date < 1 || date > maxDate)
                    return ResultParseYearMonthDate.failed("invalid: month = " + month + ", so your date must in range 1-" + maxDate);
                return ResultParseYearMonthDate.succeeded(year, month, date);
            }
            time_1.parseYearMonthDate = parseYearMonthDate;
            var MomentResult = (function (_super) {
                __extends(MomentResult, _super);
                function MomentResult(momentObject, outputFormat) {
                    _super.call(this, true);
                    this.min = moment.utc("1900/01/01", "YYYY/MM/DD", true);
                    this.max = moment.utc("9999/12/31", "YYYY/MM/DD", true);
                    this.momentObject = momentObject;
                    this.outputFormat = uk.text.getISOFormat(outputFormat);
                }
                MomentResult.prototype.succeeded = function () {
                    this.success = true;
                };
                MomentResult.prototype.failed = function (msg) {
                    this.msg = (msg) ? msg : "Invalid format";
                    this.success = false;
                };
                MomentResult.prototype.failedWithMessegeId = function (msgID, params) {
                    this.msgID = msgID;
                    this.params = params;
                    this.success = false;
                };
                MomentResult.prototype.format = function () {
                    if (!this.success)
                        return "";
                    return this.momentObject.format(this.outputFormat);
                };
                MomentResult.prototype.toValue = function () {
                    if (!this.success)
                        return null;
                    return this.momentObject;
                };
                MomentResult.prototype.systemMin = function () {
                    return this.min;
                };
                MomentResult.prototype.systemMax = function () {
                    return this.max;
                };
                MomentResult.prototype.toNumber = function (outputFormat) {
                    var dateFormats = ["YYYY/MM/DD", "YYYY-MM-DD", "YYYYMMDD", "date"];
                    var yearMonthFormats = ["YYYY/MM", "YYYY-MM", "YYYYMM", "yearmonth"];
                    if (!this.success)
                        return null;
                    if (dateFormats.indexOf(outputFormat) != -1) {
                        return this.momentObject.year() * 10000 + (this.momentObject.month() + 1) * 100 + this.momentObject.date();
                    }
                    else if (yearMonthFormats.indexOf(outputFormat) != -1) {
                        return this.momentObject.year() * 100 + (this.momentObject.month() + 1);
                    }
                    else if (outputFormat === "time") {
                        return this.momentObject.hours() * 60 + this.momentObject.minutes();
                    }
                    else {
                        return parseInt(this.momentObject.format(outputFormat).replace(/[^\d]/g, ""));
                    }
                };
                MomentResult.prototype.getMsg = function () { return this.msg; };
                MomentResult.prototype.getEmsg = function (name) {
                    if (this.msgID === undefined) {
                        return this.msg;
                    }
                    else {
                        if (name !== undefined) {
                            this.params.unshift(name);
                        }
                        return nts.uk.resource.getMessage(this.msgID, this.params);
                    }
                };
                MomentResult.prototype.getMsgID = function () { return this.msgID === undefined ? "" : this.msgID; };
                return MomentResult;
            }(ParseResult));
            time_1.MomentResult = MomentResult;
            function parseMoment(datetime, outputFormat, inputFormat) {
                var inputFormats = (inputFormat) ? inputFormat : findFormat(outputFormat);
                var momentObject = moment.utc(datetime, inputFormats, true);
                var result = new MomentResult(momentObject, outputFormat);
                if (momentObject.isValid() && (momentObject.isSameOrBefore(result.systemMax()) && momentObject.isSameOrAfter(result.systemMin()))) {
                    result.succeeded();
                }
                else {
                    var parsedFormat = momentObject.creationData().format;
                    var isHasYear = (nts.uk.util.isNullOrEmpty(outputFormat) ? false : outputFormat.indexOf("Y") >= 0) || parsedFormat.indexOf("Y") >= 0;
                    var isHasMonth = (nts.uk.util.isNullOrEmpty(outputFormat) ? false : outputFormat.indexOf("M") >= 0) || parsedFormat.indexOf("M") >= 0;
                    var isHasDay = (nts.uk.util.isNullOrEmpty(outputFormat) ? false : outputFormat.indexOf("D") >= 0) || parsedFormat.indexOf("D") >= 0;
                    if (isHasDay && isHasMonth && isHasYear) {
                        result.failedWithMessegeId("FND_E_DATE_YMD", [result.systemMin().format("YYYY/MM/DD"), result.systemMax().format("YYYY/MM/DD")]);
                    }
                    else if (isHasMonth && isHasYear) {
                        result.failedWithMessegeId("FND_E_DATE_YM", [result.systemMin().format("YYYY/MM"), result.systemMax().format("YYYY/MM")]);
                    }
                    else {
                        result.failedWithMessegeId("FND_E_DATE_Y", [result.systemMin().format("YYYY"), result.systemMax().format("YYYY")]);
                    }
                }
                return result;
            }
            time_1.parseMoment = parseMoment;
            function findFormat(format) {
                if (nts.uk.util.isNullOrEmpty(format)) {
                    return defaultInputFormat;
                }
                if (format === "yearmonth") {
                    format = "YM";
                    format = "YM";
                }
                var uniqueFormat = _.uniq(format.split(""));
                var formats = _.filter(defaultInputFormat, function (dfFormat) {
                    return _.find(uniqueFormat, function (opFormat) {
                        return dfFormat.indexOf(opFormat) >= 0;
                    }) !== undefined;
                });
                return nts.uk.util.isNullOrEmpty(formats) ? defaultInputFormat : formats;
            }
            function UTCDate(year, month, date, hours, minutes, seconds, milliseconds) {
                // Return local time in UTC
                if (uk.util.isNullOrUndefined(year)) {
                    var currentDate = new Date();
                    year = currentDate.getUTCFullYear();
                    month = (uk.util.isNullOrUndefined(month)) ? currentDate.getUTCMonth() : month;
                    date = (uk.util.isNullOrUndefined(date)) ? currentDate.getUTCDate() : date;
                    hours = (uk.util.isNullOrUndefined(hours)) ? currentDate.getUTCHours() : hours;
                    minutes = (uk.util.isNullOrUndefined(minutes)) ? currentDate.getUTCMinutes() : minutes;
                    seconds = (uk.util.isNullOrUndefined(seconds)) ? currentDate.getUTCSeconds() : seconds;
                    milliseconds = (uk.util.isNullOrUndefined(milliseconds)) ? currentDate.getUTCMilliseconds() : milliseconds;
                    return new Date(Date.UTC(year, month, date, hours, minutes, seconds, milliseconds));
                }
                else {
                    month = (uk.util.isNullOrUndefined(month)) ? 0 : month;
                    date = (uk.util.isNullOrUndefined(date)) ? 1 : date;
                    hours = (uk.util.isNullOrUndefined(hours)) ? 0 : hours;
                    minutes = (uk.util.isNullOrUndefined(minutes)) ? 0 : minutes;
                    seconds = (uk.util.isNullOrUndefined(seconds)) ? 1 : seconds;
                    milliseconds = (uk.util.isNullOrUndefined(milliseconds)) ? 0 : milliseconds;
                    return new Date(Date.UTC(year, month, date, hours, minutes, seconds, milliseconds));
                }
            }
            time_1.UTCDate = UTCDate;
            var DateTimeFormatter = (function () {
                function DateTimeFormatter() {
                    this.shortYmdPattern = /^\d{4}\/\d{1,2}\/\d{1,2}$/;
                    this.shortYmdwPattern = /^\d{4}\/\d{1,2}\/\d{1,2}\(\w+\)$/;
                    this.shortYmPattern = /^\d{4}\/\d{1,2}$/;
                    this.shortMdPattern = /^\d{1,2}\/\d{1,2}$/;
                    this.longYmdPattern = /^\d{4}年\d{1,2}月d{1,2}日$/;
                    this.longYmdwPattern = /^\d{4}年\d{1,2}月d{1,2}日\(\w+\)$/;
                    this.longFPattern = /^\d{4}年度$/;
                    this.longJmdPattern = /^\w{2}\d{1,3}年\d{1,2}月d{1,2}日$/;
                    this.longJmPattern = /^\w{2}\d{1,3}年\d{1,2}月$/;
                    this.fullDateTimeShortPattern = /^\d{4}\/\d{1,2}\/\d{1,2} \d+:\d{2}:\d{2}$/;
                    this.timeShortHmsPattern = /^\d+:\d{2}:\d{2}$/;
                    this.timeShortHmPattern = /^\d+:\d{2}$/;
                    this.days = ['日', '月', '火', '水', '木', '金', '土'];
                }
                DateTimeFormatter.prototype.shortYmd = function (date) {
                    var d = this.dateOf(date);
                    if (this.shortYmdPattern.test(d))
                        return this.format(d);
                };
                DateTimeFormatter.prototype.shortYmdw = function (date) {
                    var d = this.dateOf(date);
                    if (this.shortYmdwPattern.test(d))
                        return d;
                    if (this.shortYmdPattern.test(d)) {
                        var dayStr = this.days[new Date(d).getDay()];
                        return this.format(d) + '(' + dayStr + ')';
                    }
                };
                DateTimeFormatter.prototype.shortYm = function (date) {
                    var d = this.format(this.dateOf(date));
                    if (this.shortYmPattern.test(d))
                        return d;
                    if (this.shortYmdPattern.test(d)) {
                        var end = d.lastIndexOf("/");
                        if (end !== -1)
                            return d.substring(0, end);
                    }
                };
                DateTimeFormatter.prototype.shortMd = function (date) {
                    var d = this.format(this.dateOf(date));
                    if (this.shortMdPattern.test(d))
                        return d;
                    if (this.shortYmdPattern.test(d)) {
                        var start = d.indexOf("/");
                        if (start !== -1)
                            return d.substring(start + 1);
                    }
                };
                DateTimeFormatter.prototype.longYmd = function (date) {
                    var d = this.dateOf(date);
                    if (this.longYmdPattern.test(d))
                        return d;
                    if (this.shortYmdPattern.test(d)) {
                        var mDate = new Date(d);
                        return this.toLongJpDate(mDate);
                    }
                };
                DateTimeFormatter.prototype.longYmdw = function (date) {
                    var d = this.dateOf(date);
                    if (this.longYmdwPattern.test(d))
                        return d;
                    if (this.shortYmdPattern.test(d)) {
                        var mDate = new Date(d);
                        return this.toLongJpDate(mDate) + '(' + this.days[mDate.getDay()] + ')';
                    }
                };
                DateTimeFormatter.prototype.toLongJpDate = function (d) {
                    return d.getFullYear() + '年' + (d.getMonth() + 1) + '月' + d.getDate() + '日';
                };
                DateTimeFormatter.prototype.longF = function (date) {
                    var d = this.dateOf(date);
                    if (this.longFPattern.test(d))
                        return d;
                    if (this.shortYmdPattern.test(d)) {
                        var mDate = new Date(d);
                        return this.fiscalYearOf(mDate) + '年度';
                    }
                };
                DateTimeFormatter.prototype.longJmd = function (date) {
                    var d = this.dateOf(date);
                    if (this.longJmdPattern.test(d))
                        return d;
                    return this.fullJapaneseDateOf(d);
                };
                DateTimeFormatter.prototype.longJm = function (date) {
                    var d = this.dateOf(date);
                    if (this.longJmPattern.test(d))
                        return d;
                    var jpDate = this.fullJapaneseDateOf(d);
                    var start = jpDate.indexOf("月");
                    if (start !== -1) {
                        return jpDate.substring(0, start + 1);
                    }
                };
                DateTimeFormatter.prototype.fullJapaneseDateOf = function (date) {
                    if (this.shortYmdPattern.test(date)) {
                        var d = new Date(date);
                        return d.toLocaleDateString("ja-JP-u-ca-japanese", { era: 'short' });
                    }
                    return date;
                };
                DateTimeFormatter.prototype.fiscalYearOf = function (date) {
                    if (date < new Date(date.getFullYear(), 3, 1))
                        return date.getFullYear() - 1;
                    return date.getFullYear();
                };
                DateTimeFormatter.prototype.dateOf = function (dateTime) {
                    if (this.fullDateTimeShortPattern.test(dateTime)) {
                        return dateTime.split(" ")[0];
                    }
                    return dateTime;
                };
                DateTimeFormatter.prototype.timeOf = function (dateTime) {
                    if (this.fullDateTimeShortPattern.test(dateTime)) {
                        return dateTime.split(" ")[1];
                    }
                    return dateTime;
                };
                DateTimeFormatter.prototype.timeShortHm = function (time) {
                    var t = this.timeOf(time);
                    if (this.timeShortHmPattern.test(t))
                        return t;
                    if (this.timeShortHmsPattern.test(t)) {
                        return t.substring(0, t.lastIndexOf(":"));
                    }
                };
                DateTimeFormatter.prototype.timeShortHms = function (time) {
                    var t = this.timeOf(time);
                    if (this.timeShortHmsPattern.test(t))
                        return t;
                };
                DateTimeFormatter.prototype.clockShortHm = function (time) {
                    return this.timeShortHm(time);
                };
                DateTimeFormatter.prototype.fullDateTimeShort = function (dateTime) {
                    if (this.fullDateTimeShortPattern.test(dateTime))
                        return dateTime;
                };
                DateTimeFormatter.prototype.format = function (date) {
                    return new Date(date).toLocaleDateString("ja-JP");
                };
                return DateTimeFormatter;
            }());
            time_1.DateTimeFormatter = DateTimeFormatter;
            function getFormatter() {
                switch (systemLanguage) {
                    case 'ja':
                        return new DateTimeFormatter();
                    case 'en':
                        return null;
                }
            }
            time_1.getFormatter = getFormatter;
            function applyFormat(format, dateTime, formatter) {
                if (formatter === undefined)
                    formatter = getFormatter();
                switch (format) {
                    case 'Short_YMD':
                        return formatter.shortYmd(dateTime);
                    case 'Short_YMDW':
                        return formatter.shortYmdw(dateTime);
                    case 'Short_YM':
                        return formatter.shortYm(dateTime);
                    case 'Short_MD':
                        return formatter.shortMd(dateTime);
                    case 'Long_YMD':
                        return formatter.longYmd(dateTime);
                    case 'Long_YMDW':
                        return formatter.longYmdw(dateTime);
                    case 'Long_F':
                        return formatter.longF(dateTime);
                    case 'Long_JMD':
                        return formatter.longJmd(dateTime);
                    case 'Long_JM':
                        return formatter.longJm(dateTime);
                    case 'Time_Short_HM':
                        return formatter.timeShortHm(dateTime);
                    case 'Time_Short_HMS':
                        return formatter.timeShortHms(dateTime);
                    case 'Clock_Short_HM':
                        return formatter.clockShortHm(dateTime);
                    case 'DateTime_Short_YMDHMS':
                        return formatter.fullDateTimeShort(dateTime);
                }
            }
            time_1.applyFormat = applyFormat;
            function isEndOfMonth(value, format) {
                var currentDate = moment(value, format);
                if (currentDate.isValid()) {
                    return currentDate.daysInMonth() === currentDate.date();
                }
                return false;
            }
            time_1.isEndOfMonth = isEndOfMonth;
            function convertJapaneseDateToGlobal(japaneseDate) {
                var inputDate = _.clone(japaneseDate);
                var endEraSymbolIndex = -1;
                var currentEra;
                var eraAcceptFormats = ["YYMMDD", "YY/MM/DD", "YY/M/DD", "YY/MM/D", "YY/M/D", "Y/MM/DD", "Y/M/DD", "Y/MM/D", "Y/M/D"];
                for (var _i = 0, _a = __viewContext.env.japaneseEras; _i < _a.length; _i++) {
                    var i = _a[_i];
                    if (inputDate.indexOf(i.name) >= 0) {
                        endEraSymbolIndex = inputDate.indexOf(i.name) + i.name.length;
                        currentEra = i;
                        break;
                    }
                    else if (inputDate.indexOf(i.symbol) >= 0) {
                        endEraSymbolIndex = inputDate.indexOf(i.symbol) + i.symbol.length;
                        currentEra = i;
                        break;
                    }
                }
                if (endEraSymbolIndex > -1) {
                    var startEraDate = moment(currentEra.start, "YYYY-MM-DD");
                    var inputEraDate = inputDate.substring(endEraSymbolIndex);
                    var tempEra = moment.utc(inputEraDate, eraAcceptFormats, true);
                    if (tempEra.isValid()) {
                        return startEraDate.add(tempEra.format("YY"), "Y")
                            .set({ 'month': tempEra.month(), "date": tempEra.date() })
                            .format("YYYY/MM/DD");
                    }
                }
                return japaneseDate;
            }
            time_1.convertJapaneseDateToGlobal = convertJapaneseDateToGlobal;
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time) {
            var minutesBased;
            (function (minutesBased) {
                minutesBased.MINUTES_IN_DAY = 24 * 60;
                function createBase(timeAsMinutes) {
                    if (!isFinite(timeAsMinutes)) {
                        throw new Error("invalid value: " + timeAsMinutes);
                    }
                    var mat = new Number(timeAsMinutes);
                    uk.util.accessor.defineInto(mat)
                        .get("asMinutes", function () { return timeAsMinutes; })
                        .get("isNegative", function () { return timeAsMinutes < 0; })
                        .get("typeName", function () { return "MinutesBasedTime"; });
                    return mat;
                }
                minutesBased.createBase = createBase;
            })(minutesBased = time.minutesBased || (time.minutesBased = {}));
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time) {
            var minutesBased;
            (function (minutesBased) {
                var duration;
                (function (duration_1) {
                    var ResultParseMiuntesBasedDuration = (function (_super) {
                        __extends(ResultParseMiuntesBasedDuration, _super);
                        function ResultParseMiuntesBasedDuration(success, minus, hours, minutes, msg) {
                            _super.call(this, success);
                            this.minus = minus;
                            this.hours = hours;
                            this.minutes = minutes;
                            this.msg = msg || "FND_E_TIME";
                        }
                        ResultParseMiuntesBasedDuration.prototype.format = function () {
                            if (!this.success)
                                return "";
                            return (this.minus ? '-' : '') + this.hours + ':' + uk.text.padLeft(String(this.minutes), '0', 2);
                        };
                        ResultParseMiuntesBasedDuration.prototype.toValue = function () {
                            if (!this.success)
                                return 0;
                            return (this.minus ? -1 : 1) * (this.hours * 60 + this.minutes);
                        };
                        ResultParseMiuntesBasedDuration.prototype.getMsg = function () {
                            return this.msg;
                        };
                        ResultParseMiuntesBasedDuration.succeeded = function (minus, hours, minutes) {
                            return new ResultParseMiuntesBasedDuration(true, minus, hours, minutes);
                        };
                        ResultParseMiuntesBasedDuration.failed = function () {
                            return new ResultParseMiuntesBasedDuration(false);
                        };
                        return ResultParseMiuntesBasedDuration;
                    }(time.ParseResult));
                    duration_1.ResultParseMiuntesBasedDuration = ResultParseMiuntesBasedDuration;
                    function parseString(source) {
                        var isNegative = source.indexOf('-') === 0;
                        var hourPart;
                        var minutePart;
                        if (source.indexOf(':') !== -1) {
                            var parts = source.split(':');
                            if (parts.length !== 2) {
                                return ResultParseMiuntesBasedDuration.failed();
                            }
                            hourPart = Math.abs(Number(parts[0]));
                            minutePart = Number(parts[1]);
                        }
                        else {
                            var integerized = Number(source);
                            if (isNaN(integerized)) {
                                return ResultParseMiuntesBasedDuration.failed();
                            }
                            var regularized = Math.abs(integerized);
                            hourPart = Math.floor(regularized / 100);
                            minutePart = regularized % 100;
                        }
                        if (!isFinite(hourPart) || !isFinite(minutePart)) {
                            return ResultParseMiuntesBasedDuration.failed();
                        }
                        if (minutePart >= 60) {
                            return ResultParseMiuntesBasedDuration.failed();
                        }
                        return ResultParseMiuntesBasedDuration.succeeded(isNegative, hourPart, minutePart);
                    }
                    duration_1.parseString = parseString;
                    function create(timeAsMinutes) {
                        var duration = minutesBased.createBase(timeAsMinutes);
                        uk.util.accessor.defineInto(duration)
                            .get("typeName", function () { return "DurationMinutesBasedTime"; })
                            .get("asHoursDouble", function () { return timeAsMinutes / 60; })
                            .get("asHoursInt", function () { return uk.ntsNumber.trunc(duration.asHoursDouble); })
                            .get("minutePart", function () { return Math.abs(timeAsMinutes) % 60; })
                            .get("text", function () { return createText(duration); });
                        return duration;
                    }
                    duration_1.create = create;
                    function createText(duration) {
                        return (duration.isNegative ? "-" : "")
                            + duration.asHoursInt + ":" + uk.text.padLeft(duration.minutePart.toString(), "0", 2);
                    }
                })(duration = minutesBased.duration || (minutesBased.duration = {}));
            })(minutesBased = time.minutesBased || (time.minutesBased = {}));
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time) {
            var minutesBased;
            (function (minutesBased) {
                var clock;
                (function (clock_1) {
                    function create() {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i - 0] = arguments[_i];
                        }
                        var timeAsMinutes = parseAsClock(args);
                        var clock = minutesBased.createBase(timeAsMinutes);
                        var positivizedMinutes = function () { return (timeAsMinutes >= 0)
                            ? timeAsMinutes
                            : timeAsMinutes + (1 + Math.floor(-timeAsMinutes / minutesBased.MINUTES_IN_DAY)) * minutesBased.MINUTES_IN_DAY; };
                        var daysOffset = function () { return uk.ntsNumber.trunc(clock.isNegative ? (timeAsMinutes + 1) / minutesBased.MINUTES_IN_DAY - 1
                            : timeAsMinutes / minutesBased.MINUTES_IN_DAY); };
                        uk.util.accessor.defineInto(clock)
                            .get("typeName", function () { return "ClockMinutesBasedTime"; })
                            .get("daysOffset", function () { return daysOffset(); })
                            .get("hourPart", function () { return Math.floor((positivizedMinutes() % minutesBased.MINUTES_IN_DAY) / 60); })
                            .get("minutePart", function () { return positivizedMinutes() % 60; })
                            .get("clockTextInDay", function () { return clock.hourPart + ":" + uk.text.padLeft(clock.minutePart.toString(), "0", 2); });
                        return clock;
                    }
                    clock_1.create = create;
                    function parseAsClock(args) {
                        var result;
                        if (uk.types.matchArguments(args, ["number"])) {
                            result = args[0];
                        }
                        else if (uk.types.matchArguments(args, ["number", "number", "number"])) {
                            var daysOffset = args[0];
                            var hourPart = args[1];
                            var minutePart = args[2];
                            result = daysOffset * minutesBased.MINUTES_IN_DAY + hourPart * 60 + minutePart;
                        }
                        return result;
                    }
                })(clock = minutesBased.clock || (minutesBased.clock = {}));
            })(minutesBased = time.minutesBased || (time.minutesBased = {}));
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var time;
        (function (time) {
            var minutesBased;
            (function (minutesBased) {
                var clock;
                (function (clock) {
                    var dayattr;
                    (function (dayattr) {
                        dayattr.MAX_VALUE = create(4319);
                        dayattr.MIN_VALUE = create(-720);
                        (function (DayAttr) {
                            DayAttr[DayAttr["THE_PREVIOUS_DAY"] = 0] = "THE_PREVIOUS_DAY";
                            DayAttr[DayAttr["THE_PRESENT_DAY"] = 1] = "THE_PRESENT_DAY";
                            DayAttr[DayAttr["THE_NEXT_DAY"] = 2] = "THE_NEXT_DAY";
                            DayAttr[DayAttr["TWO_DAY_LATER"] = 3] = "TWO_DAY_LATER";
                        })(dayattr.DayAttr || (dayattr.DayAttr = {}));
                        var DayAttr = dayattr.DayAttr;
                        function getDayAttrText(dayAttr) {
                            switch (dayAttr) {
                                case DayAttr.THE_PREVIOUS_DAY: return "前日";
                                case DayAttr.THE_PRESENT_DAY: return "当日";
                                case DayAttr.THE_NEXT_DAY: return "翌日";
                                case DayAttr.TWO_DAY_LATER: return "翌々日";
                                default: throw new Error("invalid value: " + dayAttr);
                            }
                        }
                        dayattr.getDayAttrText = getDayAttrText;
                        function getDaysOffset(dayAttr) {
                            switch (dayAttr) {
                                case DayAttr.THE_PREVIOUS_DAY: return -1;
                                case DayAttr.THE_PRESENT_DAY: return 0;
                                case DayAttr.THE_NEXT_DAY: return 1;
                                case DayAttr.TWO_DAY_LATER: return 2;
                                default: throw new Error("invalid value: " + dayAttr);
                            }
                        }
                        dayattr.getDaysOffset = getDaysOffset;
                        var ResultParseTimeWithDayAttr = (function () {
                            function ResultParseTimeWithDayAttr(success, asMinutes) {
                                this.success = success;
                                this.asMinutes = asMinutes;
                            }
                            ResultParseTimeWithDayAttr.succeeded = function (asMinutes) {
                                return new ResultParseTimeWithDayAttr(true, asMinutes);
                            };
                            ResultParseTimeWithDayAttr.failed = function () {
                                return new ResultParseTimeWithDayAttr(false);
                            };
                            return ResultParseTimeWithDayAttr;
                        }());
                        dayattr.ResultParseTimeWithDayAttr = ResultParseTimeWithDayAttr;
                        function parseString(source) {
                            var foundAttr = cutDayAttrTextIfExists(source);
                            if (foundAttr.found) {
                                // full text (ex) 翌日2:30
                                var daysOffset = getDaysOffset(foundAttr.attr);
                                var parsedAsDuration = minutesBased.duration.parseString(foundAttr.clockPartText);
                                if (!parsedAsDuration.success) {
                                    return ResultParseTimeWithDayAttr.failed();
                                }
                                var asMinutes = parsedAsDuration.toValue() + minutesBased.MINUTES_IN_DAY * daysOffset;
                                return ResultParseTimeWithDayAttr.succeeded(asMinutes);
                            }
                            else {
                                var parsedAsDuration = minutesBased.duration.parseString(source);
                                if (!parsedAsDuration.success) {
                                    return ResultParseTimeWithDayAttr.failed();
                                }
                                if (parsedAsDuration.minus) {
                                    var asClock = -(parsedAsDuration.toValue()) - minutesBased.MINUTES_IN_DAY;
                                    if (asClock >= 0) {
                                        return ResultParseTimeWithDayAttr.failed();
                                    }
                                    return ResultParseTimeWithDayAttr.succeeded(asClock);
                                }
                                else {
                                    return ResultParseTimeWithDayAttr.succeeded(parsedAsDuration.toValue());
                                }
                            }
                        }
                        dayattr.parseString = parseString;
                        function create(minutesFromZeroOclock) {
                            var timeWithDayAttr = (clock.create(minutesFromZeroOclock));
                            uk.util.accessor.defineInto(timeWithDayAttr)
                                .get("dayAttr", function () { return getDayAttrFromDaysOffset(timeWithDayAttr.daysOffset); })
                                .get("fullText", function () { return getDayAttrText(timeWithDayAttr.dayAttr) + timeWithDayAttr.clockTextInDay; })
                                .get("shortText", function () { return createShortText(timeWithDayAttr); });
                            return timeWithDayAttr;
                        }
                        dayattr.create = create;
                        function createShortText(timeWithDayAttr) {
                            if (timeWithDayAttr.daysOffset >= 0) {
                                var asDuration = minutesBased.duration.create(timeWithDayAttr.asMinutes);
                                return asDuration.text;
                            }
                            else {
                                return "-" + timeWithDayAttr.clockTextInDay;
                            }
                        }
                        function getDayAttrFromDaysOffset(daysOffset) {
                            switch (daysOffset) {
                                case -1: return DayAttr.THE_PREVIOUS_DAY;
                                case 0: return DayAttr.THE_PRESENT_DAY;
                                case 1: return DayAttr.THE_NEXT_DAY;
                                case 2: return DayAttr.TWO_DAY_LATER;
                                default: throw new Error("invalid value: " + daysOffset);
                            }
                        }
                        var DAY_ATTR_TEXTS = [
                            { value: DayAttr.THE_PREVIOUS_DAY },
                            { value: DayAttr.THE_PRESENT_DAY },
                            { value: DayAttr.THE_NEXT_DAY },
                            { value: DayAttr.TWO_DAY_LATER }
                        ];
                        DAY_ATTR_TEXTS.forEach(function (e) { return e.text = getDayAttrText(e.value); });
                        function cutDayAttrTextIfExists(source) {
                            var foundAttr = _.find(DAY_ATTR_TEXTS, function (e) { return source.indexOf(e.text) === 0; });
                            var result = {
                                found: foundAttr !== undefined
                            };
                            if (result.found) {
                                result.attrText = foundAttr.text;
                                result.attr = foundAttr.value;
                                result.clockPartText = source.slice(foundAttr.text.length);
                            }
                            else {
                                result.clockPartText = source;
                            }
                            return result;
                        }
                    })(dayattr = clock.dayattr || (clock.dayattr = {}));
                })(clock = minutesBased.clock || (minutesBased.clock = {}));
            })(minutesBased = time.minutesBased || (time.minutesBased = {}));
        })(time = uk.time || (uk.time = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var request;
        (function (request) {
            request.STORAGE_KEY_TRANSFER_DATA = "nts.uk.request.STORAGE_KEY_TRANSFER_DATA";
            request.WEB_APP_NAME = {
                comjs: 'nts.uk.com.js.web',
                com: 'nts.uk.com.web',
                pr: 'nts.uk.pr.web',
                at: 'nts.uk.at.web'
            };
            var QueryString = (function () {
                function QueryString() {
                    this.items = {};
                }
                QueryString.parseUrl = function (url) {
                    var instance = new QueryString();
                    var queryString = url.split('?')[1];
                    if (queryString) {
                        var queryEntries = queryString.split('&');
                        for (var i = 0; i < queryEntries.length; i++) {
                            var entryParts = queryEntries[i].split('=');
                            instance.set(entryParts[0], entryParts[1]);
                        }
                    }
                    return instance;
                };
                QueryString.build = function (entriesObj) {
                    var instance = new QueryString();
                    for (var key in entriesObj) {
                        instance.set(key, entriesObj[key]);
                    }
                    return instance;
                };
                QueryString.prototype.get = function (key) {
                    return this.items[key];
                };
                QueryString.prototype.set = function (key, value) {
                    if (key === null || key === undefined || key === '') {
                        return;
                    }
                    this.items[key] = value;
                };
                QueryString.prototype.remove = function (key) {
                    delete this.items[key];
                };
                QueryString.prototype.mergeFrom = function (otherObj) {
                    for (var otherKey in otherObj.items) {
                        this.set(otherKey, otherObj.items[otherKey]);
                    }
                };
                QueryString.prototype.count = function () {
                    var count = 0;
                    for (var key in this.items) {
                        count++;
                    }
                    return count;
                };
                QueryString.prototype.hasItems = function () {
                    return this.count() !== 0;
                };
                QueryString.prototype.serialize = function () {
                    var entryStrings = [];
                    for (var key in this.items) {
                        entryStrings.push(key + '=' + this.items[key]);
                    }
                    return entryStrings.join('&');
                };
                return QueryString;
            }());
            request.QueryString = QueryString;
            /**
             * URL and QueryString
             */
            var Locator = (function () {
                function Locator(url) {
                    this.rawUrl = url;
                    this.queryString = QueryString.parseUrl(url);
                }
                Locator.prototype.serialize = function () {
                    if (this.queryString.hasItems()) {
                        return this.rawUrl + '?' + this.queryString.serialize();
                    }
                    else {
                        return this.rawUrl;
                    }
                };
                Locator.prototype.mergeRelativePath = function (relativePath) {
                    var stack = this.rawUrl.split('/');
                    var parts = relativePath.split('/');
                    var queryStringToAdd = QueryString.parseUrl(relativePath);
                    // 最後のファイル名は除外
                    // (最後がフォルダ名でしかも / で終わっていない場合は考慮しない)
                    stack.pop();
                    // relativePathの先頭が '/' の場合、それを取り除く
                    if (parts[0] === '') {
                        parts.shift();
                    }
                    for (var i = 0; i < parts.length; i++) {
                        if (parts[i] === '.')
                            continue;
                        if (parts[i] === '..')
                            stack.pop();
                        else
                            stack.push(parts[i]);
                    }
                    queryStringToAdd.mergeFrom(this.queryString);
                    var queryStringParts = queryStringToAdd.hasItems()
                        ? '?' + queryStringToAdd.serialize()
                        : '';
                    return new Locator(stack.join('/') + queryStringParts);
                };
                return Locator;
            }());
            request.Locator = Locator;
            function writeDynamicConstraint(codes) {
                var dfd = $.Deferred();
                ajax("constraint/getlist", codes).done(function (data) {
                    if (nts.uk.util.isNullOrUndefined(__viewContext.primitiveValueConstraints)) {
                        __viewContext.primitiveValueConstraints = {};
                    }
                    _.forEach(data, function (item) {
                        __viewContext.primitiveValueConstraints[item.itemCode] = item;
                    });
                    dfd.resolve(data);
                }).fail(function (error) {
                    dfd.reject(error);
                });
                return dfd.promise();
            }
            request.writeDynamicConstraint = writeDynamicConstraint;
            function ajax(webAppId, path, data, options) {
                if (typeof arguments[1] !== 'string') {
                    return ajax.apply(null, _.concat(location.currentAppId, arguments));
                }
                var dfd = $.Deferred();
                options = options || {};
                if (typeof data === 'object') {
                    data = JSON.stringify(data);
                }
                var webserviceLocator = location.siteRoot
                    .mergeRelativePath(request.WEB_APP_NAME[webAppId] + '/')
                    .mergeRelativePath(location.ajaxRootDir)
                    .mergeRelativePath(path);
                $.ajax({
                    type: options.method || 'POST',
                    contentType: options.contentType || 'application/json',
                    url: webserviceLocator.serialize(),
                    dataType: options.dataType || 'json',
                    data: data,
                    headers: {
                        'PG-Path': location.current.serialize()
                    }
                }).done(function (res) {
                    if (nts.uk.util.exception.isErrorToReject(res)) {
                        dfd.reject(res);
                    }
                    else if (res !== undefined && res.commandResult === true) {
                        dfd.resolve(res.value);
                    }
                    else {
                        dfd.resolve(res);
                    }
                }).fail(function () {
                    specials.errorPages.systemError();
                });
                return dfd.promise();
            }
            request.ajax = ajax;
            function syncAjax(webAppId, path, data, options) {
                if (typeof arguments[1] !== 'string') {
                    return syncAjax.apply(null, _.concat(location.currentAppId, arguments));
                }
                var dfd = $.Deferred();
                options = options || {};
                if (typeof data === 'object') {
                    data = JSON.stringify(data);
                }
                var webserviceLocator = location.siteRoot
                    .mergeRelativePath(request.WEB_APP_NAME[webAppId] + '/')
                    .mergeRelativePath(location.ajaxRootDir)
                    .mergeRelativePath(path);
                $.ajax({
                    type: options.method || 'POST',
                    contentType: options.contentType || 'application/json',
                    url: webserviceLocator.serialize(),
                    dataType: options.dataType || 'json',
                    data: data,
                    async: false,
                    headers: {
                        'PG-Path': location.current.serialize()
                    },
                    success: function (res) {
                        if (nts.uk.util.exception.isErrorToReject(res)) {
                            dfd.reject(res);
                        }
                        else if (res !== undefined && res.commandResult === true) {
                            dfd.resolve(res.value);
                        }
                        else {
                            dfd.resolve(res);
                        }
                    },
                    error: function (xhr, status, error) {
                        specials.errorPages.systemError();
                    }
                });
                return dfd.promise();
            }
            request.syncAjax = syncAjax;
            function uploadFile(data, option) {
                return $.ajax({
                    url: "/nts.uk.com.web/webapi/ntscommons/arc/filegate/upload",
                    type: 'POST',
                    data: data,
                    cache: false,
                    contentType: false,
                    processData: false
                });
            }
            request.uploadFile = uploadFile;
            function exportFile(path, data, options) {
                var dfd = $.Deferred();
                ajax(path, data, options)
                    .then(function (res) {
                    return uk.deferred.repeat(function (conf) { return conf
                        .task(function () { return specials.getAsyncTaskInfo(res.taskId); })
                        .while(function (info) { return info.pending || info.running; })
                        .pause(1000); });
                })
                    .done(function (res) {
                    if (res.failed || res.status == "ABORTED") {
                        dfd.reject(res.error);
                    }
                    else {
                        specials.donwloadFile(res.id);
                        dfd.resolve(res);
                    }
                })
                    .fail(function (res) {
                    dfd.reject(res);
                });
                return dfd.promise();
            }
            request.exportFile = exportFile;
            function downloadFileWithTask(taskId, data, options) {
                var dfd = $.Deferred();
                var checkTask = function () {
                    specials.getAsyncTaskInfo(taskId).done(function (res) {
                        if (res.status == "PENDING" || res.status == "RUNNING") {
                            setTimeout(function () {
                                checkTask();
                            }, 1000);
                        }
                        if (res.failed || res.status == "ABORTED") {
                            dfd.reject(res.error);
                        }
                        else {
                            specials.donwloadFile(res.id);
                            dfd.resolve(res);
                        }
                    }).fail(function (res) {
                        dfd.reject(res);
                    });
                };
                checkTask();
                return dfd.promise();
            }
            request.downloadFileWithTask = downloadFileWithTask;
            var asyncTask;
            (function (asyncTask) {
                function getInfo(taskId) {
                    return ajax('/ntscommons/arc/task/async/info/' + taskId);
                }
                asyncTask.getInfo = getInfo;
                function requestToCancel(taskId) {
                    ajax('/ntscommons/arc/task/async/requesttocancel/' + taskId);
                }
                asyncTask.requestToCancel = requestToCancel;
            })(asyncTask = request.asyncTask || (request.asyncTask = {}));
            var file;
            (function (file) {
                function donwload(fileId) {
                    var dfd = $.Deferred();
                    $.fileDownload(pathToGet(fileId), {
                        successCallback: function (url) {
                            dfd.resolve();
                        },
                        failCallback: function (responseHtml, url) {
                            var responseError = $(responseHtml);
                            var error = JSON.parse(responseError.text());
                            dfd.reject(error);
                        }
                    });
                    return dfd.promise();
                }
                file.donwload = donwload;
                function remove(fileId) {
                    return ajax("com", "/shr/infra/file/storage/delete/" + fileId);
                }
                file.remove = remove;
                function isExist(fileId) {
                    return ajax("com", "/shr/infra/file/storage/isexist/" + fileId);
                }
                file.isExist = isExist;
                function pathToGet(fileId) {
                    return resolvePath('/webapi/shr/infra/file/storage/get/' + fileId);
                }
                file.pathToGet = pathToGet;
            })(file = request.file || (request.file = {}));
            var specials;
            (function (specials) {
                function getAsyncTaskInfo(taskId) {
                    return asyncTask.getInfo(taskId);
                }
                specials.getAsyncTaskInfo = getAsyncTaskInfo;
                function donwloadFile(fileId) {
                    return file.donwload(fileId);
                }
                specials.donwloadFile = donwloadFile;
                function deleteFile(fileId) {
                    return file.remove(fileId);
                }
                specials.deleteFile = deleteFile;
                function isFileExist(fileId) {
                    return file.isExist(fileId);
                }
                specials.isFileExist = isFileExist;
                var errorPages;
                (function (errorPages) {
                    function systemError() {
                        //jump('com', '/view/common/error/system/index.xhtml');
                    }
                    errorPages.systemError = systemError;
                    function sessionTimeout() {
                        jump('com', '/view/common/error/sessiontimeout/index.xhtml');
                    }
                    errorPages.sessionTimeout = sessionTimeout;
                })(errorPages = specials.errorPages || (specials.errorPages = {}));
            })(specials = request.specials || (request.specials = {}));
            function jump(webAppId, path, data) {
                uk.ui.block.invisible();
                // handle overload
                if (typeof arguments[1] !== 'string') {
                    jump.apply(null, _.concat(nts.uk.request.location.currentAppId, arguments));
                    return;
                }
                if (webAppId != nts.uk.request.location.currentAppId) {
                    jumpToOtherWebApp.apply(this, arguments);
                    return;
                }
                if (data === undefined) {
                    uk.sessionStorage.removeItem(request.STORAGE_KEY_TRANSFER_DATA);
                }
                else {
                    uk.sessionStorage.setItemAsJson(request.STORAGE_KEY_TRANSFER_DATA, data);
                }
                window.location.href = resolvePath(path);
            }
            request.jump = jump;
            function jumpToOtherWebApp(webAppId, path, data) {
                var resolvedPath = nts.uk.request.location.siteRoot
                    .mergeRelativePath(nts.uk.request.WEB_APP_NAME[webAppId] + '/')
                    .mergeRelativePath(path).serialize();
                uk.sessionStorage.setItemAsJson(request.STORAGE_KEY_TRANSFER_DATA, data);
                login.keepSerializedSession()
                    .then(function () {
                    return login.restoreSessionTo(webAppId);
                })
                    .then(function () {
                    window.location.href = resolvedPath;
                });
            }
            var login;
            (function (login) {
                var STORAGE_KEY_USED_LOGIN_PAGE = "nts.uk.request.login.STORAGE_KEY_USED_LOGIN_PAGE";
                var STORAGE_KEY_SERIALIZED_SESSION = "nts.uk.request.login.STORAGE_KEY_SERIALIZED_SESSION";
                function keepUsedLoginPage() {
                    uk.sessionStorage.setItem(STORAGE_KEY_USED_LOGIN_PAGE, location.current.serialize());
                }
                login.keepUsedLoginPage = keepUsedLoginPage;
                function jumpToUsedLoginPage() {
                    uk.sessionStorage.getItem(STORAGE_KEY_USED_LOGIN_PAGE).ifPresent(function (path) {
                        window.location.href = path;
                    }).ifEmpty(function () {
                        request.jump('/view/ccg/007/b/index.xhtml');
                    });
                }
                login.jumpToUsedLoginPage = jumpToUsedLoginPage;
                function keepSerializedSession() {
                    var dfd = $.Deferred();
                    request.ajax("/shr/web/session/serialize").done(function (res) {
                        uk.sessionStorage.setItem(STORAGE_KEY_SERIALIZED_SESSION, res);
                        dfd.resolve();
                    });
                    return dfd.promise();
                }
                login.keepSerializedSession = keepSerializedSession;
                function restoreSessionTo(webAppId) {
                    var serializedTicket = uk.sessionStorage.getItem(STORAGE_KEY_SERIALIZED_SESSION).get();
                    return request.ajax(webAppId, "/shr/web/session/restore", serializedTicket);
                }
                login.restoreSessionTo = restoreSessionTo;
            })(login = request.login || (request.login = {}));
            function resolvePath(path) {
                var destination;
                if (path.charAt(0) === '/') {
                    destination = location.appRoot.mergeRelativePath(path);
                }
                else {
                    destination = location.current.mergeRelativePath(path);
                }
                return destination.rawUrl;
            }
            request.resolvePath = resolvePath;
            function liveView(webAppId, fileId) {
                var liveViewPath = "/webapi/shr/infra/file/storage/liveview/";
                if (typeof arguments[1] !== 'string') {
                    return resolvePath(liveViewPath) + _.concat(location.currentAppId, arguments)[1];
                }
                var webserviceLocator = location.siteRoot
                    .mergeRelativePath(request.WEB_APP_NAME[webAppId] + '/')
                    .mergeRelativePath(liveViewPath);
                var fullPath = webserviceLocator.serialize() + fileId;
                return fullPath;
            }
            request.liveView = liveView;
            var location;
            (function (location) {
                location.current = new Locator(window.location.href);
                location.appRoot = location.current.mergeRelativePath(__viewContext.rootPath);
                location.siteRoot = location.appRoot.mergeRelativePath('../');
                location.ajaxRootDir = 'webapi/';
                var currentAppName = _.takeRight(location.appRoot.serialize().split('/'), 2)[0];
                for (var id in request.WEB_APP_NAME) {
                    if (currentAppName === request.WEB_APP_NAME[id]) {
                        location.currentAppId = id;
                        break;
                    }
                }
            })(location = request.location || (request.location = {}));
            ;
        })(request = uk.request || (uk.request = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            /** Event to notify document ready to initialize UI. */
            ui.documentReady = $.Callbacks();
            /** Event to notify ViewModel built to bind. */
            ui.viewModelBuilt = $.Callbacks();
            // Kiban ViewModel
            var KibanViewModel = (function () {
                function KibanViewModel(dialogOptions) {
                    var _this = this;
                    this.systemName = ko.observable("");
                    this.programName = ko.observable("");
                    this.title = ko.computed(function () {
                        var pgName = _this.programName();
                        if (pgName === "" || pgName === undefined || pgName === null) {
                            return _this.systemName();
                        }
                        return _this.programName() + " - " + _this.systemName();
                    });
                    this.errorDialogViewModel = new nts.uk.ui.errors.ErrorsViewModel(dialogOptions);
                }
                return KibanViewModel;
            }());
            ui.KibanViewModel = KibanViewModel;
            var init;
            (function (init) {
                var _start;
                __viewContext.ready = function (callback) {
                    _start = callback;
                };
                __viewContext.bind = function (contentViewModel, dialogOptions) {
                    var kiban = new KibanViewModel(dialogOptions);
                    ui._viewModel = {
                        content: contentViewModel,
                        kiban: kiban,
                        errors: {
                            isEmpty: ko.computed(function () { return !kiban.errorDialogViewModel.occurs(); })
                        }
                    };
                    kiban.title.subscribe(function (newTitle) {
                        document.title = newTitle;
                    });
                    kiban.systemName(__viewContext.env.systemName);
                    ui.viewModelBuilt.fire(ui._viewModel);
                    ko.applyBindings(ui._viewModel);
                    // off event reset for class reset-not-apply
                    $(".reset-not-apply").find(".reset-element").off("reset");
                    //avoid page content overlap header and function area
                    var content_height = 20;
                    if ($("#header").length != 0) {
                        content_height += $("#header").outerHeight(); //header height+ content area botton padding,top padding
                    }
                    if ($("#functions-area").length != 0) {
                        content_height += $("#functions-area").outerHeight(); //top function area height
                    }
                    if ($("#functions-area-bottom").length != 0) {
                        content_height += $("#functions-area-bottom").outerHeight(); //bottom function area height
                    }
                    $("#contents-area").css("height", "calc(100vh - " + content_height + "px)");
                    //            if($("#functions-area-bottom").length!=0){
                    //            }
                };
                $(function () {
                    ui.documentReady.fire();
                    __viewContext.transferred = uk.sessionStorage.getItem(uk.request.STORAGE_KEY_TRANSFER_DATA)
                        .map(function (v) { return JSON.parse(v); });
                    _.defer(function () { return _start.call(__viewContext); });
                });
            })(init || (init = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var notify;
            (function (notify) {
                var error;
                (function (error) {
                    ui.documentReady.add(function () {
                        var $functionsArea = $('#functions-area');
                        var $functionsAreaBottom = $('#functions-area-bottom');
                        if ($functionsArea.length > 0) {
                            _.defer(function () {
                                $('#func-notifier-errors').position({ my: 'left+5 top-5', at: 'left bottom', of: $('#functions-area') });
                            });
                        }
                        else if ($functionsAreaBottom.length > 0) {
                            // TODO: Defer in case dialog not showing yet. Should fix by using CSS for position, JQuery position is unstable
                            _.defer(function () {
                                $('#func-notifier-errors').position({ my: 'left+5 top+48', at: 'left top', of: $('#functions-area-bottom') });
                            });
                        }
                        else {
                            return;
                        }
                    });
                })(error || (error = {}));
            })(notify = ui.notify || (ui.notify = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var validation;
            (function (validation) {
                var util = nts.uk.util;
                var NoValidator = (function () {
                    function NoValidator() {
                    }
                    NoValidator.prototype.validate = function (inputText, option) {
                        var result = new ValidationResult();
                        result.isValid = true;
                        result.parsedValue = inputText;
                        return result;
                    };
                    return NoValidator;
                }());
                validation.NoValidator = NoValidator;
                var ValidationResult = (function () {
                    function ValidationResult() {
                        this.errorMessage = 'error message';
                    }
                    ValidationResult.prototype.fail = function (errorMessage, errorCode) {
                        this.errorCode = errorCode;
                        this.errorMessage = errorMessage;
                        this.isValid = false;
                    };
                    ValidationResult.prototype.success = function (parsedValue) {
                        this.parsedValue = parsedValue;
                        this.isValid = true;
                    };
                    return ValidationResult;
                }());
                validation.ValidationResult = ValidationResult;
                var DepartmentCodeValidator = (function () {
                    function DepartmentCodeValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        this.charType = uk.text.getCharType(primitiveValueName);
                        this.required = option.required;
                    }
                    DepartmentCodeValidator.prototype.validate = function (inputText, option) {
                        var result = new ValidationResult();
                        // Check Required
                        if (this.required !== undefined && this.required !== false) {
                            if (util.isNullOrEmpty(inputText)) {
                                result.fail(nts.uk.resource.getMessage('FND_E_REQ_INPUT', [this.name]), 'FND_E_REQ_INPUT');
                                return result;
                            }
                        }
                        var validateResult;
                        // Check CharType
                        result = checkCharType(inputText, this.charType);
                        if (!result.isValid)
                            return result;
                        // Check Constraint
                        if (this.constraint !== undefined && this.constraint !== null) {
                            if (this.constraint.maxLength !== undefined && uk.text.countHalf(inputText) > this.constraint.maxLength) {
                                var maxLength = this.constraint.maxLength;
                                result.fail(nts.uk.resource.getMessage(validateResult.errorMessage, [this.name, maxLength]), validateResult.errorCode);
                                return result;
                            }
                            if (!util.isNullOrUndefined(option) && option.isCheckExpression === true) {
                                if (!uk.text.isNullOrEmpty(this.constraint.stringExpression) && !this.constraint.stringExpression.test(inputText)) {
                                    result.fail('This field is not valid with pattern!', '');
                                    return result;
                                }
                            }
                        }
                        result.success(inputText);
                        return result;
                    };
                    return DepartmentCodeValidator;
                }());
                validation.DepartmentCodeValidator = DepartmentCodeValidator;
                function checkCharType(inputText, charType) {
                    var result = new ValidationResult();
                    var validateResult;
                    if (!util.isNullOrUndefined(charType)) {
                        inputText = autoConvertText(inputText, charType);
                        validateResult = charType.validate(inputText);
                        if (!validateResult.isValid) {
                            result.fail(nts.uk.resource.getMessage(validateResult.errorMessage, [this.name, !util.isNullOrUndefined(this.constraint)
                                    ? (!util.isNullOrUndefined(this.constraint.maxLength)
                                        ? this.constraint.maxLength : 9999) : 9999]), validateResult.errorCode);
                            return result;
                        }
                    }
                    result.success(inputText);
                    return result;
                }
                function autoConvertText(inputText, charType) {
                    if (charType.viewName === '半角英数字') {
                        inputText = uk.text.toUpperCase(inputText);
                    }
                    else if (charType.viewName === 'カタカナ') {
                        inputText = uk.text.oneByteKatakanaToTwoByte(inputText);
                    }
                    else if (charType.viewName === 'カナ') {
                        inputText = uk.text.hiraganaToKatakana(uk.text.oneByteKatakanaToTwoByte(inputText));
                    }
                    return inputText;
                }
                var WorkplaceCodeValidator = (function () {
                    function WorkplaceCodeValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        this.charType = uk.text.getCharType(primitiveValueName);
                        this.required = option.required;
                    }
                    WorkplaceCodeValidator.prototype.validate = function (inputText, option) {
                        var result = new ValidationResult();
                        // Check Required
                        if (this.required !== undefined && this.required !== false) {
                            if (util.isNullOrEmpty(inputText)) {
                                result.fail(nts.uk.resource.getMessage('FND_E_REQ_INPUT', [this.name]), 'FND_E_REQ_INPUT');
                                return result;
                            }
                        }
                        else if (util.isNullOrEmpty(inputText)) {
                            result.success(inputText);
                            return result;
                        }
                        // Check CharType
                        result = checkCharType(inputText, this.charType);
                        if (!result.isValid)
                            return result;
                        // Check Constraint
                        if (this.constraint !== undefined && this.constraint !== null) {
                            if (this.constraint.maxLength !== undefined && uk.text.countHalf(inputText) > this.constraint.maxLength) {
                                var maxLength = this.constraint.maxLength;
                                result.fail(nts.uk.resource.getMessage(result.errorMessage, [this.name, maxLength]), result.errorCode);
                                return result;
                            }
                            if (!util.isNullOrUndefined(option) && option.isCheckExpression === true) {
                                if (!uk.text.isNullOrEmpty(this.constraint.stringExpression) && !this.constraint.stringExpression.test(inputText)) {
                                    result.fail('This field is not valid with pattern!', '');
                                    return result;
                                }
                            }
                        }
                        return result;
                    };
                    return WorkplaceCodeValidator;
                }());
                validation.WorkplaceCodeValidator = WorkplaceCodeValidator;
                var PostCodeValidator = (function () {
                    function PostCodeValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        this.charType = uk.text.getCharType(primitiveValueName);
                        this.required = option.required;
                    }
                    PostCodeValidator.prototype.validate = function (inputText, option) {
                        var result = new ValidationResult();
                        // Check Required
                        if (this.required !== undefined && this.required !== false) {
                            if (util.isNullOrEmpty(inputText)) {
                                result.fail(nts.uk.resource.getMessage('FND_E_REQ_INPUT', [this.name]), 'FND_E_REQ_INPUT');
                                return result;
                            }
                        }
                        var validateResult;
                        // Check CharType
                        result = checkCharType(inputText, this.charType);
                        if (!result.isValid)
                            return result;
                        // Check Constraint
                        if (this.constraint !== undefined && this.constraint !== null) {
                            if (this.constraint.maxLength !== undefined && uk.text.countHalf(inputText) > this.constraint.maxLength) {
                                var maxLength = this.constraint.maxLength;
                                result.fail(nts.uk.resource.getMessage(validateResult.errorMessage, [this.name, maxLength]), validateResult.errorCode);
                                return result;
                            }
                            if (!util.isNullOrUndefined(option) && option.isCheckExpression === true) {
                                if (!uk.text.isNullOrEmpty(this.constraint.stringExpression) && !this.constraint.stringExpression.test(inputText)) {
                                    result.fail('This field is not valid with pattern!', '');
                                    return result;
                                }
                            }
                        }
                        result.success(inputText);
                        return result;
                    };
                    return PostCodeValidator;
                }());
                validation.PostCodeValidator = PostCodeValidator;
                var PunchCardNoValidator = (function () {
                    function PunchCardNoValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        this.charType = uk.text.getCharType(primitiveValueName);
                        this.required = option.required;
                    }
                    PunchCardNoValidator.prototype.validate = function (inputText, option) {
                        var result = new ValidationResult();
                        // Check Required
                        if (this.required !== undefined && this.required !== false) {
                            if (util.isNullOrEmpty(inputText)) {
                                result.fail(nts.uk.resource.getMessage('FND_E_REQ_INPUT', [this.name]), 'FND_E_REQ_INPUT');
                                return result;
                            }
                        }
                        var validateResult;
                        // Check CharType
                        result = checkCharType(inputText, this.charType);
                        if (!result.isValid)
                            return result;
                        // Check Constraint
                        if (this.constraint !== undefined && this.constraint !== null) {
                            if (this.constraint.maxLength !== undefined && uk.text.countHalf(inputText) > this.constraint.maxLength) {
                                var maxLength = this.constraint.maxLength;
                                result.fail(nts.uk.resource.getMessage(validateResult.errorMessage, [this.name, maxLength]), validateResult.errorCode);
                                return result;
                            }
                            if (!util.isNullOrUndefined(option) && option.isCheckExpression === true) {
                                if (!uk.text.isNullOrEmpty(this.constraint.stringExpression) && !this.constraint.stringExpression.test(inputText)) {
                                    result.fail('This field is not valid with pattern!', '');
                                    return result;
                                }
                            }
                        }
                        result.success(inputText);
                        return result;
                    };
                    return PunchCardNoValidator;
                }());
                validation.PunchCardNoValidator = PunchCardNoValidator;
                var StringValidator = (function () {
                    function StringValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        if (nts.uk.util.isNullOrUndefined(this.constraint)) {
                            this.constraint = {};
                        }
                        this.charType = uk.text.getCharType(primitiveValueName);
                        this.required = (!nts.uk.util.isNullOrUndefined(option.required) && option.required) || this.constraint.required;
                    }
                    StringValidator.prototype.validate = function (inputText, option) {
                        var result = new ValidationResult();
                        // Check Required
                        if (this.required !== undefined && this.required !== false) {
                            if (util.isNullOrEmpty(inputText)) {
                                result.fail(nts.uk.resource.getMessage('FND_E_REQ_INPUT', [this.name]), 'FND_E_REQ_INPUT');
                                return result;
                            }
                        }
                        var validateResult;
                        // Check CharType
                        if (!util.isNullOrUndefined(this.charType)) {
                            if (this.charType.viewName === '半角英数字') {
                                inputText = uk.text.toUpperCase(inputText);
                            }
                            else if (this.charType.viewName === 'カタカナ') {
                                inputText = uk.text.oneByteKatakanaToTwoByte(inputText);
                            }
                            else if (this.charType.viewName === 'カナ') {
                                inputText = uk.text.hiraganaToKatakana(uk.text.oneByteKatakanaToTwoByte(inputText));
                            }
                            validateResult = this.charType.validate(inputText);
                            if (!validateResult.isValid) {
                                result.fail(nts.uk.resource.getMessage(validateResult.errorMessage, [this.name, (!util.isNullOrUndefined(this.constraint.maxLength)
                                        ? this.charType.getViewLength(this.constraint.maxLength) : 9999)]), validateResult.errorCode);
                                return result;
                            }
                        }
                        // Check Constraint
                        if (this.constraint.maxLength !== undefined && uk.text.countHalf(inputText) > this.constraint.maxLength) {
                            var maxLength = this.constraint.maxLength;
                            if (this.constraint.charType == "Any")
                                maxLength = nts.uk.text.getCharTypeByType("Any").getViewLength(maxLength);
                            result.fail(nts.uk.resource.getMessage(validateResult.errorMessage, [this.name, maxLength]), validateResult.errorCode);
                            return result;
                        }
                        if (!util.isNullOrUndefined(option) && option.isCheckExpression === true) {
                            if (!uk.text.isNullOrEmpty(this.constraint.stringExpression) && !this.constraint.stringExpression.test(inputText)) {
                                result.fail('This field is not valid with pattern!', '');
                                return result;
                            }
                        }
                        result.success(inputText);
                        return result;
                    };
                    return StringValidator;
                }());
                validation.StringValidator = StringValidator;
                var NumberValidator = (function () {
                    function NumberValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        if (util.isNullOrUndefined(this.constraint)) {
                            this.constraint = {};
                        }
                        this.option = option;
                    }
                    NumberValidator.prototype.validate = function (inputText) {
                        var result = new ValidationResult();
                        var isDecimalNumber = false;
                        if (this.option !== undefined) {
                            if (nts.uk.util.isNullOrUndefined(inputText) || inputText.trim().length <= 0) {
                                if ((this.option['required'] === true || this.constraint["required"] === true) && nts.uk.util.isNullOrEmpty(this.option['defaultValue'])) {
                                    result.fail(nts.uk.resource.getMessage('FND_E_REQ_INPUT', [this.name]), 'FND_E_REQ_INPUT');
                                    return result;
                                }
                                else {
                                    result.success(this.option['defaultValue']);
                                    return result;
                                }
                            }
                            isDecimalNumber = (this.option.decimallength > 0);
                            inputText = uk.text.replaceAll(inputText.toString(), this.option.groupseperator, '');
                        }
                        inputText = inputText.trim();
                        var message = {};
                        var validateFail = false, max = 99999999, min = 0, mantissaMaxLength;
                        if (this.constraint.valueType === "HalfInt") {
                            if (!uk.ntsNumber.isHalfInt(inputText, message))
                                validateFail = true;
                        }
                        else if (!uk.ntsNumber.isNumber(inputText, isDecimalNumber, undefined, message)) {
                            validateFail = true;
                        }
                        var value = isDecimalNumber ?
                            uk.ntsNumber.getDecimal(inputText, this.option.decimallength) : parseInt(inputText);
                        if (!util.isNullOrUndefined(this.constraint.max)) {
                            max = this.constraint.max;
                            if (value > this.constraint.max)
                                validateFail = true;
                        }
                        if (!util.isNullOrUndefined(this.constraint.min)) {
                            min = this.constraint.min;
                            if (value < this.constraint.min)
                                validateFail = true;
                        }
                        if (!util.isNullOrUndefined(this.constraint.mantissaMaxLength)) {
                            mantissaMaxLength = this.constraint.mantissaMaxLength;
                            var parts = String(value).split(".");
                            if (parts[1] !== undefined && parts[1].length > mantissaMaxLength)
                                validateFail = true;
                        }
                        if (!(/^-?\d*(\.\d+)?$/).test(inputText)) {
                            validateFail = true;
                        }
                        if (validateFail) {
                            result.fail(nts.uk.resource.getMessage(message.id, [this.name, min, max, mantissaMaxLength]), message.id);
                        }
                        else {
                            var formated = value.toString() === "0" ? inputText : uk.text.removeFromStart(inputText, "0");
                            if (formated.indexOf(".") >= 0) {
                                formated = uk.text.removeFromEnd(formated, "0");
                            }
                            if (formated.charAt(0) === ".") {
                                formated = "0" + formated;
                            }
                            if (formated.charAt(formated.length - 1) === ".") {
                                formated = formated.substr(0, formated.length - 1);
                            }
                            result.success(formated);
                        }
                        return result;
                    };
                    return NumberValidator;
                }());
                validation.NumberValidator = NumberValidator;
                var TimeValidator = (function () {
                    function TimeValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        if (nts.uk.util.isNullOrUndefined(this.constraint)) {
                            this.constraint = {};
                        }
                        this.outputFormat = (option && option.outputFormat) ? option.outputFormat : "";
                        this.required = ((option && option.required) ? option.required : false) || this.constraint.required === true;
                        this.valueType = (option && option.valueType) ? option.valueType : "string";
                        this.mode = (option && option.mode) ? option.mode : "";
                        this.acceptJapaneseCalendar = (option && option.acceptJapaneseCalendar) ? option.acceptJapaneseCalendar : true;
                        this.defaultValue = (option && option.defaultValue) ? option.defaultValue : "";
                    }
                    TimeValidator.prototype.validate = function (inputText) {
                        var result = new ValidationResult();
                        // Check required
                        if (util.isNullOrEmpty(inputText) && !util.isNullOrEmpty(this.defaultValue)) {
                            inputText = this.defaultValue;
                        }
                        else if (util.isNullOrEmpty(inputText)) {
                            if (this.required === true) {
                                result.fail(nts.uk.resource.getMessage('FND_E_REQ_INPUT', [this.name]), 'FND_E_REQ_INPUT');
                                return result;
                            }
                            else {
                                result.success(null);
                                return result;
                            }
                        }
                        if (this.acceptJapaneseCalendar) {
                            inputText = uk.time.convertJapaneseDateToGlobal(inputText);
                        }
                        var maxStr, minStr;
                        // Time duration
                        if (this.mode === "time") {
                            var timeParse = uk.time.minutesBased.duration.parseString(inputText);
                            if (timeParse.success) {
                                result.success(timeParse.toValue());
                            }
                            else {
                                var msgId = timeParse.getMsg();
                                var msg = nts.uk.resource.getMessage(msgId, [this.name, this.constraint.min, this.constraint.max]);
                                result.fail(msg, msgId);
                                return result;
                            }
                            if (!util.isNullOrUndefined(this.constraint.max)) {
                                maxStr = this.constraint.max;
                                var max = uk.time.parseTime(this.constraint.max);
                                if (timeParse.success && (max.toValue() < timeParse.toValue())) {
                                    var msg = nts.uk.resource.getMessage("FND_E_TIME", [this.name, this.constraint.min, this.constraint.max]);
                                    result.fail(msg, "FND_E_TIME");
                                    return result;
                                }
                            }
                            if (!util.isNullOrUndefined(this.constraint.min)) {
                                minStr = this.constraint.min;
                                var min = uk.time.parseTime(this.constraint.min);
                                if (timeParse.success && (min.toValue() > timeParse.toValue())) {
                                    var msg = nts.uk.resource.getMessage("FND_E_TIME", [this.name, this.constraint.min, this.constraint.max]);
                                    result.fail(msg, "FND_E_TIME");
                                    return result;
                                }
                            }
                            if (!result.isValid && this.constraint.valueType === "Time") {
                                result.fail(nts.uk.resource.getMessage("FND_E_TIME", [this.name, minStr, maxStr]), "FND_E_TIME");
                            }
                            return result;
                        }
                        var isMinuteTime = this.outputFormat === "time" ? inputText.charAt(0) === "-" : false;
                        if (isMinuteTime) {
                            inputText = inputText.substring(1, inputText.length);
                        }
                        var parseResult = uk.time.parseMoment(inputText, this.outputFormat);
                        // Parse
                        if (parseResult.success) {
                            if (this.valueType === "string")
                                result.success(parseResult.format());
                            else if (this.valueType === "number") {
                                result.success(parseResult.toNumber(this.outputFormat));
                            }
                            else if (this.valueType === "date") {
                                result.success(parseResult.toValue().toDate());
                            }
                            else if (this.valueType === "moment") {
                                result.success(parseResult.toValue());
                            }
                            else {
                                result.success(parseResult.format());
                            }
                        }
                        else {
                            result.fail(parseResult.getEmsg(this.name), parseResult.getMsgID());
                            return result;
                        }
                        // Time clock
                        if (this.outputFormat === "time") {
                            var inputMoment = parseResult.toNumber(this.outputFormat) * (isMinuteTime ? -1 : 1);
                            if (!util.isNullOrUndefined(this.constraint.max)) {
                                maxStr = this.constraint.max;
                                var maxMoment = moment.duration(maxStr);
                                if (parseResult.success && (maxMoment.hours() * 60 + maxMoment.minutes()) < inputMoment) {
                                    result.fail(nts.uk.resource.getMessage("FND_E_CLOCK", [this.name, minStr, maxStr]), "FND_E_CLOCK");
                                    return result;
                                }
                            }
                            if (!util.isNullOrUndefined(this.constraint.min)) {
                                minStr = this.constraint.min;
                                var minMoment = moment.duration(minStr);
                                if (parseResult.success && (minMoment.hours() * 60 + minMoment.minutes()) > inputMoment) {
                                    result.fail(nts.uk.resource.getMessage("FND_E_CLOCK", [this.name, minStr, maxStr]), "FND_E_CLOCK");
                                    return result;
                                }
                            }
                            if (!result.isValid && this.constraint.valueType === "Clock") {
                                result.fail(nts.uk.resource.getMessage("FND_E_CLOCK", [this.name, minStr, maxStr]), "FND_E_CLOCK");
                            }
                        }
                        return result;
                    };
                    return TimeValidator;
                }());
                validation.TimeValidator = TimeValidator;
                var TimeWithDayValidator = (function () {
                    function TimeWithDayValidator(name, primitiveValueName, option) {
                        this.name = name;
                        this.constraint = getConstraint(primitiveValueName);
                        if (nts.uk.util.isNullOrUndefined(this.constraint)) {
                            this.constraint = {};
                        }
                        this.required = (option && option.required) ? option.required : false;
                    }
                    TimeWithDayValidator.prototype.validate = function (inputText) {
                        var result = new ValidationResult();
                        // Check required
                        if (util.isNullOrEmpty(inputText)) {
                            if (this.required === true) {
                                result.fail(nts.uk.resource.getMessage('FND_E_REQ_INPUT', [this.name]), 'FND_E_REQ_INPUT');
                                return result;
                            }
                            else {
                                result.success("");
                                return result;
                            }
                        }
                        var minValue = uk.time.minutesBased.clock.dayattr.MIN_VALUE;
                        var maxValue = uk.time.minutesBased.clock.dayattr.MAX_VALUE;
                        if (!util.isNullOrUndefined(this.constraint.min)) {
                            minValue = uk.time.minutesBased.clock.dayattr.create(uk.time.minutesBased.clock.dayattr.parseString(this.constraint.min).asMinutes);
                        }
                        if (!util.isNullOrUndefined(this.constraint.max)) {
                            maxValue = uk.time.minutesBased.clock.dayattr.create(uk.time.minutesBased.clock.dayattr.parseString(this.constraint.max).asMinutes);
                        }
                        var parsed = uk.time.minutesBased.clock.dayattr.parseString(inputText);
                        if (!parsed.success || parsed.asMinutes < minValue || parsed.asMinutes > maxValue) {
                            result.fail(nts.uk.resource.getMessage("FND_E_CLOCK", [this.name, minValue.fullText, maxValue.fullText]), "FND_E_CLOCK");
                        }
                        else {
                            result.success(parsed.asMinutes);
                        }
                        return result;
                    };
                    return TimeWithDayValidator;
                }());
                validation.TimeWithDayValidator = TimeWithDayValidator;
                function getConstraint(primitiveValueName) {
                    var constraint = __viewContext.primitiveValueConstraints[primitiveValueName];
                    if (constraint === undefined)
                        return null;
                    else
                        return __viewContext.primitiveValueConstraints[primitiveValueName];
                }
                validation.getConstraint = getConstraint;
                function writeConstraint(constraintName, constraint) {
                    __viewContext.primitiveValueConstraints[constraintName] = constraint;
                }
                validation.writeConstraint = writeConstraint;
                function writeConstraints(constraints) {
                    _.forEach(constraints, function (constraint) {
                        __viewContext.primitiveValueConstraints[constraint.itemCode] = constraint;
                    });
                }
                validation.writeConstraints = writeConstraints;
            })(validation = ui.validation || (ui.validation = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var errors;
            (function (errors_1) {
                var ErrorsViewModel = (function () {
                    function ErrorsViewModel(dialogOptions) {
                        var _this = this;
                        this.title = "エラー一覧";
                        this.errors = ko.observableArray([]);
                        this.errors.extend({ rateLimit: 1 });
                        this.gridErrors = ko.observableArray([]);
                        this.displayErrors = !uk.util.isNullOrUndefined(dialogOptions) && dialogOptions.forGrid ? this.gridErrors : this.errors;
                        this.option = ko.observable(ko.mapping.fromJS(new ui.option.ErrorDialogOption(dialogOptions)));
                        this.occurs = ko.computed(function () { return _this.errors().length !== 0 || _this.gridErrors().length !== 0; });
                        this.allResolved = $.Callbacks();
                        this.allCellsResolved = $.Callbacks();
                        this.option().show.extend({ notify: "always" });
                        this.errors.subscribe(function () {
                            if (_this.errors().length === 0) {
                                _this.allResolved.fire();
                            }
                        });
                        this.allResolved.add(function () {
                            _this.hide();
                        });
                        // Grid
                        this.gridErrors.subscribe(function () {
                            if (_this.gridErrors().length === 0) {
                                _this.allCellsResolved.fire();
                            }
                        });
                        this.allCellsResolved.add(function () {
                            _this.hide();
                        });
                    }
                    ErrorsViewModel.prototype.closeButtonClicked = function () {
                        this.option().show(false);
                    };
                    ErrorsViewModel.prototype.open = function () {
                        this.option().show(true);
                    };
                    ErrorsViewModel.prototype.hide = function () {
                        this.option().show(false);
                    };
                    ErrorsViewModel.prototype.addError = function (error) {
                        var duplicate = _.filter(this.errors(), function (e) { return e.$control.is(error.$control)
                            && (typeof error.message === "string" ? e.messageText === error.message : e.messageText === error.messageText); });
                        if (duplicate.length == 0) {
                            if (typeof error.message === "string") {
                                error.messageText = error.message;
                            }
                            else {
                                // Business Exception
                                if (error.message.message) {
                                    error.messageText = error.message.message;
                                    error.errorCode = error.message.messageId != null && error.message.messageId.length > 0 ? error.message.messageId : "";
                                }
                                else {
                                    if (error.$control.length > 0) {
                                        var controlNameId = error.$control.eq(0).attr("data-name");
                                        if (controlNameId) {
                                            error.messageText = nts.uk.resource.getMessage(error.message.messageId, nts.uk.resource.getText(controlNameId), error.message.messageParams);
                                        }
                                        else {
                                            error.messageText = nts.uk.resource.getMessage(error.message.messageId, error.message.messageParams);
                                        }
                                    }
                                    else {
                                        error.messageText = nts.uk.resource.getMessage(error.message.messageId);
                                    }
                                    error.errorCode = error.message.messageId;
                                }
                            }
                            this.errors.push(error);
                        }
                    };
                    ErrorsViewModel.prototype.hasError = function () {
                        return this.errors().length > 0;
                    };
                    ErrorsViewModel.prototype.clearError = function () {
                        $(".error").children().each(function (index, element) {
                            if ($(element).data("hasError"))
                                $(element).data("hasError", false);
                        });
                        $(".error").removeClass('error');
                        this.errors.removeAll();
                    };
                    ErrorsViewModel.prototype.removeErrorByElement = function ($element) {
                        this.errors.remove(function (error) {
                            return error.$control.is($element);
                        });
                    };
                    ErrorsViewModel.prototype.getErrorByElement = function ($element) {
                        return _.find(this.errors(), function (e) {
                            return e.$control.is($element);
                        });
                    };
                    // Grid errors
                    ErrorsViewModel.prototype.addCellError = function (error) {
                        var self = this;
                        var exists = _.filter(this.gridErrors(), function (err) {
                            return self.sameCells(error, err);
                        });
                        if (exists.length > 0)
                            return;
                        this.gridErrors.push(error);
                    };
                    ErrorsViewModel.prototype.removeCellError = function ($grid, rowId, columnKey) {
                        this.gridErrors.remove(function (err) {
                            return err.grid.is($grid) && err.rowId === rowId && err.columnKey === columnKey;
                        });
                    };
                    ErrorsViewModel.prototype.gridHasError = function () {
                        return this.gridErrors().length > 0;
                    };
                    ErrorsViewModel.prototype.sameCells = function (one, other) {
                        if (!one.grid.is(other.grid))
                            return false;
                        if (one.rowId !== other.rowId)
                            return false;
                        if (one.columnKey !== other.columnKey)
                            return false;
                        return true;
                    };
                    ErrorsViewModel.prototype.stashMemento = function () {
                        var memento = new ErrorViewModelMemento();
                        memento.setErrors(ko.unwrap(this.errors));
                        memento.setGridErrors(ko.unwrap(this.gridErrors));
                        memento.option = ko.unwrap(this.option);
                        memento.allResolved = this.allResolved;
                        memento.allCellsResolved = this.allCellsResolved;
                        memento.setErrorElements();
                        this.clearError();
                        return memento;
                    };
                    ErrorsViewModel.prototype.restoreFrom = function (memento) {
                        this.errors(memento.errors);
                        this.gridErrors(memento.gridErrors);
                        this.option(memento.option);
                        this.allResolved = memento.allResolved;
                        this.allCellsResolved = memento.allCellsResolved;
                        memento.restoreErrorElements();
                    };
                    return ErrorsViewModel;
                }());
                errors_1.ErrorsViewModel = ErrorsViewModel;
                var ErrorViewModelMemento = (function () {
                    function ErrorViewModelMemento() {
                    }
                    ErrorViewModelMemento.prototype.setErrors = function (errors) {
                        var _this = this;
                        if (!_.isArray(errors)) {
                            return;
                        }
                        this.errors = [];
                        errors.forEach(function (e) {
                            _this.errors.push(e);
                        });
                    };
                    ErrorViewModelMemento.prototype.setGridErrors = function (gridErrors) {
                        var _this = this;
                        if (!_.isArray(gridErrors)) {
                            return;
                        }
                        this.gridErrors = [];
                        gridErrors.forEach(function (e) {
                            _this.gridErrors.push(e);
                        });
                    };
                    ErrorViewModelMemento.prototype.setErrorElements = function () {
                        this.errorElements = $(".error").removeClass("error");
                    };
                    ErrorViewModelMemento.prototype.restoreErrorElements = function () {
                        this.errorElements.addClass("error");
                    };
                    return ErrorViewModelMemento;
                }());
                errors_1.ErrorViewModelMemento = ErrorViewModelMemento;
                var ErrorHeader = (function () {
                    function ErrorHeader(name, text, width, visible) {
                        this.name = name;
                        this.text = text;
                        this.width = width;
                        this.visible = visible;
                    }
                    return ErrorHeader;
                }());
                errors_1.ErrorHeader = ErrorHeader;
                /**
                 *  Public API
                **/
                function errorsViewModel() {
                    return nts.uk.ui._viewModel.kiban.errorDialogViewModel;
                }
                errors_1.errorsViewModel = errorsViewModel;
                function show() {
                    errorsViewModel().open();
                }
                errors_1.show = show;
                function hide() {
                    errorsViewModel().hide();
                }
                errors_1.hide = hide;
                function add(error) {
                    errorsViewModel().addError(error);
                }
                errors_1.add = add;
                function hasError() {
                    return errorsViewModel().hasError();
                }
                errors_1.hasError = hasError;
                function clearAll() {
                    if (nts.uk.ui._viewModel !== undefined)
                        errorsViewModel().clearError();
                }
                errors_1.clearAll = clearAll;
                function removeByElement($control) {
                    errorsViewModel().removeErrorByElement($control);
                }
                errors_1.removeByElement = removeByElement;
                function getErrorByElement($element) {
                    return errorsViewModel().getErrorByElement($element);
                }
                errors_1.getErrorByElement = getErrorByElement;
                // Grid errors
                function addCell(error) {
                    errorsViewModel().addCellError(error);
                }
                errors_1.addCell = addCell;
                function removeCell($grid, rowId, columnKey) {
                    errorsViewModel().removeCellError($grid, rowId, columnKey);
                }
                errors_1.removeCell = removeCell;
                function gridHasError() {
                    return errorsViewModel().gridHasError();
                }
                errors_1.gridHasError = gridHasError;
            })(errors = ui.errors || (ui.errors = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_1) {
            var toBeResource;
            (function (toBeResource) {
                toBeResource.yes = "はい";
                toBeResource.no = "いいえ";
                toBeResource.cancel = "キャンセル";
                toBeResource.close = "閉じる";
                toBeResource.info = "情報";
                toBeResource.warn = "警告";
                toBeResource.error = "エラー";
                toBeResource.unset = "未設定";
                toBeResource.errorContent = "エラー内容";
                toBeResource.errorCode = "エラーコード";
                toBeResource.errorList = "エラー一覧";
                toBeResource.plzWait = "お待ちください";
            })(toBeResource = ui_1.toBeResource || (ui_1.toBeResource = {}));
            var windows;
            (function (windows) {
                var MAIN_WINDOW_ID = 'MAIN_WINDOW';
                var DEFAULT_DIALOG_OPTIONS = {
                    autoOpen: false,
                    draggable: true,
                    resizable: false,
                    dialogClass: "no-close"
                };
                /**
                 * Main or Sub Window(dialog)
                 */
                var ScreenWindow = (function () {
                    function ScreenWindow(id, isRoot, parent) {
                        this.globalContext = null;
                        this.$dialog = null;
                        this.$iframe = null;
                        this.onClosedHandler = $.noop;
                        this.id = id;
                        this.isRoot = isRoot;
                        this.parent = parent;
                    }
                    ScreenWindow.createMainWindow = function () {
                        return new ScreenWindow(MAIN_WINDOW_ID, true, null);
                    };
                    ScreenWindow.createSubWindow = function (parent) {
                        return new ScreenWindow(uk.util.randomId(), false, parent);
                    };
                    ScreenWindow.prototype.setGlobal = function (globalContext) {
                        this.globalContext = globalContext;
                    };
                    ScreenWindow.prototype.setTitle = function (newTitle) {
                        if (this.isRoot) {
                            this.globalContext.title = newTitle;
                        }
                        else {
                            this.$dialog.dialog('option', { title: newTitle });
                        }
                    };
                    ScreenWindow.prototype.setHeight = function (height) {
                        if (!isNaN(height)) {
                            this.$dialog.dialog('option', {
                                height: height
                            });
                            this.$dialog.resize();
                        }
                    };
                    ScreenWindow.prototype.setWidth = function (width) {
                        if (!isNaN(width)) {
                            this.$dialog.dialog('option', {
                                width: width
                            });
                            this.$dialog.resize();
                        }
                    };
                    ScreenWindow.prototype.setSize = function (height, width) {
                        if (!isNaN(width) && !isNaN(height)) {
                            this.$dialog.dialog('option', {
                                width: width,
                                height: height
                            });
                            this.$dialog.resize();
                        }
                    };
                    ScreenWindow.prototype.setupAsDialog = function (path, options) {
                        var _this = this;
                        options.close = function () {
                            _this.dispose();
                        };
                        this.build$dialog(options);
                        this.$iframe.bind('load', function () {
                            _this.globalContext.nts.uk.ui.windows.selfId = _this.id;
                            var dialogName = _this.globalContext.__viewContext["program"]["programName"];
                            var title = nts.uk.util.isNullOrEmpty(dialogName) ? toBeResource.unset : dialogName;
                            //                        || path !== this.globalContext.__viewContext["program"]["path"] ? "未設定" : dialogName; 
                            _this.$dialog.dialog('option', {
                                width: options.width || _this.globalContext.dialogSize.width,
                                height: options.height || _this.globalContext.dialogSize.height,
                                title: title,
                                resizable: options.resizable,
                                open: function () {
                                    var $dialog = $(this);
                                    $dialog.dialogPositionControl();
                                    //                            if ($(this).parent().height() >= $("#contents-area").height()) {
                                    //                                $(this).dialog("option", "position", {
                                    //                                    my: "center top",
                                    //                                    at: "center top",
                                    //                                    of: $("#contents-area"),
                                    //                                    collision: "none"
                                    //                                })
                                    //                                $(this).parent().css("position", "absolute");
                                    //                            }
                                    var $dialogDocument = $(this).parent();
                                    var $dialogContentDoc = $(this.lastElementChild.contentDocument);
                                    // catch press tab key in close button of dialog.
                                    $dialogDocument.on("keydown", ":tabbable", function (evt) {
                                        var code = evt.which || evt.keyCode;
                                        if (code.toString() === "9") {
                                            var focusableElements = $dialogContentDoc.find(":tabbable");
                                            if ($(evt.target).hasClass("ui-dialog-titlebar-close") && evt.shiftKey === false) {
                                                focusableElements.first().focus();
                                                evt.preventDefault();
                                            }
                                            else if ($(evt.target).hasClass("ui-dialog-titlebar-close") && evt.shiftKey === true) {
                                                focusableElements.last().focus();
                                                evt.preventDefault();
                                            }
                                        }
                                    });
                                    // catch press tab key for component in dialog.
                                    $dialogContentDoc.on("keydown", ":tabbable", function (evt) {
                                        var code = evt.which || evt.keyCode;
                                        if (code.toString() === "9") {
                                            var focusableElements = $dialogContentDoc.find(":tabbable");
                                            if ($(evt.target).is(focusableElements.last()) && evt.shiftKey === false) {
                                                focusableElements.first().focus();
                                                evt.preventDefault();
                                            }
                                            else if ($(evt.target).is(focusableElements.first()) && evt.shiftKey === true) {
                                                focusableElements.last().focus();
                                                evt.preventDefault();
                                            }
                                        }
                                    });
                                },
                                beforeClose: function () {
                                    //return dialogWindow.__viewContext.dialog.beforeClose();
                                }
                            }).dialog('open');
                            //remove focus on tab key press on the close button on jquery dialog
                            $('.ui-dialog-titlebar-close').attr('tabindex', '-1');
                            if (_this.parent !== null)
                                _this.parent.globalContext.nts.uk.ui.block.clear();
                            //                    var widget= this.$dialog.dialog("widget");
                            //                    widget.draggable("option","containment",false);
                        });
                        this.globalContext.location.href = path;
                    };
                    ScreenWindow.prototype.build$dialog = function (options) {
                        this.$dialog = $('<div/>')
                            .css({
                            padding: '0px',
                            overflow: 'hidden'
                        })
                            .appendTo($('body'))
                            .dialog(options);
                        this.$iframe = $('<iframe/>').css({
                            width: '100%',
                            height: '100%'
                        }).appendTo(this.$dialog);
                        this.setGlobal(this.$iframe[0].contentWindow);
                    };
                    ScreenWindow.prototype.onClosed = function (callback) {
                        this.onClosedHandler = function () {
                            callback();
                            windows.container.localShared = {};
                        };
                    };
                    ScreenWindow.prototype.close = function () {
                        if (this.isRoot) {
                            window.close();
                        }
                        else {
                            this.$dialog.dialog('close');
                        }
                    };
                    ScreenWindow.prototype.dispose = function () {
                        var _this = this;
                        _.defer(function () { return _this.onClosedHandler(); });
                        // delay 2 seconds to avoid IE error when any JS is running in destroyed iframe
                        setTimeout(function () {
                            _this.$iframe.remove();
                            _this.$dialog.remove();
                            _this.$dialog = null;
                            _this.$iframe = null;
                            _this.globalContext = null;
                            _this.parent = null;
                            _this.onClosedHandler = null;
                        }, 2000);
                    };
                    return ScreenWindow;
                }());
                windows.ScreenWindow = ScreenWindow;
                /**
                 * All ScreenWindows are managed by this container.
                 * this instance is singleton in one browser-tab.
                 */
                var ScreenWindowContainer = (function () {
                    function ScreenWindowContainer() {
                        this.windows = {};
                        this.windows[windows.selfId] = ScreenWindow.createMainWindow();
                        this.windows[windows.selfId].setGlobal(window);
                        this.shared = {};
                        this.localShared = {};
                    }
                    /**
                     * All dialog object is in MainWindow.
                     */
                    ScreenWindowContainer.prototype.createDialog = function (path, options, parentId) {
                        var parentwindow = this.windows[parentId];
                        var subWindow = ScreenWindow.createSubWindow(parentwindow);
                        this.windows[subWindow.id] = subWindow;
                        options = $.extend({}, DEFAULT_DIALOG_OPTIONS, options);
                        subWindow.setupAsDialog(path, options);
                        return subWindow;
                    };
                    ScreenWindowContainer.prototype.getShared = function (key) {
                        return this.localShared[key] !== undefined ? this.localShared[key] : this.shared[key];
                    };
                    ScreenWindowContainer.prototype.setShared = function (key, data, isRoot, persist) {
                        var transferData;
                        // Null or Undefined
                        if (uk.util.isNullOrUndefined(data)) {
                            transferData = data;
                        }
                        else if (!_.isFunction(data) || ko.isObservable(data)) {
                            transferData = JSON.parse(JSON.stringify(ko.unwrap(data))); // Complete remove reference by object
                        }
                        else {
                            transferData = data;
                        }
                        if (persist || isRoot) {
                            this.shared[key] = data;
                        }
                        else {
                            this.localShared[key] = data;
                        }
                    };
                    ScreenWindowContainer.prototype.close = function (id) {
                        var target = this.windows[id];
                        delete this.windows[id];
                        target.close();
                    };
                    return ScreenWindowContainer;
                }());
                windows.ScreenWindowContainer = ScreenWindowContainer;
                if (uk.util.isInFrame()) {
                    var parent = window.parent;
                    windows.container = (parent.nts.uk.ui.windows.container);
                }
                else {
                    windows.selfId = MAIN_WINDOW_ID;
                    windows.container = new ScreenWindowContainer();
                }
                function getShared(key) {
                    return windows.container.getShared(key);
                }
                windows.getShared = getShared;
                function setShared(key, data, persist) {
                    windows.container.setShared(key, data, windows.getSelf().isRoot, persist);
                }
                windows.setShared = setShared;
                function getSelf() {
                    return windows.container.windows[windows.selfId];
                }
                windows.getSelf = getSelf;
                function close(windowId) {
                    windowId = uk.util.orDefault(windowId, windows.selfId);
                    windows.container.close(windowId);
                }
                windows.close = close;
                var sub;
                (function (sub) {
                    function modal(webAppId, path, options) {
                        if (typeof arguments[1] !== 'string') {
                            return modal.apply(null, _.concat(nts.uk.request.location.currentAppId, arguments));
                        }
                        if (webAppId == nts.uk.request.location.currentAppId) {
                            path = nts.uk.request.resolvePath(path);
                        }
                        else {
                            path = nts.uk.request.location.siteRoot
                                .mergeRelativePath(nts.uk.request.WEB_APP_NAME[webAppId] + '/')
                                .mergeRelativePath(path).serialize();
                        }
                        options = options || {};
                        options.modal = true;
                        return open(path, options);
                    }
                    sub.modal = modal;
                    function modeless(webAppId, path, options) {
                        if (typeof arguments[1] !== 'string') {
                            return modeless.apply(null, _.concat(nts.uk.request.location.currentAppId, arguments));
                        }
                        if (webAppId == nts.uk.request.location.currentAppId) {
                            path = nts.uk.request.resolvePath(path);
                        }
                        else {
                            path = nts.uk.request.location.siteRoot
                                .mergeRelativePath(nts.uk.request.WEB_APP_NAME[webAppId] + '/')
                                .mergeRelativePath(path).serialize();
                        }
                        options = options || {};
                        options.modal = false;
                        return open(path, options);
                    }
                    sub.modeless = modeless;
                    function open(path, options) {
                        nts.uk.ui.block.invisible();
                        return windows.container.createDialog(path, options, windows.selfId);
                    }
                    sub.open = open;
                })(sub = windows.sub || (windows.sub = {}));
            })(windows = ui_1.windows || (ui_1.windows = {}));
            function localize(textId) {
                return textId;
            }
            ui_1.localize = localize;
            /**
             * Dialog Module
             * Using for display info or confirm dialog
             */
            var dialog;
            (function (dialog) {
                function getMaxZIndex() {
                    var overlayElements = parent.$(".ui-widget-overlay");
                    var max = 12000;
                    if (overlayElements.length > 0) {
                        var zIndexs = _.map(overlayElements, function (element) { return parseInt($(element).css("z-index")); });
                        var temp = _.max(zIndexs);
                        max = temp > max ? temp : max;
                    }
                    return max;
                }
                dialog.getMaxZIndex = getMaxZIndex;
                function createNoticeDialog(message, buttons, header) {
                    var $control = $('<div/>').addClass('control').addClass("pre");
                    var text;
                    if (typeof message === "object") {
                        //business exception
                        if (message.message) {
                            text = message.message;
                            if (message.messageId) {
                                $control.append(message.messageId);
                            }
                        }
                        else {
                            text = nts.uk.resource.getMessage(message.messageId, message.messageParams);
                            $control.append(message.messageId);
                        }
                    }
                    else {
                        text = message;
                    }
                    text = text.replace(/\n/g, '<br />');
                    var $this = window.parent.$('<div/>').addClass('notice-dialog')
                        .append($('<div/>').addClass('text').append(text))
                        .append($control)
                        .appendTo('body')
                        .dialog({
                        dialogClass: "no-close-btn",
                        width: 'auto',
                        modal: true,
                        minWidth: 300,
                        maxWidth: 800,
                        maxHeight: 400,
                        closeOnEscape: false,
                        buttons: buttons,
                        open: function () {
                            $(this).closest('.ui-dialog').css('z-index', getMaxZIndex() + 2);
                            $('.ui-widget-overlay').last().css('z-index', getMaxZIndex() + 1);
                            $(this).parent().find('.ui-dialog-buttonset > button:first-child').focus();
                            $(this).parent().find('.ui-dialog-buttonset > button').removeClass('ui-button ui-corner-all ui-widget');
                            //add header icon if it has
                            if (header && header.icon) {
                                var $headerContainer = $("<div'></div>").addClass("ui-dialog-titlebar-container");
                                $headerContainer.append($("<img>").attr("src", header.icon).addClass("ui-dialog-titlebar-icon"));
                                $headerContainer.append($(this).parent().find(".ui-dialog-title"));
                                $(this).parent().children(".ui-dialog-titlebar").prepend($headerContainer);
                            }
                        },
                        close: function (event) {
                            window.parent.$(this).dialog('destroy');
                            window.parent.$(event.target).remove();
                        }
                    });
                    $this.dialogPositionControl();
                    //add header text if it has
                    if (header && header.text) {
                        $this.dialog("option", "title", header.text);
                    }
                    return $this;
                }
                /**
                 * Show information dialog.
                 *
                 * @param {String}
                 *			text information text
                 * @returns handler
                 */
                function info(text) {
                    var then = $.noop;
                    var $dialog = window.parent.$('<div/>').hide();
                    $(function () {
                        $dialog.appendTo('body').dialog({
                            autoOpen: false
                        });
                    });
                    setTimeout(function () {
                        var $this = createNoticeDialog(text, [{
                                text: toBeResource.yes,
                                "class": "large",
                                click: function () {
                                    $this.dialog('close');
                                    then();
                                }
                            }], { icon: "/nts.uk.com.js.web/lib/nittsu/ui/style/images/infor.png", text: toBeResource.info });
                    }, 0);
                    return {
                        then: function (callback) {
                            then = callback;
                        }
                    };
                }
                dialog.info = info;
                ;
                function alertError(message) {
                    var then = $.noop;
                    var $dialog = window.parent.$('<div/>').hide();
                    $(function () {
                        $dialog.appendTo('body').dialog({
                            autoOpen: false
                        });
                    });
                    setTimeout(function () {
                        var $this = createNoticeDialog(message, [{
                                text: toBeResource.yes,
                                "class": "large",
                                click: function () {
                                    $this.dialog('close');
                                    then();
                                }
                            }], { icon: "/nts.uk.com.js.web/lib/nittsu/ui/style/images/error.png", text: toBeResource.error });
                    }, 0);
                    return {
                        then: function (callback) {
                            then = callback;
                        }
                    };
                }
                dialog.alertError = alertError;
                /**
                 * Show alert dialog.
                 *
                 * @param {String}
                 *			text information text
                 * @returns handler
                 */
                function alert(text) {
                    var then = $.noop;
                    var $dialog = parent.$('<div/>').hide();
                    $(function () {
                        $dialog.appendTo('body').dialog({
                            autoOpen: false
                        });
                    });
                    setTimeout(function () {
                        var $this = createNoticeDialog(text, [{
                                text: toBeResource.yes,
                                "class": "large",
                                click: function () {
                                    $this.dialog('close');
                                    then();
                                }
                            }], { text: nts.uk.resource.getText(toBeResource.warn) });
                    }, 0);
                    return {
                        then: function (callback) {
                            then = callback;
                        }
                    };
                }
                dialog.alert = alert;
                ;
                /**
                 * Show confirm dialog.
                 *
                 * @param {String}
                 *			text information text
                 * @returns handler
                 */
                function confirm(text) {
                    var handleYes = $.noop;
                    var handleNo = $.noop;
                    var handleCancel = $.noop;
                    var handleThen = $.noop;
                    var hasNoButton = true;
                    var hasCancelButton = false;
                    var handlers = {
                        ifYes: function (handler) {
                            handleYes = handler;
                            return handlers;
                        },
                        ifCancel: function (handler) {
                            hasNoButton = false;
                            hasCancelButton = true;
                            handleCancel = handler;
                            return handlers;
                        },
                        ifNo: function (handler) {
                            hasNoButton = true;
                            handleNo = handler;
                            return handlers;
                        },
                        then: function (handler) {
                            handleThen = handler;
                            return handlers;
                        }
                    };
                    setTimeout(function () {
                        var buttons = [];
                        // yes button
                        buttons.push({
                            text: toBeResource.yes,
                            "class": "yes large danger",
                            click: function () {
                                $this.dialog('close');
                                handleYes();
                                handleThen();
                            }
                        });
                        // no button
                        if (hasNoButton) {
                            buttons.push({
                                text: toBeResource.no,
                                "class": "no large",
                                click: function () {
                                    $this.dialog('close');
                                    handleNo();
                                    handleThen();
                                }
                            });
                        }
                        // cancel button
                        if (hasCancelButton) {
                            buttons.push({
                                text: toBeResource.cancel,
                                "class": "cancel large",
                                click: function () {
                                    $this.dialog('close');
                                    handleCancel();
                                    handleThen();
                                }
                            });
                        }
                        var $this = createNoticeDialog(text, buttons);
                    });
                    return handlers;
                }
                dialog.confirm = confirm;
                ;
                function addError(errorBody, error, idx) {
                    var row = $("<tr/>");
                    row.append("<td style='display: none;'>" + idx + "/td><td>" + error["message"] + "</td><td>" + error["messageId"] + "</td>");
                    var nameId = error["supplements"]["NameID"];
                    if (!uk.util.isNullOrUndefined(nameId)) {
                        row.click(function (evt, ui) {
                            var element = $("body").find('[NameID="' + nameId + '"]');
                            var tab = element.closest("[role='tabpanel']");
                            while (!uk.util.isNullOrEmpty(tab)) {
                                var tabId = tab.attr("id");
                                tab.siblings(":first").children("li[aria-controls='" + tabId + "']").children("a").click();
                                tab = tab.parent().closest("[role='tabpanel']");
                            }
                            element.focus();
                            var $dialogContainer = errorBody.closest(".bundled-errors-alert").closest("[role='dialog']");
                            var $self = nts.uk.ui.windows.getSelf();
                            var additonalTop = 0;
                            var additonalLeft = 0;
                            if (!$self.isRoot) {
                                var $currentDialog = $self.$dialog.closest("[role='dialog']");
                                var $currentHeadBar = $currentDialog.find(".ui-dialog-titlebar");
                                var currentDialogOffset = $currentDialog.offset();
                                additonalTop = currentDialogOffset.top + $currentHeadBar.height();
                                additonalLeft = currentDialogOffset.left;
                            }
                            var currentControlOffset = element.offset();
                            var top = additonalTop + currentControlOffset.top + element.outerHeight() - window.scrollY;
                            var left = additonalLeft + currentControlOffset.left - window.scrollX;
                            var $errorDialogOffset = $dialogContainer.offset();
                            var maxLeft = $errorDialogOffset.left + $dialogContainer.width();
                            var maxTop = $errorDialogOffset.top + $dialogContainer.height();
                            if ($errorDialogOffset.top < top && top < maxTop) {
                                $dialogContainer.css("top", top + 15);
                            }
                            if (($errorDialogOffset.left < left && left < maxLeft)) {
                                $dialogContainer.css("left", left);
                            }
                        });
                    }
                    row.appendTo(errorBody);
                }
                function getRoot() {
                    var self = nts.uk.ui.windows.getSelf();
                    while (!self.isRoot) {
                        self = self.parent;
                    }
                    return $(self.globalContext.document).find("body");
                }
                function bundledErrors(errors) {
                    var then = $.noop;
                    var id = uk.util.randomId();
                    var container = $("<div id='" + id + "' class='bundled-errors-alert'/>"), functionArea = $("<div id='functions-area-bottom'/>"), errorBoard = $("<div id='error-board'>    <table> <thead> <tr>    <th style='width: auto;'>"
                        + toBeResource.errorContent + "</th><th style='display: none;'/>    <th style='width: 150px;'>"
                        + toBeResource.errorCode + "</th>   </tr>   </thead>    <tbody/>    </table> </div>"), closeButton = $("<button class='ntsButton ntsClose large'/>");
                    var errorBody = errorBoard.find("tbody");
                    if ($.isArray(errors["errors"])) {
                        _.forEach(errors["errors"], function (error, idx) {
                            addError(errorBody, error, idx + 1);
                        });
                    }
                    else {
                        return alertError(errors);
                    }
                    closeButton.appendTo(functionArea);
                    functionArea.appendTo(container);
                    errorBoard.appendTo(container);
                    container.appendTo(getRoot());
                    setTimeout(function () {
                        container.dialog({
                            title: toBeResource.errorList,
                            dialogClass: "no-close-btn",
                            modal: false,
                            resizable: false,
                            width: 450,
                            maxHeight: 500,
                            closeOnEscape: false,
                            open: function () {
                                errorBoard.css({ "overflow": "auto", "max-height": "300px", "margin-bottom": "65px" });
                                functionArea.css({ "left": "0px" });
                                closeButton.text(toBeResource.close).click(function (evt) {
                                    container.dialog("destroy");
                                    container.remove();
                                    then();
                                });
                                container.closest("div[role='dialog']").position({ my: "center", at: "center", of: window.parent });
                            },
                            close: function (event) {
                            }
                        }).dialogPositionControl();
                    }, 0);
                    return {
                        then: function (callback) {
                            then = callback;
                        }
                    };
                }
                dialog.bundledErrors = bundledErrors;
                ;
            })(dialog = ui_1.dialog || (ui_1.dialog = {}));
            ui_1.confirmSave = function (dirtyChecker) {
                var frame = windows.getSelf();
                if (frame.$dialog === undefined || frame.$dialog === null) {
                    confirmSaveWindow(dirtyChecker);
                }
                else {
                    confirmSaveDialog(dirtyChecker, frame.$dialog);
                }
            };
            function confirmSaveWindow(dirtyChecker) {
                var beforeunloadHandler = function (e) {
                    if (dirtyChecker.isDirty()) {
                        return "ban co muon save hok?";
                    }
                };
                confirmSaveEnable(beforeunloadHandler);
            }
            function confirmSaveDialog(dirtyChecker, dialog) {
                //dialog* any;
                var beforeunloadHandler = function (e) {
                    if (dirtyChecker.isDirty()) {
                        e.preventDefault();
                        nts.uk.ui.dialog.confirm("Are you sure you want to leave the page?")
                            .ifYes(function () {
                            dirtyChecker.reset();
                            dialog.dialog("close");
                        }).ifNo(function () {
                        });
                    }
                };
                confirmSaveEnableDialog(beforeunloadHandler, dialog);
            }
            function confirmSaveEnableDialog(beforeunloadHandler, dialog) {
                dialog.on("dialogbeforeclose", beforeunloadHandler);
            }
            ui_1.confirmSaveEnableDialog = confirmSaveEnableDialog;
            ;
            function confirmSaveDisableDialog(dialog) {
                dialog.on("dialogbeforeclose", function () { });
            }
            ui_1.confirmSaveDisableDialog = confirmSaveDisableDialog;
            ;
            function confirmSaveEnable(beforeunloadHandler) {
                $(window).bind('beforeunload', beforeunloadHandler);
            }
            ui_1.confirmSaveEnable = confirmSaveEnable;
            ;
            function confirmSaveDisable() {
                $(window).unbind('beforeunload');
            }
            ui_1.confirmSaveDisable = confirmSaveDisable;
            ;
            /**
             * Block UI Module
             * Using for blocking UI when action in progress
             */
            var block;
            (function (block) {
                function invisible() {
                    var rect = calcRect();
                    $.blockUI({
                        message: null,
                        overlayCSS: { opacity: 0 },
                        css: {
                            width: rect.width,
                            left: rect.left
                        }
                    });
                }
                block.invisible = invisible;
                function grayout() {
                    var rect = calcRect();
                    $.blockUI({
                        message: '<div class="block-ui-message">' + toBeResource.plzWait + '</div>',
                        fadeIn: 200,
                        css: {
                            width: rect.width,
                            left: rect.left
                        }
                    });
                }
                block.grayout = grayout;
                function clear() {
                    $.unblockUI({
                        fadeOut: 200
                    });
                }
                block.clear = clear;
                function calcRect() {
                    var width = 220;
                    var left = ($(window).width() - width) / 2;
                    return {
                        width: width,
                        left: left
                    };
                }
            })(block = ui_1.block || (ui_1.block = {}));
            var DirtyChecker = (function () {
                function DirtyChecker(targetViewModelObservable) {
                    this.targetViewModel = targetViewModelObservable;
                    this.initialState = this.getCurrentState();
                }
                DirtyChecker.prototype.getCurrentState = function () {
                    return ko.toJSON(this.targetViewModel());
                };
                DirtyChecker.prototype.reset = function () {
                    this.initialState = this.getCurrentState();
                };
                DirtyChecker.prototype.isDirty = function () {
                    return this.initialState !== this.getCurrentState();
                };
                return DirtyChecker;
            }());
            ui_1.DirtyChecker = DirtyChecker;
            /**
             * Utilities for IgniteUI
             */
            var ig;
            (function (ig) {
                var grid;
                (function (grid) {
                    function getRowIdFrom($anyElementInRow) {
                        return $anyElementInRow.closest('tr').attr('data-id');
                    }
                    grid.getRowIdFrom = getRowIdFrom;
                    function getRowIndexFrom($anyElementInRow) {
                        return parseInt($anyElementInRow.closest('tr').attr('data-row-idx'), 10);
                    }
                    grid.getRowIndexFrom = getRowIndexFrom;
                    var virtual;
                    (function (virtual) {
                        function getDisplayContainer(gridId) {
                            return $('#' + gridId + '_displayContainer');
                        }
                        virtual.getDisplayContainer = getDisplayContainer;
                        function getVisibleRows(gridId) {
                            return $('#' + gridId + ' > tbody > tr:visible');
                        }
                        virtual.getVisibleRows = getVisibleRows;
                        function getFirstVisibleRow(gridId) {
                            var top = getDisplayContainer(gridId).scrollTop();
                            var visibleRows = getVisibleRows(gridId);
                            for (var i = 0; i < visibleRows.length; i++) {
                                var $row = $(visibleRows[i]);
                                if (visibleRows[i].offsetTop + $row.height() > top) {
                                    return $row;
                                }
                            }
                        }
                        virtual.getFirstVisibleRow = getFirstVisibleRow;
                        function getLastVisibleRow(gridId) {
                            var $displayContainer = getDisplayContainer(gridId);
                            var bottom = $displayContainer.scrollTop() + $displayContainer.height();
                            return getVisibleRows(gridId).filter(function () {
                                return this.offsetTop < bottom;
                            }).last();
                        }
                        virtual.getLastVisibleRow = getLastVisibleRow;
                    })(virtual = grid.virtual || (grid.virtual = {}));
                    var header;
                    (function (header) {
                        function getCell(gridId, columnKey) {
                            var $headers = $('#' + gridId).igGrid("headersTable");
                            return $headers.find('#' + gridId + '_' + columnKey);
                        }
                        header.getCell = getCell;
                        function getLabel(gridId, columnKey) {
                            return getCell(gridId, columnKey).find('span');
                        }
                        header.getLabel = getLabel;
                    })(header = grid.header || (grid.header = {}));
                })(grid = ig.grid || (ig.grid = {}));
                var tree;
                (function (tree) {
                    var grid;
                    (function (grid) {
                        function expandTo(targetKey, $treeGrid) {
                            var option = $treeGrid.igTreeGrid("option");
                            var ancestorKeys = dataSource.collectAncestorKeys(targetKey, option.dataSource, option.primaryKey, option.childDataKey);
                            if (ancestorKeys === null) {
                                return;
                            }
                            var expand = function (currentIndex) {
                                if (currentIndex >= ancestorKeys.length)
                                    return;
                                $treeGrid.igTreeGrid("expandRow", ancestorKeys[currentIndex]);
                                setTimeout(function () { expand(currentIndex + 1); }, 0);
                            };
                            expand(0);
                            setTimeout(function () {
                                scrollTo(targetKey, $treeGrid);
                            }, 1);
                        }
                        grid.expandTo = expandTo;
                        function scrollTo(targetKey, $treeGrid) {
                            var $scroll = $treeGrid.igTreeGrid("scrollContainer");
                            var $targetNode = $treeGrid.find("tr[data-id='" + targetKey + "']").first();
                            if ($targetNode.length === 0)
                                return;
                            $scroll.exposeVertically($targetNode);
                        }
                        grid.scrollTo = scrollTo;
                    })(grid = tree.grid || (tree.grid = {}));
                    var dataSource;
                    (function (dataSource_1) {
                        function collectAncestorKeys(targetKey, dataSource, primaryKey, childDataKey) {
                            if (typeof dataSource === "undefined") {
                                return null;
                            }
                            for (var i = 0, len = dataSource.length; i < len; i++) {
                                var currentData = dataSource[i];
                                if (currentData[primaryKey] === targetKey) {
                                    return [targetKey];
                                }
                                var children = currentData[childDataKey];
                                var results = collectAncestorKeys(targetKey, children, primaryKey, childDataKey);
                                if (results !== null) {
                                    results.unshift(currentData[primaryKey]);
                                    return results;
                                }
                            }
                            return null;
                        }
                        dataSource_1.collectAncestorKeys = collectAncestorKeys;
                    })(dataSource = tree.dataSource || (tree.dataSource = {}));
                })(tree = ig.tree || (ig.tree = {}));
            })(ig = ui_1.ig || (ui_1.ig = {}));
            var smallExtensions;
            (function (smallExtensions) {
                $(function () {
                    $(document).on('mouseenter', '.limited-label', function (e) {
                        var $label = $(e.target);
                        // Check if contents is overflow
                        if ($label.outerWidth() < $label[0].scrollWidth) {
                            var $view_1 = $('<div />').addClass('limited-label-view')
                                .text($label.text())
                                .appendTo('body')
                                .position({
                                my: 'left top',
                                at: 'left bottom',
                                of: $label,
                                collision: 'flip'
                            });
                            $label.bind('mouseleave.limitedlabel', function () {
                                $label.unbind('mouseleave.limitedlabel');
                                $view_1.remove();
                            });
                        }
                    });
                });
            })(smallExtensions || (smallExtensions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var option;
            (function (option_1) {
                var currenryPosition = {
                    "JPY": "left",
                    "USD": "right"
                };
                var EditorOptionBase = (function () {
                    function EditorOptionBase() {
                    }
                    return EditorOptionBase;
                }());
                option_1.EditorOptionBase = EditorOptionBase;
                var TextEditorOption = (function (_super) {
                    __extends(TextEditorOption, _super);
                    function TextEditorOption(option) {
                        _super.call(this);
                        // Default value
                        this.textmode = (option !== undefined && option.textmode !== undefined) ? option.textmode : "text";
                        this.placeholder = (option !== undefined && option.placeholder !== undefined) ? option.placeholder : "";
                        this.width = (option !== undefined && option.width !== undefined) ? option.width : "";
                        this.textalign = (option !== undefined && option.textalign !== undefined) ? option.textalign : "";
                        this.autofill = (option !== undefined && option.autofill !== undefined) ? option.autofill : false;
                        this.filldirection = (option !== undefined && option.filldirection !== undefined) ? option.filldirection : "left";
                        this.fillcharacter = (option !== undefined && option.fillcharacter !== undefined) ? option.fillcharacter : "0";
                    }
                    return TextEditorOption;
                }(EditorOptionBase));
                option_1.TextEditorOption = TextEditorOption;
                var TimeEditorOption = (function (_super) {
                    __extends(TimeEditorOption, _super);
                    function TimeEditorOption(option) {
                        _super.call(this);
                        // Default value
                        this.inputFormat = (option !== undefined && option.inputFormat !== undefined) ? option.inputFormat : "date";
                        this.placeholder = (option !== undefined && option.placeholder !== undefined) ? option.placeholder : "";
                        this.width = (option !== undefined && option.width !== undefined) ? option.width : "";
                        this.defaultValue = (option !== undefined && option.defaultValue !== undefined) ? option.defaultValue : "";
                        this.textalign = (option !== undefined && option.textalign !== undefined) ? option.textalign : "right";
                    }
                    return TimeEditorOption;
                }(EditorOptionBase));
                option_1.TimeEditorOption = TimeEditorOption;
                var NumberEditorOption = (function (_super) {
                    __extends(NumberEditorOption, _super);
                    function NumberEditorOption(option) {
                        _super.call(this);
                        // Default value
                        this.groupseperator = (option !== undefined && option.groupseperator !== undefined) ? option.groupseperator : ",";
                        this.grouplength = (option !== undefined && option.grouplength !== undefined) ? option.grouplength : 0;
                        this.decimalseperator = (option !== undefined && option.decimalseperator !== undefined) ? option.decimalseperator : ".";
                        this.decimallength = (option !== undefined && option.decimallength !== undefined) ? option.decimallength : 0;
                        this.placeholder = (option !== undefined && option.placeholder !== undefined) ? option.placeholder : "";
                        this.width = (option !== undefined && option.width !== undefined) ? option.width : "";
                        this.textalign = (option !== undefined && option.textalign !== undefined) ? option.textalign : "right";
                        this.symbolChar = (option !== undefined && option.symbolChar !== undefined) ? option.symbolChar : "";
                        this.symbolPosition = (option !== undefined && option.symbolPosition !== undefined) ? option.symbolPosition : "right";
                        this.unitID = (option !== undefined && option.unitID !== undefined) ? option.unitID : "";
                        this.defaultValue = (option !== undefined && !nts.uk.util.isNullOrEmpty(option.defaultValue)) ? option.defaultValue : "";
                    }
                    return NumberEditorOption;
                }(EditorOptionBase));
                option_1.NumberEditorOption = NumberEditorOption;
                var CurrencyEditorOption = (function (_super) {
                    __extends(CurrencyEditorOption, _super);
                    function CurrencyEditorOption(option) {
                        _super.call(this);
                        // Default value
                        this.groupseperator = (option !== undefined && option.groupseperator !== undefined) ? option.groupseperator : ",";
                        this.grouplength = (option !== undefined && option.grouplength !== undefined) ? option.grouplength : 0;
                        this.decimalseperator = (option !== undefined && option.decimalseperator !== undefined) ? option.decimalseperator : ".";
                        this.decimallength = (option !== undefined && option.decimallength !== undefined) ? option.decimallength : 0;
                        this.currencyformat = (option !== undefined && option.currencyformat !== undefined) ? option.currencyformat : "JPY";
                        this.currencyposition = (option !== undefined && option.currencyposition !== undefined)
                            ? option.currencyposition : getCurrencyPosition(this.currencyformat);
                        this.placeholder = (option !== undefined && option.placeholder !== undefined) ? option.placeholder : "";
                        this.width = (option !== undefined && option.width !== undefined) ? option.width : "";
                        this.textalign = (option !== undefined && option.textalign !== undefined) ? option.textalign : "right";
                        this.defaultValue = (option !== undefined && !nts.uk.util.isNullOrEmpty(option.defaultValue)) ? option.defaultValue : "";
                        this.unitID = (option !== undefined && option.unitID !== undefined) ? option.unitID : "";
                    }
                    return CurrencyEditorOption;
                }(NumberEditorOption));
                option_1.CurrencyEditorOption = CurrencyEditorOption;
                function getCurrencyPosition(currencyformat) {
                    return currenryPosition[currencyformat] === null ? "right" : currenryPosition[currencyformat];
                }
                var MultilineEditorOption = (function (_super) {
                    __extends(MultilineEditorOption, _super);
                    function MultilineEditorOption(option) {
                        _super.call(this);
                        // Default value
                        this.resizeable = (option !== undefined && option.resizeable !== undefined) ? option.resizeable : false;
                        this.placeholder = (option !== undefined && option.placeholder !== undefined) ? option.placeholder : "";
                        this.width = (option !== undefined && option.width !== undefined) ? option.width : "";
                        this.textalign = (option !== undefined && option.textalign !== undefined) ? option.textalign : "";
                    }
                    return MultilineEditorOption;
                }(EditorOptionBase));
                option_1.MultilineEditorOption = MultilineEditorOption;
                var TimeWithDayAttrEditorOption = (function (_super) {
                    __extends(TimeWithDayAttrEditorOption, _super);
                    function TimeWithDayAttrEditorOption(option) {
                        _super.call(this);
                        // Default value
                        this.timeWithDay = (option !== undefined && option.timeWithDay !== undefined) ? option.timeWithDay : true;
                        this.placeholder = (option !== undefined && option.placeholder !== undefined) ? option.placeholder : "";
                        this.width = (option !== undefined && option.width !== undefined) ? option.width : "";
                        this.textalign = (option !== undefined && option.textalign !== undefined) ? option.textalign : "right";
                    }
                    return TimeWithDayAttrEditorOption;
                }(EditorOptionBase));
                option_1.TimeWithDayAttrEditorOption = TimeWithDayAttrEditorOption;
            })(option = ui.option || (ui.option = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_2) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                // This file left here for log purpose
                $.fn.exposeVertically = function ($target) {
                    var $scroll = $(this);
                    var currentViewTopPosition = $scroll.scrollTop();
                    var currentViewBottomPosition = currentViewTopPosition + $scroll.height();
                    var targetTopPosition = $target.position().top + currentViewTopPosition;
                    var targetBottomPosition = targetTopPosition + $target.outerHeight();
                    if (currentViewTopPosition <= targetTopPosition && targetBottomPosition <= currentViewBottomPosition) {
                        return;
                    }
                    if (targetTopPosition <= currentViewTopPosition) {
                        var gap = currentViewTopPosition - targetTopPosition;
                        $scroll.scrollTop(currentViewTopPosition - gap);
                        return;
                    }
                    if (currentViewBottomPosition <= targetBottomPosition) {
                        var gap = targetBottomPosition - currentViewBottomPosition;
                        $scroll.scrollTop(currentViewTopPosition + gap);
                        return;
                    }
                };
                $.fn.onkey = function (command, keyCode, handler) {
                    var $element = $(this);
                    $element.on("key" + command, function (e) {
                        if (e.keyCode === keyCode) {
                            return handler(e);
                        }
                    });
                    return $element;
                };
                $.fn.dialogPositionControl = function () {
                    var $dialog = $(this);
                    $dialog.dialog("option", "position", {
                        my: "center",
                        at: "center",
                        of: window,
                        collision: "none"
                    });
                    var $container = $dialog.closest(".ui-dialog");
                    var offsetContentsArea = $("#header").height();
                    var offsetDialog = $container.offset();
                    if (offsetDialog.top < offsetContentsArea) {
                        offsetDialog.top = offsetContentsArea;
                    }
                    if (offsetDialog.left < 0) {
                        offsetDialog.left = 0;
                    }
                    $container.offset(offsetDialog);
                    $dialog.dialog({ dragStop: function (event, ui) {
                            var offsetDialog = $container.offset();
                            if (offsetDialog.top < offsetContentsArea) {
                                offsetDialog.top = offsetContentsArea;
                                $container.offset(offsetDialog);
                                return false;
                            }
                        } });
                    return $dialog;
                };
            })(jqueryExtentions = ui_2.jqueryExtentions || (ui_2.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_3) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * CheckBox binding handler
                 */
                var NtsCheckboxBindingHandler = (function () {
                    /**
                     * Constructor.
                     */
                    function NtsCheckboxBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsCheckboxBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var setChecked = data.checked;
                        var textId = data.text;
                        var style = "style-" + (data.style || "normal");
                        var checkBoxText;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Container
                        var container = $(element);
                        if (nts.uk.util.isNullOrUndefined(container.attr("tabindex")))
                            container.attr("tabindex", "0");
                        container.addClass("ntsControl ntsCheckBox").on("click", function (e) {
                            if (container.data("readonly") === true)
                                e.preventDefault();
                        });
                        container.addClass(style + " checkbox-wrapper");
                        container.data("tabindex", container.attr("tabindex"));
                        var wrapper = container.parent();
                        wrapper.addClass(style);
                        if (textId) {
                            checkBoxText = textId;
                        }
                        else {
                            checkBoxText = container.text();
                            container.text('');
                        }
                        container.data("enable", enable);
                        var $checkBoxLabel = $("<label class='ntsCheckBox-label'></label>");
                        var $checkBox = $('<input type="checkbox">').on("change", function () {
                            if (typeof setChecked === "function")
                                setChecked($(this).is(":checked"));
                        }).appendTo($checkBoxLabel);
                        var $box = $("<span class='box'></span>").appendTo($checkBoxLabel);
                        if (checkBoxText && checkBoxText.length > 0)
                            var label = $("<span class='label'></span>").text(checkBoxText).appendTo($checkBoxLabel);
                        $checkBoxLabel.appendTo(container);
                        container.keypress(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code === 32) {
                                if (container.data("enable") !== false) {
                                    var checkbox = container.find("input[type='checkbox']:first");
                                    var checked = !checkbox.is(":checked");
                                    checkbox.prop("checked", checked);
                                    container[checked ? "addClass" : "removeClass"]("checked");
                                    setChecked(checked);
                                }
                                evt.preventDefault();
                            }
                        });
                    };
                    /**
                     * Update
                     */
                    NtsCheckboxBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var checked = ko.unwrap(data.checked);
                        var readonly = (data.readonly !== undefined) ? ko.unwrap(data.readonly) : false;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Container
                        var container = $(element);
                        container.data("enable", enable);
                        container.data("readonly", readonly);
                        var $checkBox = $(element).find("input[type='checkbox']");
                        // Checked
                        $checkBox.prop("checked", checked);
                        container[checked ? "addClass" : "removeClass"]("checked");
                        // Enable
                        if (enable === true) {
                            $checkBox.removeAttr("disabled");
                            container.attr("tabindex", container.data("tabindex"));
                        }
                        else if (enable === false) {
                            $checkBox.attr("disabled", "disabled");
                            container.attr("tabindex", "-1");
                        }
                    };
                    return NtsCheckboxBindingHandler;
                }());
                /**
                 * MultiCheckbox binding handler
                 */
                var NtsMultiCheckBoxBindingHandler = (function () {
                    function NtsMultiCheckBoxBindingHandler() {
                    }
                    NtsMultiCheckBoxBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var container = $(element);
                        container.addClass("ntsControl").on("click", function (e) {
                            if (container.data("readonly") === true)
                                e.preventDefault();
                        });
                        container.wrap("<div class='multicheckbox-wrapper'/>");
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        container.data("enable", _.clone(enable));
                        container.data("init", true);
                        container.data("tabindex", container.attr("tabindex"));
                        container.removeAttr("tabindex");
                        // Default value
                        new nts.uk.util.value.DefaultValue().onReset(container, data.value);
                    };
                    NtsMultiCheckBoxBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var options = data.options === undefined ? [] : JSON.parse(ko.toJSON(data.options));
                        var optionValue = ko.unwrap(data.optionsValue);
                        var optionText = ko.unwrap(data.optionsText);
                        var selectedValue = data.value;
                        var readonly = (data.readonly !== undefined) ? ko.unwrap(data.readonly) : false;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Container
                        var container = $(element);
                        container.data("readonly", readonly);
                        // Get option or option[optionValue]
                        var getOptionValue = function (item) {
                            return (optionValue === undefined) ? item : item[optionValue];
                        };
                        var selectedValues = JSON.parse(ko.toJSON(data.value));
                        // Render
                        if (!_.isEqual(container.data("options"), options)) {
                            container.empty();
                            _.forEach(options, function (option) {
                                var checkBoxLabel = $("<label class='ntsCheckBox'></label>");
                                var checkBox = $('<input type="checkbox">').data("option", option).data("value", getOptionValue(option)).on("change", function () {
                                    var self = $(this);
                                    if (self.is(":checked"))
                                        selectedValue.push(self.data("value"));
                                    else
                                        selectedValue.remove(_.find(selectedValue(), function (value) {
                                            return _.isEqual(JSON.parse(ko.toJSON(value)), self.data("value"));
                                        }));
                                });
                                var disableOption = option["enable"];
                                if (nts.uk.util.isNullOrUndefined(container.data("tabindex")))
                                    checkBoxLabel.attr("tabindex", "0");
                                else {
                                    checkBoxLabel.attr("tabindex", container.data("tabindex"));
                                }
                                checkBoxLabel.keypress(function (evt, ui) {
                                    var code = evt.which || evt.keyCode;
                                    if (code === 32) {
                                        if (container.data("enable") !== false && disableOption !== false) {
                                            var cb = checkBoxLabel.find("input[type='checkbox']:first");
                                            if (cb.is(":checked")) {
                                                cb.prop("checked", false);
                                                selectedValue.remove(_.find(selectedValue(), function (value) {
                                                    return _.isEqual(JSON.parse(ko.toJSON(value)), checkBox.data("value"));
                                                }));
                                            }
                                            else {
                                                if (!cb.is(":checked")) {
                                                    cb.prop("checked", true);
                                                    selectedValue.push(checkBox.data("value"));
                                                }
                                            }
                                        }
                                        evt.preventDefault();
                                    }
                                });
                                if (!nts.uk.util.isNullOrUndefined(disableOption) && (disableOption === false)) {
                                    checkBox.attr("disabled", "disabled");
                                    checkBox.attr("tabindex", "-1");
                                }
                                checkBox.appendTo(checkBoxLabel);
                                var box = $("<span class='box'></span>").appendTo(checkBoxLabel);
                                if (option[optionText] && option[optionText].length > 0)
                                    var label = $("<span class='label'></span>").text(option[optionText]).appendTo(checkBoxLabel);
                                checkBoxLabel.appendTo(container);
                            });
                            // Save a clone
                            container.data("options", _.cloneDeep(options));
                        }
                        // Checked  
                        container.find("input[type='checkbox']").prop("checked", function () {
                            var _this = this;
                            return (_.find(selectedValue(), function (value) {
                                return _.isEqual(JSON.parse(ko.toJSON(value)), $(_this).data("value"));
                            }) !== undefined);
                        });
                        // Enable
                        //            if((container.data("init") && enable !== true) || !_.isEqual(container.data("enable"), enable)){
                        container.data("enable", _.clone(enable));
                        if (enable === true) {
                            _.forEach(container.find("input[type='checkbox']"), function (checkbox) {
                                var dataOpion = $(checkbox).data("option");
                                if (dataOpion["enable"] === true) {
                                    $(checkbox).removeAttr("disabled");
                                }
                            });
                        }
                        else if (enable === false) {
                            container.find("input[type='checkbox']").attr("disabled", "disabled");
                            new nts.uk.util.value.DefaultValue().applyReset(container, data.value);
                        }
                    };
                    return NtsMultiCheckBoxBindingHandler;
                }());
                ko.bindingHandlers['ntsCheckBox'] = new NtsCheckboxBindingHandler();
                ko.bindingHandlers['ntsMultiCheckBox'] = new NtsMultiCheckBoxBindingHandler();
            })(koExtentions = ui_3.koExtentions || (ui_3.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_4) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * ComboBox binding handler
                 */
                var ComboBoxBindingHandler = (function () {
                    /**
                     * Constructor.
                     */
                    function ComboBoxBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    ComboBoxBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var container = $(element);
                        if (nts.uk.util.isNullOrUndefined(container.attr("tabindex"))) {
                            container.attr("tabindex", "0");
                        }
                        container.data("tabindex", container.attr("tabindex"));
                        container.keypress(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code === 32) {
                                container.igCombo("openDropDown");
                                evt.preventDefault();
                            }
                        });
                    };
                    /**
                     * Update
                     */
                    ComboBoxBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var self = this;
                        // Get options. 
                        var options = ko.unwrap(data.options);
                        // Get options value.
                        var optionValue = data.optionsValue === undefined ? null : ko.unwrap(data.optionsValue);
                        var optionText = data.optionsText === undefined ? null : ko.unwrap(data.optionsText);
                        var selectedValue = ko.unwrap(data.value);
                        var editable = ko.unwrap(data.editable);
                        var enable = data.enable !== undefined ? ko.unwrap(data.enable) : true;
                        var columns = ko.unwrap(data.columns);
                        var visibleItemsCount = data.visibleItemsCount === undefined ? 5 : ko.unwrap(data.visibleItemsCount);
                        var dropDownAttachedToBody = data.dropDownAttachedToBody === undefined ? null : ko.unwrap(data.dropDownAttachedToBody);
                        if (dropDownAttachedToBody === null) {
                            if ($(element).closest(".ui-iggrid").length != 0)
                                dropDownAttachedToBody = true;
                            else
                                dropDownAttachedToBody = false;
                        }
                        // Container.
                        var container = $(element);
                        var comboMode = editable ? 'editable' : 'dropdown';
                        // Default values.
                        var distanceColumns = '     ';
                        var fillCharacter = ' '; // Character used fill to the columns.
                        var maxWidthCharacter = 15;
                        // Default value
                        var defVal = new nts.uk.util.value.DefaultValue().onReset(container, data.value);
                        var getValue = function (item) {
                            return optionValue === null ? item : item[optionValue];
                        };
                        // Check selected code.
                        if (_.find(options, function (item) { return getValue(item) === selectedValue; }) === undefined && !editable) {
                            selectedValue = options.length > 0 ? getValue(options[0]) : '';
                            data.value(selectedValue);
                        }
                        var haveColumn = columns && columns.length > 0;
                        var isChangeOptions = !_.isEqual(container.data("options"), options);
                        if (isChangeOptions) {
                            container.data("options", options.slice());
                            options = options.map(function (option) {
                                var newOptionText = '';
                                // Check muti columns.
                                if (haveColumn) {
                                    _.forEach(columns, function (item, i) {
                                        var prop = option[item.prop];
                                        var length = item.length;
                                        if (i === columns.length - 1) {
                                            newOptionText += prop;
                                        }
                                        else {
                                            newOptionText += uk.text.padRight(prop, fillCharacter, length) + distanceColumns;
                                        }
                                    });
                                }
                                else {
                                    newOptionText = optionText === null ? option : option[optionText];
                                }
                                // Add label attr.
                                option['nts-combo-label'] = newOptionText;
                                return option;
                            });
                        }
                        var currentColumnSetting = container.data("columns");
                        var currentComboMode = container.data("comboMode");
                        var isInitCombo = !_.isEqual(currentColumnSetting, columns) || !_.isEqual(currentComboMode, comboMode);
                        if (isInitCombo) {
                            // Delete igCombo.
                            if (container.data("igCombo") != null) {
                                container.igCombo('destroy');
                                container.removeClass('ui-state-disabled');
                            }
                            // Set attribute for multi column.
                            var itemTemplate = undefined;
                            if (haveColumn) {
                                itemTemplate = '<div class="nts-combo-item">';
                                _.forEach(columns, function (item, i) {
                                    // Set item template.
                                    itemTemplate += '<div class="nts-column nts-combo-column-' + i + '">${' + item.prop + '}</div>';
                                });
                                itemTemplate += '</div>';
                            }
                            // Create igCombo.
                            container.igCombo({
                                dataSource: options,
                                valueKey: data.optionsValue,
                                visibleItemsCount: visibleItemsCount,
                                dropDownAttachedToBody: dropDownAttachedToBody,
                                textKey: 'nts-combo-label',
                                mode: comboMode,
                                disabled: !enable,
                                placeHolder: '',
                                tabIndex: -1,
                                enableClearButton: false,
                                initialSelectedItems: [
                                    { value: selectedValue }
                                ],
                                itemTemplate: itemTemplate,
                                selectionChanged: function (evt, ui) {
                                    if (ui.items.length > 0) {
                                        data.value(getValue(ui.items[0].data));
                                    }
                                }
                            });
                        }
                        else {
                            container.igCombo("option", "disabled", !enable);
                        }
                        if (!enable) {
                            defVal.applyReset(container, data.value);
                            container.attr("tabindex", "-1");
                        }
                        else {
                            container.attr("tabindex", container.data("tabindex"));
                        }
                        if (isChangeOptions && !isInitCombo) {
                            container.igCombo("option", "dataSource", options);
                            container.igCombo("dataBind");
                        }
                        if (selectedValue !== undefined && selectedValue !== null) {
                            container.igCombo("value", selectedValue);
                        }
                        var isDropDownWidthSpecified = false;
                        // Set width for multi columns.
                        if (haveColumn && (isChangeOptions || isInitCombo)) {
                            var componentWidth = 0;
                            var $dropDownOptions = $(container.igCombo("dropDown"));
                            _.forEach(columns, function (item, i) {
                                isDropDownWidthSpecified = (isDropDownWidthSpecified || item.lengthDropDown !== undefined);
                                if (item.lengthDropDown === undefined) {
                                    item.lengthDropDown = item.length;
                                }
                                var componentColumnWidth = item.length * maxWidthCharacter + 10;
                                var dropDownColumnWidth = item.lengthDropDown * maxWidthCharacter + 10;
                                $dropDownOptions.find('.nts-combo-column-' + i).css("width", dropDownColumnWidth);
                                componentWidth += componentColumnWidth + 10;
                            });
                            container.css({ 'min-width': componentWidth });
                            if (isDropDownWidthSpecified) {
                                container.find(".ui-igcombo-dropdown").css("width", "auto");
                            }
                        }
                        container.data("columns", columns);
                        container.data("comboMode", comboMode);
                    };
                    return ComboBoxBindingHandler;
                }());
                ko.bindingHandlers['ntsComboBox'] = new ComboBoxBindingHandler();
            })(koExtentions = ui_4.koExtentions || (ui_4.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var DatePickerBindingHandler = (function () {
                    /**
                     * Constructor.
                     */
                    function DatePickerBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    DatePickerBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var value = data.value;
                        var name = data.name !== undefined ? ko.unwrap(data.name) : "";
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var dateFormat = (data.dateFormat !== undefined) ? ko.unwrap(data.dateFormat) : "YYYY/MM/DD";
                        var ISOFormat = uk.text.getISOFormat(dateFormat);
                        var hasDayofWeek = (ISOFormat.indexOf("ddd") !== -1);
                        var dayofWeekFormat = ISOFormat.replace(/[^d]/g, "");
                        ISOFormat = ISOFormat.replace(/d/g, "").trim();
                        var valueFormat = (data.valueFormat !== undefined) ? ko.unwrap(data.valueFormat) : "";
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        var button = (data.button !== undefined) ? ko.unwrap(data.button) : false;
                        var startDate = (data.startDate !== undefined) ? ko.unwrap(data.startDate) : null;
                        var endDate = (data.endDate !== undefined) ? ko.unwrap(data.endDate) : null;
                        var autoHide = (data.autoHide !== undefined) ? ko.unwrap(data.autoHide) : true;
                        var acceptJapaneseCalendar = (data.acceptJapaneseCalendar !== undefined) ? ko.unwrap(data.acceptJapaneseCalendar) : true;
                        var valueType = typeof value();
                        if (valueType === "string") {
                            valueFormat = (valueFormat) ? valueFormat : uk.text.getISOFormat("ISO");
                        }
                        else if (valueType === "number") {
                            valueFormat = (valueFormat) ? valueFormat : ISOFormat;
                        }
                        else if (valueType === "object") {
                            if (moment.isDate(value())) {
                                valueType = "date";
                            }
                            else if (moment.isMoment(value())) {
                                valueType = "moment";
                            }
                        }
                        var container = $(element);
                        var idString;
                        if (!container.attr("id")) {
                            idString = nts.uk.util.randomId();
                        }
                        else {
                            idString = container.attr("id");
                            container.removeAttr("id");
                        }
                        var tabIndex = nts.uk.util.isNullOrEmpty(container.attr("tabindex")) ? "0" : container.attr("tabindex");
                        container.removeAttr("tabindex");
                        var containerClass = container.attr('class');
                        container.removeClass(containerClass);
                        container.addClass("ntsControl nts-datepicker-wrapper").data("init", true);
                        var inputClass = (ISOFormat.length < 10) ? "yearmonth-picker" : "";
                        var $input = $("<input id='" + container.attr("id") + "' class='ntsDatepicker nts-input reset-element' tabindex='" + tabIndex + "'/>").addClass(inputClass);
                        $input.addClass(containerClass).attr("id", idString).attr("data-name", container.data("name"));
                        container.append($input);
                        var jumpButtonsDisplay = data.showJumpButtons !== undefined ? ko.unwrap(data.showJumpButtons) : false;
                        var fiscalYear = data.fiscalYear !== undefined ? ko.unwrap(data.fiscalYear) : false;
                        var $prevButton, $nextButton;
                        if (jumpButtonsDisplay) {
                            $prevButton = $("<button/>").text("◀").css("margin-right", "3px").attr("tabIndex", tabIndex);
                            $nextButton = $("<button/>").text("▶").css("margin-left", "3px").attr("tabIndex", tabIndex);
                            $input.before($prevButton).after($nextButton);
                        }
                        if (data.dateFormat === "YYYY") {
                            var $yearType = $("<label/>").attr("for", idString)
                                .css({ "position": "absolute",
                                "line-height": "30px",
                                "right": "42px" });
                            var labelText = fiscalYear ? "年度" : "年";
                            $yearType.text(labelText);
                            container.append($yearType);
                        }
                        if (hasDayofWeek) {
                            var lengthClass = (dayofWeekFormat.length > 3) ? "long-day" : "short-day";
                            var $label = $("<label id='" + idString + "-label' for='" + idString + "' class='dayofweek-label' />");
                            $input.addClass(lengthClass);
                            container.append($label);
                        }
                        // Init Datepicker
                        $input.datepicker({
                            language: 'ja-JP',
                            format: ISOFormat,
                            startDate: startDate,
                            endDate: endDate,
                            autoHide: autoHide,
                            weekStart: 0,
                        }).data("dateNormalizer", DatePickerNormalizer.getInstance($input, $prevButton, $nextButton).setCssRanger(data.cssRanger)
                            .fiscalMonthsMode(data.fiscalMonthsMode)
                            .setDefaultCss(data.defaultClass || ""));
                        name = nts.uk.resource.getControlName(name);
                        var validator = new ui.validation.TimeValidator(name, constraintName, { required: required,
                            outputFormat: nts.uk.util.isNullOrEmpty(valueFormat) ? ISOFormat : valueFormat, valueType: valueType, acceptJapaneseCalendar: acceptJapaneseCalendar });
                        $input.on("change", function (e) {
                            var newText = $input.val();
                            var result = validator.validate(newText);
                            $input.ntsError('clear');
                            if (result.isValid) {
                                // Day of Week
                                if (hasDayofWeek) {
                                    if (uk.util.isNullOrEmpty(result.parsedValue))
                                        $label.text("");
                                    else
                                        $label.text("(" + uk.time.formatPattern(newText, "", dayofWeekFormat) + ")");
                                }
                                value(result.parsedValue);
                            }
                            else {
                                $input.ntsError('set', result.errorMessage, result.errorCode);
                                value(newText);
                            }
                        });
                        $input.on("blur", function () {
                            var newText = $input.val();
                            var result = validator.validate(newText);
                            if (!result.isValid) {
                                $input.ntsError('set', result.errorMessage, result.errorCode);
                            }
                            else if (acceptJapaneseCalendar) {
                                // Day of Week
                                if (hasDayofWeek) {
                                    if (uk.util.isNullOrEmpty(result.parsedValue))
                                        $label.text("");
                                    else
                                        $label.text("(" + uk.time.formatPattern(newText, "", dayofWeekFormat) + ")");
                                }
                            }
                        });
                        $input.on('validate', (function (e) {
                            var newText = $input.val();
                            var result = validator.validate(newText);
                            $input.ntsError('clear');
                            if (!result.isValid) {
                                $input.ntsError('set', result.errorMessage, result.errorCode);
                            }
                            else if (acceptJapaneseCalendar) {
                                // Day of Week
                                if (hasDayofWeek) {
                                    if (uk.util.isNullOrEmpty(result.parsedValue))
                                        $label.text("");
                                    else
                                        $label.text("(" + uk.time.formatPattern(newText, "", dayofWeekFormat) + ")");
                                }
                            }
                        }));
                        new nts.uk.util.value.DefaultValue().onReset($input, data.value);
                        container.data("init", false);
                    };
                    /**
                     * Update
                     */
                    DatePickerBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var value = data.value;
                        var dateFormat = (data.dateFormat !== undefined) ? ko.unwrap(data.dateFormat) : "YYYY/MM/DD";
                        var ISOFormat = uk.text.getISOFormat(dateFormat);
                        var hasDayofWeek = (ISOFormat.indexOf("ddd") !== -1);
                        var dayofWeekFormat = ISOFormat.replace(/[^d]/g, "");
                        ISOFormat = ISOFormat.replace(/d/g, "").trim();
                        var valueFormat = (data.valueFormat !== undefined) ? ko.unwrap(data.valueFormat) : ISOFormat;
                        var disabled = (data.disabled !== undefined) ? ko.unwrap(data.disabled) : false;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : undefined;
                        var startDate = (data.startDate !== undefined) ? ko.unwrap(data.startDate) : null;
                        var endDate = (data.endDate !== undefined) ? ko.unwrap(data.endDate) : null;
                        var container = $(element);
                        var dateNormalizer = container.find("input").data("dateNormalizer");
                        if (dateNormalizer) {
                            if (data.cssRanger) {
                                dateNormalizer.setCssRanger(ko.unwrap(data.cssRanger));
                            }
                        }
                        var init = container.data("init");
                        var $input = container.find(".nts-input");
                        var $label = container.find(".dayofweek-label");
                        // Value Binding
                        if (value() !== $input.val()) {
                            var dateFormatValue = (value() !== "") ? uk.text.removeFromStart(uk.time.formatPattern(value(), valueFormat, ISOFormat), "0") : "";
                            if (dateFormatValue !== "" && dateFormatValue !== "Invalid date") {
                                // Check equals to avoid multi datepicker with same value
                                $input.datepicker('setDate', new Date(dateFormatValue.replace(/\//g, "-")));
                                $label.text("(" + uk.time.formatPattern(value(), valueFormat, dayofWeekFormat) + ")");
                            }
                            else {
                                $input.val("");
                                $label.text("");
                            }
                        }
                        // Properties Binding
                        $input.datepicker('setStartDate', startDate);
                        $input.datepicker('setEndDate', endDate);
                        if (enable !== undefined)
                            $input.prop("disabled", !enable);
                        else
                            $input.prop("disabled", disabled);
                        if ($input.prop("disabled") === true) {
                            new nts.uk.util.value.DefaultValue().applyReset($input, value);
                        }
                        if (data.button)
                            container.find('.datepicker-btn').prop("disabled", disabled);
                    };
                    return DatePickerBindingHandler;
                }());
                ko.bindingHandlers['ntsDatePicker'] = new DatePickerBindingHandler();
                var ViewLocation;
                (function (ViewLocation) {
                    ViewLocation[ViewLocation["PREV"] = 0] = "PREV";
                    ViewLocation[ViewLocation["CURRENT"] = 1] = "CURRENT";
                    ViewLocation[ViewLocation["NEXT"] = 2] = "NEXT";
                })(ViewLocation || (ViewLocation = {}));
                var DatePickerNormalizer = (function () {
                    function DatePickerNormalizer() {
                        this.fiscalMonth = 1;
                        // Constants
                        this.NAMESPACE = "datepicker";
                        this.YEARS = "years";
                        this.MONTHS = "months";
                        this.DAYS = "days";
                        this.WEEK = "week";
                        this.PICKER = " picker";
                        this.YEAR = "year";
                        this.MONTH = "month";
                        this.DAY = "day";
                        this.YEAR_TEXT = "年";
                        this.MONTH_TEXT = "月";
                        this.PERIOD_TEXT = "度";
                        this.structure = { 0: this.YEARS, 1: this.MONTHS, 2: this.DAYS };
                        this.EVENT_SHOW = "show." + this.NAMESPACE;
                        this.EVENT_KEYUP = "keyup." + this.NAMESPACE;
                        this.EVENT_PICK = "pick." + this.NAMESPACE;
                        this.EVENT_CLICK = "click";
                        this.Y_FORMAT = "YYYY";
                        this.YM_FORMAT = "YYYY/MM";
                        this.YMD_FORMAT = "YYYY/MM/DD";
                        this.DATE_SPLITTER = "/";
                    }
                    // Use this method to get an instance.
                    DatePickerNormalizer.getInstance = function ($input, $prev, $next) {
                        var instance = new DatePickerNormalizer();
                        instance.$input = $input;
                        instance.$prev = $prev;
                        instance.$next = $next;
                        return instance.onShow().onKeyup().onPick().onJump();
                    };
                    DatePickerNormalizer.prototype.setCssRanger = function (range) {
                        this.cssRanger = range;
                        return this;
                    };
                    DatePickerNormalizer.prototype.setFiscalMonth = function (month) {
                        this.fiscalMonth = month;
                        return this;
                    };
                    DatePickerNormalizer.prototype.setDefaultCss = function (clazz) {
                        this.defaultCss = clazz;
                        return this;
                    };
                    DatePickerNormalizer.prototype.fiscalMonthsMode = function (value) {
                        if (value === true)
                            this.setFiscalMonth(4);
                        return this;
                    };
                    DatePickerNormalizer.prototype.getPicker = function () {
                        return this.$input.data(this.NAMESPACE).$picker;
                    };
                    DatePickerNormalizer.prototype.getYearsPicker = function () {
                        return this.$input.data(this.NAMESPACE).$yearsPicker;
                    };
                    DatePickerNormalizer.prototype.getMonthsPicker = function () {
                        return this.$input.data(this.NAMESPACE).$monthsPicker;
                    };
                    DatePickerNormalizer.prototype.getYearsBoard = function () {
                        return this.$input.data(this.NAMESPACE).$years;
                    };
                    DatePickerNormalizer.prototype.getMonthsBoard = function () {
                        return this.$input.data(this.NAMESPACE).$months;
                    };
                    DatePickerNormalizer.prototype.getCurrentYear = function () {
                        return this.$input.data(this.NAMESPACE).$yearCurrent;
                    };
                    DatePickerNormalizer.prototype.getView = function (view, isCurrentView) {
                        var pickerView, viewPart, currentViewPart;
                        var viewName = this.structure[view];
                        switch (viewName) {
                            case this.YEARS:
                                pickerView = this.YEARS + this.PICKER;
                                viewPart = this.YEARS;
                                currentViewPart = "current year";
                                break;
                            case this.MONTHS:
                                pickerView = this.MONTHS + this.PICKER;
                                viewPart = this.MONTHS;
                                currentViewPart = "current month";
                                break;
                            case this.DAYS:
                                pickerView = this.DAYS + this.PICKER;
                                viewPart = this.DAYS;
                                break;
                            case this.WEEK:
                                pickerView = this.DAYS + this.PICKER;
                                viewPart = this.WEEK;
                                break;
                        }
                        return $(this.getPicker()[0]).children().filter(function (idx, elm) {
                            return $(elm).data("view") === pickerView;
                        }).find("ul").filter(function (idx, elm) {
                            if (isCurrentView === true)
                                return idx === 0;
                            else
                                return $(elm).data("view") === viewPart;
                        });
                    };
                    DatePickerNormalizer.prototype.getMutedClass = function () {
                        return this.options !== undefined ? this.options.mutedClass : "";
                    };
                    DatePickerNormalizer.prototype.getPickedClass = function () {
                        return this.options !== undefined ? this.options.pickedClass : "";
                    };
                    DatePickerNormalizer.prototype.setColorLevel = function () {
                        if (this.options.format === this.Y_FORMAT)
                            this.colorLevel = this.YEARS;
                        else if (this.options.format === this.YM_FORMAT)
                            this.colorLevel = this.MONTHS;
                        else if (this.options.format === this.YMD_FORMAT)
                            this.colorLevel = this.DAYS;
                        // Only set to colorLevel in initialization.
                        if (this.selectedView === undefined)
                            this.selectedView = this.colorLevel;
                    };
                    DatePickerNormalizer.prototype.color = function () {
                        var _this = this;
                        if (this.cssRanger === undefined)
                            return;
                        // Year only picker
                        if (this.cssRanger.constructor === Array) {
                            _.each(this.cssRanger, function (cell) { return _this.colorCell(cell, ViewLocation.CURRENT, -1); });
                            return;
                        }
                        this.colorNode(this.cssRanger, ViewLocation.CURRENT, 0);
                        this.colorNode(this.cssRanger, ViewLocation.NEXT, 0);
                        this.colorNode(this.cssRanger, ViewLocation.PREV, 0);
                    };
                    DatePickerNormalizer.prototype.colorNode = function (holders, location, currentLayer) {
                        var _this = this;
                        var holder;
                        var handledYear = location === ViewLocation.CURRENT ? this.viewYear : this.viewYear + 1;
                        // If processing layer is 1 level above leaf layer
                        if (this.colorLevel === this.structure[currentLayer + 1]) {
                            switch (currentLayer) {
                                case 0:
                                    holder = handledYear;
                                    break;
                                case 1:
                                    if (location === ViewLocation.CURRENT)
                                        holder = this.viewMonth;
                                    else if (location === ViewLocation.PREV)
                                        holder = this.viewMonth - 1;
                                    else
                                        holder = this.viewMonth + 1;
                                    break;
                                case 2:
                                    holder = this.date;
                                    break;
                                default:
                                    holder = handledYear;
                                    currentLayer = 0;
                                    break;
                            }
                        }
                        else {
                            switch (currentLayer) {
                                case 0:
                                    holder = this.viewYear;
                                    break;
                                case 1:
                                    holder = this.viewMonth;
                                    break;
                                case 2:
                                    holder = this.date;
                                    break;
                                default:
                                    holder = this.viewYear;
                                    currentLayer = 0;
                                    break;
                            }
                        }
                        if (holders.hasOwnProperty(holder)) {
                            if (holders[holder].constructor === Array) {
                                _.each(holders[holder], function (cell) { return _this.colorCell(cell, location, currentLayer); });
                                return;
                            }
                            currentLayer++;
                            this.colorNode(holders[holder], location, currentLayer);
                        }
                    };
                    DatePickerNormalizer.prototype.colorCell = function (cell, location, layer) {
                        var self = this;
                        var data = typeof cell === "object" ? Object.keys(cell)[0] : cell;
                        var $target = this.$view.children().filter(function (idx, elm) {
                            if (self.structure[layer] === self.YEARS) {
                                return $(elm).text() === self.defaultMonths[data - 1]
                                    && ((location === ViewLocation.PREV && $(elm).data("view").indexOf("prev") !== -1)
                                        || (location === ViewLocation.NEXT && $(elm).data("view").indexOf("next") !== -1)
                                        || location === ViewLocation.CURRENT && $(elm).data("view").indexOf("prev") === -1
                                            && $(elm).data("view").indexOf("next") === -1);
                            }
                            else if (self.structure[layer] === self.MONTHS) {
                                return $(elm).text() === data.toString()
                                    && ((location === ViewLocation.PREV && $(elm).data("view").indexOf("prev") !== -1)
                                        || (location === ViewLocation.NEXT && $(elm).data("view").indexOf("next") !== -1)
                                        || location === ViewLocation.CURRENT && $(elm).data("view").indexOf("prev") === -1
                                            && $(elm).data("view").indexOf("next") === -1);
                            }
                            else if (layer === -1) {
                                return $(elm).text() === data.toString();
                            }
                        });
                        if ($target.length > 0) {
                            $target.addClass((typeof cell === "object" && cell[data] !== undefined) ? cell[data] : this.defaultCss);
                        }
                    };
                    DatePickerNormalizer.prototype.fillFiscalMonthsInYear = function () {
                        var self = this;
                        if (this.fiscalMonth === 1)
                            return;
                        var nextYearMonths = this.defaultMonths.slice(0, this.fiscalMonth - 1);
                        var currentYearMonths = this.defaultMonths.slice(this.fiscalMonth - 1);
                        var newMonths = $.merge(currentYearMonths, nextYearMonths);
                        var nextYearMark = 12 - this.fiscalMonth;
                        this.getMonthsBoard().children().each(function (idx, elm) {
                            $(elm).text(newMonths[idx]);
                            if (idx > nextYearMark)
                                $(elm).addClass(self.getMutedClass()).attr("data-view", "fiscalMonth next")
                                    .data("view", "fiscalMonth next").css("font-size", "inherit");
                        });
                        var $currentYear = this.getCurrentYear();
                        if ($currentYear.length > 0)
                            $currentYear.text(this.viewYear + this.yearText());
                    };
                    DatePickerNormalizer.prototype.allowPickMonth = function () {
                        return (this.viewMonth < this.fiscalMonth && this.viewYear === this.year - 1)
                            || (this.viewMonth >= this.fiscalMonth && this.viewYear === this.year);
                    };
                    DatePickerNormalizer.prototype.allowPickDate = function () {
                        return this.viewYear === this.year && this.viewMonth === this.month;
                    };
                    DatePickerNormalizer.prototype.pickMonth = function () {
                        var self = this;
                        if (self.fiscalMonth === 1)
                            return;
                        var month = self.month + self.MONTH_TEXT;
                        this.getMonthsBoard().children().each(function (idx, elm) {
                            var view;
                            if ($(elm).text() === month.toString()) {
                                view = "month picked";
                                $(elm).addClass(self.getPickedClass()).attr("data-view", view).data("view", view);
                            }
                            else if ($(elm).hasClass(self.getPickedClass())) {
                                view = $(elm).data("view").split(" ")[0];
                                $(elm).removeClass(self.getPickedClass()).attr("data-view", view).data("view", view);
                            }
                        });
                    };
                    DatePickerNormalizer.prototype.pickDate = function () {
                        var self = this;
                        if (self.colorLevel !== self.DAYS || self.fiscalMonth === 1)
                            return;
                        var date = self.date;
                        this.$view.children().each(function (idx, elm) {
                            if ($(elm).text() === date.toString() && $(elm).data("view").indexOf("prev") === -1
                                && $(elm).data("view").indexOf("next") === -1) {
                                $(elm).addClass(self.getPickedClass()).attr("data-view", "day picked").data("view", "day picked");
                            }
                            else if ($(elm).hasClass(self.getPickedClass())) {
                                $(elm).removeClass(self.getPickedClass()).attr("data-view", "day").data("view", "day");
                            }
                        });
                    };
                    DatePickerNormalizer.prototype.clearPicked = function () {
                        var self = this;
                        var view = self.colorLevel === self.MONTHS ? "month" : "day";
                        var $selectedBoard;
                        if (this.selectedView === this.MONTHS) {
                            $selectedBoard = this.getMonthsBoard();
                        }
                        else if (this.selectedView === this.DAYS) {
                            $selectedBoard = this.getYearsBoard();
                        }
                        if ($selectedBoard === undefined)
                            return;
                        $selectedBoard.children().filter(function (idx, elm) {
                            return $(elm).data("view").indexOf("picked") !== -1;
                        }).removeClass(self.getPickedClass()).attr("data-view", view).data("view", view);
                    };
                    DatePickerNormalizer.prototype.yearText = function () {
                        return this.fiscalMonth !== 1 ? this.YEAR_TEXT + this.PERIOD_TEXT : this.YEAR_TEXT;
                    };
                    DatePickerNormalizer.prototype.onClick = function () {
                        var self = this;
                        var picker = this.getPicker();
                        picker.off("click", this._click);
                        picker.on("click", $.proxy(this._click, this));
                    };
                    DatePickerNormalizer.prototype._click = function (evt) {
                        var $target = $(evt.target);
                        var view = $target.data("view");
                        switch (view) {
                            case "years prev":
                            case "years next":
                                this.updateYearsView();
                                break;
                            case "year prev":
                                this.viewYear--;
                                this.updateMonthsView();
                                break;
                            case "year next":
                                this.viewYear++;
                                this.updateMonthsView();
                                break;
                            case "month prev":
                                if (this.viewMonth == 1) {
                                    this.viewMonth = 12;
                                    this.viewYear--;
                                }
                                else
                                    this.viewMonth--;
                                this.updateDaysView();
                                break;
                            case "month next":
                                if (this.viewMonth == 12) {
                                    this.viewMonth = 1;
                                    this.viewYear++;
                                }
                                else
                                    this.viewMonth++;
                                this.updateDaysView();
                                break;
                            case "day prev":
                                this.updateDaysView();
                                break;
                            case "day next":
                                this.updateDaysView();
                                break;
                            case "fiscalMonth next":
                                if ($target.hasClass(this.getPickedClass()))
                                    return;
                                var pickedMonth = this.defaultMonths.indexOf($target.text());
                                this._clickFiscalNextMonth(pickedMonth);
                                this.$input.datepicker("hide");
                                if (this.colorLevel === this.DAYS) {
                                    this.$input.datepicker("show");
                                }
                                break;
                            case "year current":
                                this.selectedView = this.YEARS;
                                break;
                            case "month current":
                                this.selectedView = this.MONTHS;
                                if (this.viewMonth < this.fiscalMonth)
                                    this.viewYear--;
                                this.updateMonthsView();
                                break;
                        }
                    };
                    DatePickerNormalizer.prototype.updateYearsView = function () {
                        this.color();
                    };
                    DatePickerNormalizer.prototype.updateMonthsView = function () {
                        if (this.fiscalMonth !== 1) {
                            this.fillFiscalMonthsInYear();
                        }
                        if (this.colorLevel === this.MONTHS) {
                            this.color();
                        }
                        if (this.allowPickMonth())
                            this.pickMonth();
                        if (this.viewMonth < this.fiscalMonth && this.viewYear === this.year)
                            this.clearPicked();
                    };
                    DatePickerNormalizer.prototype.updateDaysView = function () {
                        if (this.colorLevel === this.DAYS) {
                            this.color();
                        }
                        if (this.allowPickDate())
                            this.pickDate();
                    };
                    DatePickerNormalizer.prototype._beforeShow = function () {
                        this.options = this.$input.data(this.NAMESPACE).options;
                        this.setColorLevel();
                        this.defaultMonths = this.options.monthsShort;
                        var text = this.$input.val();
                        var parsedTextTime = this.parseDate(text);
                        if (parsedTextTime !== undefined && parsedTextTime.month === 2) {
                            this.viewYear = this.year = parsedTextTime.year;
                            this.viewMonth = this.month = parsedTextTime.month;
                            this.date = parsedTextTime.date;
                        }
                        else {
                            var initValue = this.$input.datepicker("getDate", true);
                            var viewTime = this.$input.data(this.NAMESPACE).viewDate;
                            this.viewYear = viewTime.getFullYear();
                            this.viewMonth = viewTime.getMonth() + 1;
                            var parsedTime = this.parseDate(initValue);
                            if (parsedTime !== undefined) {
                                this.year = parsedTime.year;
                                this.month = parsedTime.month;
                                this.date = parsedTime.date;
                            }
                            else
                                return;
                        }
                        var colorLevel = this.colorLevel;
                        var layer;
                        if (colorLevel === this.YEARS) {
                            layer = 0;
                        }
                        else if (colorLevel === this.MONTHS) {
                            layer = 1;
                        }
                        else if (colorLevel === this.DAYS) {
                            layer = 2;
                        }
                        this.$view = this.getView(layer);
                        this.$currentView = this.getView(layer, true);
                        // Body contents of picker is showing months
                        if (this.selectedView === this.MONTHS) {
                            if (this.viewMonth < this.fiscalMonth)
                                this.viewYear--;
                            this.fillFiscalMonthsInYear();
                        }
                        this.color();
                        // Pick time
                        if (this.selectedView === this.MONTHS && this.allowPickMonth()) {
                            if (this.viewMonth < this.fiscalMonth && this.viewYear === this.year)
                                this.clearPicked();
                            this.pickMonth();
                        }
                        else if (this.selectedView === this.DAYS && this.allowPickDate()) {
                            this.pickDate();
                        }
                    };
                    DatePickerNormalizer.prototype.parseDate = function (date) {
                        var exp = new RegExp(/\d+(\/\d+)?(\/\d+)?/);
                        if (exp.test(date) === false)
                            return;
                        var dateParts = date.split(this.DATE_SPLITTER);
                        return {
                            year: parseInt(dateParts[0]),
                            month: parseInt(dateParts[1]),
                            date: dateParts[2] !== undefined ? parseInt(dateParts[2]) : undefined
                        };
                    };
                    DatePickerNormalizer.prototype.onShow = function () {
                        var self = this;
                        this.$input.on(this.EVENT_SHOW, function (evt) {
                            var _self = self;
                            setTimeout(function () {
                                _self._beforeShow.call(_self);
                                _self.onClick.call(_self);
                            }, 0);
                        });
                        return self;
                    };
                    DatePickerNormalizer.prototype.onKeyup = function () {
                        //            this.$input.off(this.EVENT_KEYUP, this._beforeShow);
                        //            this.$input.on(this.EVENT_KEYUP, $.proxy(this._beforeShow, this));
                        return this;
                    };
                    DatePickerNormalizer.prototype.onPick = function () {
                        var self = this;
                        this.$input.on(this.EVENT_PICK, function (evt) {
                            var view = evt.view; // month | year
                            if (view === self.DAY) {
                                self.date = evt.date.getDate();
                                self.month = evt.date.getMonth() + 1;
                                self.viewMonth = self.month;
                                self.year = evt.date.getFullYear();
                                self.viewYear = self.year;
                            }
                            else if (view === self.MONTH) {
                                self._clickFiscalNextMonth.call(self, evt.date.getMonth());
                            }
                            else if (view === self.YEAR) {
                                var _self = self;
                                setTimeout(function () {
                                    _self.year = evt.date.getFullYear();
                                    _self.viewYear = _self.year;
                                    _self.month = _self.viewMonth;
                                    if (_self.viewMonth < _self.fiscalMonth)
                                        _self.viewYear--;
                                    _self.updateMonthsView.call(_self);
                                }, 0);
                            }
                        });
                        return self;
                    };
                    DatePickerNormalizer.prototype._clickFiscalNextMonth = function (pickedMonth) {
                        var self = this;
                        self.month = pickedMonth + 1;
                        self.viewMonth = self.month;
                        // Fiscal month mode
                        if (self.fiscalMonth !== 1) {
                            self.year = self.month >= self.fiscalMonth ? self.viewYear : (self.viewYear + 1);
                            self.viewYear = self.year;
                            self.$input.datepicker("setDate", new Date(self.year, self.month - 1, self.date || 1));
                        }
                    };
                    DatePickerNormalizer.prototype.onJump = function () {
                        var self = this;
                        if (uk.util.isNullOrUndefined(self.$prev) || uk.util.isNullOrUndefined(self.$next))
                            return self;
                        this.$prev.on(this.EVENT_CLICK, function (evt) {
                            self.addTime(-1);
                        });
                        this.$next.on(this.EVENT_CLICK, function (evt) {
                            self.addTime(1);
                        });
                        return self;
                    };
                    DatePickerNormalizer.prototype.addTime = function (value) {
                        var self = this;
                        var year, month, date;
                        if (self.options === undefined)
                            self.options = self.$input.data(self.NAMESPACE).options;
                        var time = self.$input.datepicker("getDate", true);
                        var parsedTime = self.parseDate(time);
                        if (parsedTime !== undefined) {
                            if (self.options.format === self.YMD_FORMAT) {
                                year = parsedTime.year;
                                month = parsedTime.month - 1;
                                date = parsedTime.date + value;
                            }
                            else if (self.options.format === self.YM_FORMAT) {
                                var postCalcVal = parsedTime.month + value;
                                date = 1;
                                if (postCalcVal < 1) {
                                    year = parsedTime.year - 1;
                                    month = 11;
                                }
                                else if (postCalcVal > 12) {
                                    year = parsedTime.year + 1;
                                    month = postCalcVal - 13;
                                }
                                else {
                                    year = parsedTime.year;
                                    month = postCalcVal - 1;
                                }
                            }
                            else if (self.options.format === self.Y_FORMAT) {
                                var postCalcVal = parsedTime.year + value;
                                if (postCalcVal < 1900) {
                                    year = 9999;
                                }
                                else if (postCalcVal > 9999) {
                                    year = 1900;
                                }
                                else
                                    year = postCalcVal;
                                month = 1;
                                date = 1;
                            }
                        }
                        self.$input.datepicker("setDate", new Date(year, month, date));
                    };
                    return DatePickerNormalizer;
                }());
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Dialog binding handler
                 */
                var NtsDialogBindingHandler = (function () {
                    function NtsDialogBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsDialogBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    };
                    /**
                     * Update
                     */
                    NtsDialogBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var option = ko.unwrap(data.option);
                        var title = ko.unwrap(data.title);
                        var message = ko.unwrap(data.message);
                        var modal = ko.unwrap(option.modal);
                        var show = ko.unwrap(option.show);
                        var buttons = ko.unwrap(option.buttons);
                        var $dialog = $("<div id='ntsDialog'></div>");
                        if (show == true) {
                            $('body').append($dialog);
                            // Create Buttons
                            var dialogbuttons = [];
                            var _loop_1 = function(button) {
                                dialogbuttons.push({
                                    text: ko.unwrap(button.text),
                                    "class": ko.unwrap(button.class) + ko.unwrap(button.size) + " " + ko.unwrap(button.color),
                                    click: function () { button.click(bindingContext.$data, $dialog); }
                                });
                            };
                            for (var _i = 0, buttons_1 = buttons; _i < buttons_1.length; _i++) {
                                var button = buttons_1[_i];
                                _loop_1(button);
                            }
                            // Create dialog
                            $dialog.dialog({
                                title: title,
                                modal: modal,
                                closeOnEscape: false,
                                buttons: dialogbuttons,
                                dialogClass: "no-close",
                                open: function () {
                                    $(this).parent().find('.ui-dialog-buttonset > button.yes').focus();
                                    $(this).parent().find('.ui-dialog-buttonset > button').removeClass('ui-button ui-corner-all ui-widget');
                                    $('.ui-widget-overlay').last().css('z-index', 120000);
                                },
                                close: function (event) {
                                    bindingContext.$data.option.show(false);
                                }
                            }).text(message);
                        }
                        else {
                            // Destroy dialog
                            if ($('#ntsDialog').dialog("instance") != null)
                                $('#ntsDialog').dialog("destroy");
                            $('#ntsDialog').remove();
                        }
                    };
                    return NtsDialogBindingHandler;
                }());
                /**
                 * Error Dialog binding handler
                 */
                var NtsErrorDialogBindingHandler = (function () {
                    function NtsErrorDialogBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsErrorDialogBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var option = ko.unwrap(data.option);
                        var title = ko.unwrap(data.title);
                        var headers = ko.unwrap(option.headers);
                        var modal = ko.unwrap(option.modal);
                        var show = ko.unwrap(option.show);
                        var buttons = ko.unwrap(option.buttons);
                        var $dialog = $("<div id='ntsErrorDialog'></div>");
                        parent.$('body').append($dialog);
                        // Create Buttons
                        var dialogbuttons = [];
                        var _loop_2 = function(button) {
                            dialogbuttons.push({
                                text: ko.unwrap(button.text),
                                "class": ko.unwrap(button.class) + ko.unwrap(button.size) + " " + ko.unwrap(button.color),
                                click: function () { button.click(bindingContext.$data, $dialog); }
                            });
                        };
                        for (var _i = 0, buttons_2 = buttons; _i < buttons_2.length; _i++) {
                            var button = buttons_2[_i];
                            _loop_2(button);
                        }
                        // Calculate width
                        var dialogWidth = 40 + 35 + 17;
                        headers.forEach(function (header, index) {
                            if (ko.unwrap(header.visible)) {
                                if (typeof ko.unwrap(header.width) === "number") {
                                    dialogWidth += ko.unwrap(header.width);
                                }
                                else {
                                    dialogWidth += 200;
                                }
                            }
                        });
                        // Create dialog
                        $dialog.dialog({
                            title: title,
                            modal: modal,
                            autoOpen: false,
                            closeOnEscape: false,
                            width: dialogWidth,
                            maxHeight: 500,
                            buttons: dialogbuttons,
                            dialogClass: "no-close",
                            open: function () {
                                $(this).parent().find('.ui-dialog-buttonset > button.yes').focus();
                                $(this).parent().find('.ui-dialog-buttonset > button').removeClass('ui-button ui-corner-all ui-widget');
                                $('.ui-widget-overlay').last().css('z-index', nts.uk.ui.dialog.getMaxZIndex());
                            },
                            close: function (event) {
                                bindingContext.$data.option().show(false);
                            }
                        }).dialogPositionControl();
                    };
                    /**
                     * Update
                     */
                    NtsErrorDialogBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var option = ko.unwrap(data.option);
                        var title = ko.unwrap(data.title);
                        var errors = ko.unwrap(data.errors);
                        var headers = ko.unwrap(option.headers);
                        var displayrows = ko.unwrap(option.displayrows);
                        //var maxrows: number = ko.unwrap(option.maxrows);
                        var autoclose = ko.unwrap(option.autoclose);
                        var show = ko.unwrap(option.show);
                        var $dialog = parent.$("#ntsErrorDialog");
                        if (show == true) {
                            // Create Error Table
                            var $errorboard = $("<div id='error-board'></div>");
                            var $errortable = $("<table></table>");
                            // Header
                            var $header = $("<thead></thead>");
                            var $headerRow_1 = $("<tr></tr>");
                            $headerRow_1.append("<th style='display:none;'></th>");
                            headers.forEach(function (header, index) {
                                if (ko.unwrap(header.visible)) {
                                    var $headerElement = $("<th>" + ko.unwrap(header.text) + "</th>").width(ko.unwrap(header.width));
                                    $headerRow_1.append($headerElement);
                                }
                            });
                            $header.append($headerRow_1);
                            $errortable.append($header);
                            // Body
                            var $body = $("<tbody></tbody>");
                            errors.forEach(function (error, index) {
                                // Row
                                var $row = $("<tr></tr>");
                                $row.click(function () {
                                    error.$control[0].focus();
                                    var $dialogContainer = $dialog.closest("[role='dialog']");
                                    var $self = nts.uk.ui.windows.getSelf();
                                    var additonalTop = 0;
                                    var additonalLeft = 0;
                                    if (!$self.isRoot) {
                                        var $currentDialog = $self.$dialog.closest("[role='dialog']");
                                        var $currentHeadBar = $currentDialog.find(".ui-dialog-titlebar");
                                        var currentDialogOffset = $currentDialog.offset();
                                        additonalTop = currentDialogOffset.top + $currentHeadBar.height();
                                        additonalLeft = currentDialogOffset.left;
                                    }
                                    var currentControlOffset = error.$control.offset();
                                    var top = additonalTop + currentControlOffset.top + error.$control.outerHeight() - window.scrollY;
                                    var left = additonalLeft + currentControlOffset.left - window.scrollX;
                                    var $errorDialogOffset = $dialogContainer.offset();
                                    var maxLeft = $errorDialogOffset.left + $dialogContainer.width();
                                    var maxTop = $errorDialogOffset.top + $dialogContainer.height();
                                    if ($errorDialogOffset.top < top && top < maxTop) {
                                        $dialogContainer.css("top", top + 15);
                                    }
                                    if (($errorDialogOffset.left < left && left < maxLeft)) {
                                        $dialogContainer.css("left", left);
                                    }
                                });
                                $row.append("<td style='display:none;'>" + (index + 1) + "</td>");
                                headers.forEach(function (header) {
                                    if (ko.unwrap(header.visible))
                                        if (error.hasOwnProperty(ko.unwrap(header.name))) {
                                            // TD
                                            var $column = $("<td>" + error[ko.unwrap(header.name)] + "</td>");
                                            $row.append($column);
                                        }
                                });
                                $body.append($row);
                            });
                            $errortable.append($body);
                            $errorboard.append($errortable);
                            // Errors over maxrows message
                            var $message = $("<div></div>");
                            $dialog.html("");
                            $dialog.append($errorboard).append($message);
                            //                $dialog.on("dialogresizestop dialogopen", function() {
                            $dialog.on("dialogopen", function () {
                                var maxrowsHeight = 0;
                                var index = 0;
                                $(this).find("table tbody tr").each(function () {
                                    if (index < displayrows) {
                                        index++;
                                        maxrowsHeight += $(this).height();
                                    }
                                });
                                maxrowsHeight = maxrowsHeight + 33 + 20 + 20 + 55 + 4 + $(this).find("table thead").height();
                                if (maxrowsHeight > $dialog.dialog("option", "maxHeight")) {
                                    maxrowsHeight = $dialog.dialog("option", "maxHeight");
                                }
                                $dialog.dialog("option", "height", maxrowsHeight);
                            });
                            //                if($dialog.dialog("isOpen")){
                            $dialog.dialog("open");
                            //                } else {
                            $dialog.closest("[role='dialog']").show();
                        }
                        else {
                            $dialog.closest("[role='dialog']").hide();
                        }
                    };
                    return NtsErrorDialogBindingHandler;
                }());
                ko.bindingHandlers['ntsDialog'] = new NtsDialogBindingHandler();
                ko.bindingHandlers['ntsErrorDialog'] = new NtsErrorDialogBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var validation = nts.uk.ui.validation;
                /**
                 * BaseEditor Processor
                 */
                var EditorProcessor = (function () {
                    function EditorProcessor() {
                    }
                    EditorProcessor.prototype.init = function ($input, data) {
                        var _this = this;
                        var self = this;
                        var value = data.value;
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var constraint = validation.getConstraint(constraintName);
                        var immediate = false;
                        var readonly = (data.readonly !== undefined) ? ko.unwrap(data.readonly) : false;
                        var valueUpdate = (immediate === true) ? 'input' : 'change';
                        var option = (data.option !== undefined) ? ko.mapping.toJS(data.option) : {};
                        this.editorOption = $.extend(this.getDefaultOption(), option);
                        var characterWidth = 9;
                        if (constraint && constraint.maxLength && !$input.is("textarea")) {
                            var autoWidth = constraint.maxLength * characterWidth;
                            $input.width(autoWidth);
                        }
                        $input.addClass('nts-editor nts-input');
                        $input.wrap("<span class= 'nts-editor-wrapped ntsControl'/>");
                        setEnterHandlerIfRequired($input, data);
                        $input.on(valueUpdate, function (e) {
                            var newText = $input.val();
                            var validator = _this.getValidator(data);
                            var result = validator.validate(newText);
                            if (result.isValid) {
                                $input.ntsError('clear');
                                value(result.parsedValue);
                                value.valueHasMutated();
                            }
                            else {
                                var error = $input.ntsError('getError');
                                if (nts.uk.util.isNullOrUndefined(error) || error.messageText !== result.errorMessage) {
                                    $input.ntsError('clear');
                                    $input.ntsError('set', result.errorMessage, result.errorCode);
                                }
                                value(newText);
                            }
                        });
                        // Format on blur
                        $input.blur(function () {
                            if (!$input.attr('readonly')) {
                                var formatter = self.getFormatter(data);
                                var newText = $input.val();
                                var validator = self.getValidator(data);
                                var result = validator.validate(newText);
                                if (result.isValid) {
                                    $input.ntsError('clear');
                                    $input.val(formatter.format(result.parsedValue));
                                }
                                else {
                                    var error = $input.ntsError('getError');
                                    if (nts.uk.util.isNullOrUndefined(error) || error.messageText !== result.errorMessage) {
                                        $input.ntsError('clear');
                                        $input.ntsError('set', result.errorMessage, result.errorCode);
                                    }
                                    value(newText);
                                }
                            }
                        });
                        $input.on('validate', (function (e) {
                            var newText = $input.val();
                            var validator = self.getValidator(data);
                            var result = validator.validate(newText);
                            $input.ntsError('clear');
                            if (!result.isValid) {
                                $input.ntsError('set', result.errorMessage, result.errorCode);
                            }
                        }));
                        new nts.uk.util.value.DefaultValue().onReset($input, data.value);
                        var tabIndex = $input.attr("tabindex");
                        $input.data("tabindex", tabIndex);
                    };
                    EditorProcessor.prototype.update = function ($input, data) {
                        var value = data.value;
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var readonly = (data.readonly !== undefined) ? ko.unwrap(data.readonly) : false;
                        var option = (data.option !== undefined) ? ko.mapping.toJS(data.option) : {};
                        this.editorOption = $.extend(this.getDefaultOption(), option);
                        var placeholder = this.editorOption.placeholder;
                        var textalign = this.editorOption.textalign;
                        var width = this.editorOption.width;
                        // Properties
                        if (enable !== false) {
                            $input.removeAttr('disabled');
                        }
                        else {
                            $input.attr('disabled', 'disabled');
                            new nts.uk.util.value.DefaultValue().applyReset($input, value);
                        }
                        if (readonly === false) {
                            $input.removeAttr('readonly');
                            if ($input.data("tabindex") !== undefined) {
                                $input.attr("tabindex", $input.data("tabindex"));
                            }
                            else {
                                $input.removeAttr("tabindex");
                            }
                        }
                        else {
                            $input.attr('readonly', 'readonly');
                            $input.attr("tabindex", -1);
                        }
                        $input.attr('placeholder', placeholder);
                        $input.css('text-align', textalign);
                        if (width.trim() != "")
                            $input.width(width);
                        // Format value
                        var formatted = $input.ntsError('hasError') ? value() : this.getFormatter(data).format(value());
                        $input.val(formatted);
                        //            $input.trigger("validate");
                    };
                    EditorProcessor.prototype.getDefaultOption = function () {
                        return {};
                    };
                    EditorProcessor.prototype.getFormatter = function (data) {
                        return new uk.format.NoFormatter();
                    };
                    EditorProcessor.prototype.getValidator = function (data) {
                        return new validation.NoValidator();
                    };
                    return EditorProcessor;
                }());
                /**
                 * TextEditor Processor
                 */
                var TextEditorProcessor = (function (_super) {
                    __extends(TextEditorProcessor, _super);
                    function TextEditorProcessor() {
                        _super.apply(this, arguments);
                    }
                    TextEditorProcessor.prototype.init = function ($input, data) {
                        var self = this;
                        var value = data.value;
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var constraint = validation.getConstraint(constraintName);
                        var readonly = (data.readonly !== undefined) ? ko.unwrap(data.readonly) : false;
                        var characterWidth = 9;
                        if (constraint && constraint.maxLength && !$input.is("textarea")) {
                            var autoWidth = constraint.maxLength * characterWidth;
                            $input.width(autoWidth);
                        }
                        $input.addClass('nts-editor nts-input');
                        $input.wrap("<span class= 'nts-editor-wrapped ntsControl'/>");
                        setEnterHandlerIfRequired($input, data);
                        $input.on("keyup", function (e) {
                            var code = e.keyCode || e.which;
                            if (!readonly && code.toString() !== '9') {
                                var validator = self.getValidator(data);
                                var newText = $input.val();
                                var result = validator.validate(newText, { isCheckExpression: true });
                                $input.ntsError('clear');
                                if (!result.isValid) {
                                    $input.ntsError('set', result.errorMessage, result.errorCode);
                                }
                            }
                        });
                        // Format on blur
                        $input.blur(function () {
                            if (!$input.attr('readonly')) {
                                var validator = self.getValidator(data);
                                var newText = $input.val();
                                var result = validator.validate(newText, { isCheckExpression: true });
                                if (!result.isValid) {
                                    var oldError = $("#companyCode").ntsError('getError');
                                    if (nts.uk.util.isNullOrUndefined(oldError)) {
                                        $input.ntsError('set', result.errorMessage, result.errorCode);
                                    }
                                    else {
                                        if (oldError.errorCode !== result.errorCode) {
                                            $input.ntsError('clear');
                                            setTimeout(function () {
                                                $input.ntsError('set', result.errorMessage, result.errorCode);
                                            }, 10);
                                        }
                                    }
                                }
                                else {
                                    $input.ntsError('clear');
                                }
                            }
                        });
                        $input.on("change", function (e) {
                            if (!$input.attr('readonly')) {
                                var validator = self.getValidator(data);
                                var newText = $input.val();
                                var result = validator.validate(newText, { isCheckExpression: true });
                                $input.ntsError('clear');
                                if (result.isValid) {
                                    if (value() === result.parsedValue) {
                                        $input.val(result.parsedValue);
                                    }
                                    else {
                                        value(result.parsedValue);
                                    }
                                }
                                else {
                                    $input.ntsError('set', result.errorMessage, result.errorCode);
                                    value(newText);
                                }
                            }
                        });
                        $input.on('validate', (function (e) {
                            var validator = self.getValidator(data);
                            var newText = $input.val();
                            var result = validator.validate(newText);
                            $input.ntsError('clear');
                            if (!result.isValid) {
                                $input.ntsError('set', result.errorMessage, result.errorCode);
                            }
                        }));
                        new nts.uk.util.value.DefaultValue().onReset($input, data.value);
                        var tabIndex = $input.attr("tabindex");
                        $input.data("tabindex", tabIndex);
                    };
                    TextEditorProcessor.prototype.update = function ($input, data) {
                        _super.prototype.update.call(this, $input, data);
                        var textmode = this.editorOption.textmode;
                        $input.attr('type', textmode);
                        if (!$input.ntsError('hasError') && data.value() !== $input.val()) {
                            data.value($input.val());
                        }
                    };
                    TextEditorProcessor.prototype.getDefaultOption = function () {
                        return new nts.uk.ui.option.TextEditorOption();
                    };
                    TextEditorProcessor.prototype.getFormatter = function (data) {
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var constraint = validation.getConstraint(constraintName);
                        this.editorOption.autofill = (constraint && constraint.isZeroPadded) ? constraint.isZeroPadded : this.editorOption.autofill;
                        return new uk.text.StringFormatter({ constraintName: constraintName, constraint: constraint, editorOption: this.editorOption });
                    };
                    TextEditorProcessor.prototype.getValidator = function (data) {
                        var name = data.name !== undefined ? ko.unwrap(data.name) : "";
                        name = nts.uk.resource.getControlName(name);
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        if (data.constraint == "WorkplaceCode") {
                            return new validation.WorkplaceCodeValidator(name, constraintName, { required: required });
                        }
                        if (data.constraint == "DepartmentCode") {
                            return new validation.DepartmentCodeValidator(name, constraintName, { required: required });
                        }
                        if (data.constraint == "PostCode") {
                            return new validation.PostCodeValidator(name, constraintName, { required: required });
                        }
                        if (data.constraint == "PunchCardNo") {
                            return new validation.PunchCardNoValidator(name, constraintName, { required: required });
                        }
                        return new validation.StringValidator(name, constraintName, { required: required });
                    };
                    return TextEditorProcessor;
                }(EditorProcessor));
                /**
                 * MultilineEditor Processor
                 */
                var MultilineEditorProcessor = (function (_super) {
                    __extends(MultilineEditorProcessor, _super);
                    function MultilineEditorProcessor() {
                        _super.apply(this, arguments);
                    }
                    MultilineEditorProcessor.prototype.update = function ($input, data) {
                        _super.prototype.update.call(this, $input, data);
                        var resizeable = this.editorOption.resizeable;
                        $input.css('resize', (resizeable) ? "both" : "none");
                    };
                    MultilineEditorProcessor.prototype.getDefaultOption = function () {
                        return new ui.option.MultilineEditorOption();
                    };
                    MultilineEditorProcessor.prototype.getFormatter = function (data) {
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var constraint = validation.getConstraint(constraintName);
                        return new uk.text.StringFormatter({ constraintName: constraintName, constraint: constraint, editorOption: this.editorOption });
                    };
                    MultilineEditorProcessor.prototype.getValidator = function (data) {
                        var name = data.name !== undefined ? ko.unwrap(data.name) : "";
                        name = nts.uk.resource.getControlName(name);
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        return new validation.StringValidator(name, constraintName, { required: required });
                    };
                    return MultilineEditorProcessor;
                }(EditorProcessor));
                /**
                 * NumberEditor Processor
                 */
                var NumberEditorProcessor = (function (_super) {
                    __extends(NumberEditorProcessor, _super);
                    function NumberEditorProcessor() {
                        _super.apply(this, arguments);
                    }
                    NumberEditorProcessor.prototype.init = function ($input, data) {
                        _super.prototype.init.call(this, $input, data);
                        $input.focus(function () {
                            if (!$input.attr('readonly')) {
                                var selectionType = document.getSelection().type;
                                // Remove separator (comma)
                                $input.val(data.value());
                                // If focusing is caused by Tab key, select text
                                // this code is needed because removing separator deselects.
                                if (selectionType === 'Range') {
                                    $input.select();
                                }
                            }
                        });
                    };
                    NumberEditorProcessor.prototype.update = function ($input, data) {
                        _super.prototype.update.call(this, $input, data);
                        var $parent = $input.parent();
                        var width = this.editorOption.width;
                        var parentTag = $parent.parent().prop("tagName").toLowerCase();
                        if (parentTag === "td" || parentTag === "th" || parentTag === "a" || width === "100%") {
                            $parent.css({ 'width': '100%' });
                        }
                        if (this.editorOption.currencyformat !== undefined && this.editorOption.currencyformat !== null) {
                            $parent.addClass("symbol").addClass(this.editorOption.currencyposition === 'left' ? 'symbol-left' : 'symbol-right');
                            var format = this.editorOption.currencyformat === "JPY" ? "\u00A5" : '$';
                            $parent.attr("data-content", format);
                        }
                        else if (!nts.uk.util.isNullOrEmpty(this.editorOption.unitID)) {
                            var unit = uk.text.getNumberUnit(this.editorOption.unitID);
                            this.editorOption.symbolChar = unit.unitText;
                            this.editorOption.symbolPosition = unit.position;
                            this.setupUnit($input, width);
                        }
                        else if (!nts.uk.util.isNullOrEmpty(this.editorOption.symbolChar) && !nts.uk.util.isNullOrEmpty(this.editorOption.symbolPosition)) {
                            this.setupUnit($input, width);
                        }
                        if (!nts.uk.util.isNullOrEmpty(this.editorOption.defaultValue)
                            && nts.uk.util.isNullOrEmpty(data.value())) {
                            data.value(this.editorOption.defaultValue);
                        }
                    };
                    NumberEditorProcessor.prototype.setupUnit = function ($input, width) {
                        var $parent = $input.parent();
                        var padding = nts.uk.text.countHalf(this.editorOption.symbolChar) * 8;
                        if (padding < 20) {
                            padding = 20;
                        }
                        $parent.addClass("symbol").addClass(this.editorOption.symbolPosition === 'right' ? 'symbol-right' : 'symbol-left');
                        $parent.attr("data-content", this.editorOption.symbolChar);
                        var css = this.editorOption.symbolPosition === 'right' ? { "padding-right": padding + "px" } : { "padding-left": padding + "px" };
                        $input.css(css);
                        if (width.trim() != "") {
                            $input.innerWidth(parseInt(width) - 2); //　-　$input.innerWidth() + $input.width()) - ($input.outerWidth() - $input.innerWidth());
                        }
                    };
                    NumberEditorProcessor.prototype.getDefaultOption = function () {
                        return new nts.uk.ui.option.NumberEditorOption();
                    };
                    NumberEditorProcessor.prototype.getFormatter = function (data) {
                        return new uk.text.NumberFormatter({ option: this.editorOption });
                    };
                    NumberEditorProcessor.prototype.getValidator = function (data) {
                        var name = data.name !== undefined ? ko.unwrap(data.name) : "";
                        name = nts.uk.resource.getControlName(name);
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        this.editorOption['required'] = required;
                        return new validation.NumberValidator(name, constraintName, this.editorOption);
                    };
                    return NumberEditorProcessor;
                }(EditorProcessor));
                /**
                 * TimeEditor Processor
                 */
                var TimeEditorProcessor = (function (_super) {
                    __extends(TimeEditorProcessor, _super);
                    function TimeEditorProcessor() {
                        _super.apply(this, arguments);
                    }
                    TimeEditorProcessor.prototype.update = function ($input, data) {
                        _super.prototype.update.call(this, $input, data);
                        var option = (data.option !== undefined) ? ko.mapping.toJS(data.option) : this.getDefaultOption();
                        var width = option.width;
                        var $parent = $input.parent();
                        var parentTag = $parent.parent().prop("tagName").toLowerCase();
                        if (parentTag === "td" || parentTag === "th" || parentTag === "a" || width === "100%") {
                            $parent.css({ 'width': '100%' });
                        }
                        if (!nts.uk.util.isNullOrEmpty(data.mode) && (data.mode === "year" || data.mode === "fiscal")) {
                            var symbolText = data.mode === "year" ? nts.uk.text.getNumberUnit("YEARS") : nts.uk.text.getNumberUnit("FIS_YEAR");
                            $parent.addClass("symbol").addClass('symbol-right');
                            $parent.attr("data-content", symbolText.unitText);
                            var css = data.mode === "year" ? { "padding-right": "20px" } : { "padding-right": "35px" };
                            $input.css(css);
                        }
                        if (!nts.uk.util.isNullOrEmpty(option.defaultValue)
                            && nts.uk.util.isNullOrEmpty(data.value())) {
                            data.value(option.defaultValue);
                        }
                    };
                    TimeEditorProcessor.prototype.getDefaultOption = function () {
                        return new nts.uk.ui.option.TimeEditorOption();
                    };
                    TimeEditorProcessor.prototype.getFormatter = function (data) {
                        var option = (data.option !== undefined) ? ko.mapping.toJS(data.option) : this.getDefaultOption();
                        var inputFormat = (data.inputFormat !== undefined) ? ko.unwrap(data.inputFormat) : option.inputFormat;
                        return new uk.text.TimeFormatter({ inputFormat: inputFormat });
                    };
                    TimeEditorProcessor.prototype.getValidator = function (data) {
                        var name = data.name !== undefined ? ko.unwrap(data.name) : "";
                        name = nts.uk.resource.getControlName(name);
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var option = (data.option !== undefined) ? ko.mapping.toJS(data.option) : this.getDefaultOption();
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        var inputFormat = (data.inputFormat !== undefined) ? ko.unwrap(data.inputFormat) : option.inputFormat;
                        var mode = (data.mode !== undefined) ? ko.unwrap(data.mode) : "";
                        var validateOption = $.extend({ required: required, outputFormat: inputFormat, mode: mode }, option);
                        return new validation.TimeValidator(name, constraintName, validateOption);
                    };
                    return TimeEditorProcessor;
                }(EditorProcessor));
                /**
                 * TimeWithDayAttrEditor Processor
                 */
                var TimeWithDayAttrEditorProcessor = (function (_super) {
                    __extends(TimeWithDayAttrEditorProcessor, _super);
                    function TimeWithDayAttrEditorProcessor() {
                        _super.apply(this, arguments);
                    }
                    TimeWithDayAttrEditorProcessor.prototype.init = function ($input, data) {
                        _super.prototype.init.call(this, $input, data);
                        $input.focus(function () {
                            if ($input.attr('readonly')) {
                                return;
                            }
                            if ($input.ntsError('hasError')) {
                                return;
                            }
                            var selectionTypeOnFocusing = document.getSelection().type;
                            if (!nts.uk.util.isNullOrEmpty(data.value())) {
                                var timeWithDayAttr = uk.time.minutesBased.clock.dayattr.create(data.value());
                                $input.val(timeWithDayAttr.shortText);
                            }
                            else {
                                $input.val("");
                            }
                            // If focusing is caused by Tab key, select text
                            // this code is needed because removing separator deselects.
                            if (selectionTypeOnFocusing === 'Range') {
                                $input.select();
                            }
                        });
                    };
                    TimeWithDayAttrEditorProcessor.prototype.getDefaultOption = function () {
                        return new nts.uk.ui.option.TimeWithDayAttrEditorOption();
                    };
                    TimeWithDayAttrEditorProcessor.prototype.getFormatter = function (data) {
                        var option = (data.option !== undefined) ? ko.mapping.toJS(data.option) : this.getDefaultOption();
                        return new uk.text.TimeWithDayFormatter(option);
                    };
                    TimeWithDayAttrEditorProcessor.prototype.getValidator = function (data) {
                        //TODO: 
                        var name = data.name !== undefined ? ko.unwrap(data.name) : "";
                        name = nts.uk.resource.getControlName(name);
                        var constraintName = (data.constraint !== undefined) ? ko.unwrap(data.constraint) : "";
                        var required = (data.required !== undefined) ? ko.unwrap(data.required) : false;
                        return new validation.TimeWithDayValidator(name, constraintName, { required: required });
                    };
                    return TimeWithDayAttrEditorProcessor;
                }(EditorProcessor));
                /**
                 * Base Editor
                 */
                var NtsEditorBindingHandler = (function () {
                    function NtsEditorBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new EditorProcessor().init($(element), valueAccessor());
                    };
                    /**
                     * Update
                     */
                    NtsEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new EditorProcessor().update($(element), valueAccessor());
                    };
                    return NtsEditorBindingHandler;
                }());
                /**
                 * TextEditor
                 */
                var NtsTextEditorBindingHandler = (function (_super) {
                    __extends(NtsTextEditorBindingHandler, _super);
                    function NtsTextEditorBindingHandler() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * Init.
                     */
                    NtsTextEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new TextEditorProcessor().init($(element), valueAccessor());
                    };
                    /**
                     * Update
                     */
                    NtsTextEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new TextEditorProcessor().update($(element), valueAccessor());
                    };
                    return NtsTextEditorBindingHandler;
                }(NtsEditorBindingHandler));
                /**
                 * NumberEditor
                 */
                var NtsNumberEditorBindingHandler = (function () {
                    function NtsNumberEditorBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsNumberEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new NumberEditorProcessor().init($(element), valueAccessor());
                    };
                    /**
                     * Update
                     */
                    NtsNumberEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new NumberEditorProcessor().update($(element), valueAccessor());
                    };
                    return NtsNumberEditorBindingHandler;
                }());
                /**
                 * TimeEditor
                 */
                var NtsTimeEditorBindingHandler = (function () {
                    function NtsTimeEditorBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsTimeEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new TimeEditorProcessor().init($(element), valueAccessor());
                    };
                    /**
                     * Update
                     */
                    NtsTimeEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        new TimeEditorProcessor().update($(element), valueAccessor());
                    };
                    return NtsTimeEditorBindingHandler;
                }());
                /**
                 * MultilineEditor
                 */
                var NtsMultilineEditorBindingHandler = (function (_super) {
                    __extends(NtsMultilineEditorBindingHandler, _super);
                    function NtsMultilineEditorBindingHandler() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * Init.
                     */
                    NtsMultilineEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new MultilineEditorProcessor().init($(element), valueAccessor());
                    };
                    /**
                     * Update
                     */
                    NtsMultilineEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new MultilineEditorProcessor().update($(element), valueAccessor());
                    };
                    return NtsMultilineEditorBindingHandler;
                }(NtsEditorBindingHandler));
                /**
                 * TimeWithDayAttr
                 */
                var NtsTimeWithDayAttrEditorBindingHandler = (function (_super) {
                    __extends(NtsTimeWithDayAttrEditorBindingHandler, _super);
                    function NtsTimeWithDayAttrEditorBindingHandler() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * Init.
                     */
                    NtsTimeWithDayAttrEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new TimeWithDayAttrEditorProcessor().init($(element), valueAccessor());
                    };
                    /**
                     * Update
                     */
                    NtsTimeWithDayAttrEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        new TimeWithDayAttrEditorProcessor().update($(element), valueAccessor());
                    };
                    return NtsTimeWithDayAttrEditorBindingHandler;
                }(NtsEditorBindingHandler));
                function setEnterHandlerIfRequired($input, data) {
                    var handlesEnterKey = (typeof data.enterkey === "function");
                    var onEnterKey = handlesEnterKey ? data.enterkey : $.noop;
                    if (handlesEnterKey) {
                        $input.addClass("enterkey")
                            .onkey("down", uk.KeyCodes.Enter, function (e) {
                            $input.change();
                            onEnterKey.call(ko.dataFor(e.target), e);
                        });
                    }
                }
                ko.bindingHandlers['ntsTextEditor'] = new NtsTextEditorBindingHandler();
                ko.bindingHandlers['ntsNumberEditor'] = new NtsNumberEditorBindingHandler();
                ko.bindingHandlers['ntsTimeEditor'] = new NtsTimeEditorBindingHandler();
                ko.bindingHandlers['ntsMultilineEditor'] = new NtsMultilineEditorBindingHandler();
                ko.bindingHandlers['ntsTimeWithDayEditor'] = new NtsTimeWithDayAttrEditorBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * FormLabel
                 */
                var NtsFormLabelBindingHandler = (function () {
                    function NtsFormLabelBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsFormLabelBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var primitiveValue = ko.unwrap(data.constraint);
                        var isRequired = ko.unwrap(data.required) === true;
                        var isInline = ko.unwrap(data.inline) === true;
                        var isEnable = ko.unwrap(data.enable) !== false;
                        var cssClass = data.cssClass !== undefined ? ko.unwrap(data.cssClass) : "";
                        var $formLabel = $(element).addClass('form-label');
                        $('<label/>').html($formLabel.html()).appendTo($formLabel.empty());
                        if (!isEnable) {
                            $formLabel.addClass('disabled');
                        }
                        else {
                            $formLabel.removeClass('disabled');
                        }
                        if (isRequired) {
                            $formLabel.addClass('required');
                        }
                        if (primitiveValue !== undefined) {
                            $formLabel.addClass(isInline ? 'inline' : 'broken');
                            var constraintText = uk.util.getConstraintMes(primitiveValue);
                            $('<i/>').text(constraintText).appendTo($formLabel);
                        }
                    };
                    /**
                     * Update
                     */
                    NtsFormLabelBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var text = (data.text !== undefined) ? ko.unwrap(data.text) : $(element).find('label').html();
                        var cssClass = data.cssClass !== undefined ? ko.unwrap(data.cssClass) : "";
                        var container = $(element);
                        var $label = container.find("label");
                        $label.removeClass($label.data("cssClass")).addClass(cssClass).html(text);
                        $label.data("cssClass", cssClass);
                    };
                    return NtsFormLabelBindingHandler;
                }());
                ko.bindingHandlers['ntsFormLabel'] = new NtsFormLabelBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_5) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * GridList binding handler
                 */
                var NtsGridListBindingHandler = (function () {
                    function NtsGridListBindingHandler() {
                    }
                    NtsGridListBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var HEADER_HEIGHT = 27;
                        var ROW_HEIGHT = 23;
                        var DIFF_NUMBER = 2;
                        var $grid = $(element);
                        var gridId = $grid.attr('id');
                        if (nts.uk.util.isNullOrUndefined(gridId)) {
                            throw new Error('the element NtsGridList must have id attribute.');
                        }
                        var data = valueAccessor();
                        var optionsValue = data.primaryKey !== undefined ? data.primaryKey : data.optionsValue;
                        var options = ko.unwrap(data.dataSource !== undefined ? data.dataSource : data.options);
                        var deleteOptions = ko.unwrap(data.deleteOptions);
                        var observableColumns = ko.unwrap(data.columns);
                        var showNumbering = ko.unwrap(data.showNumbering) === true ? true : false;
                        var enable = ko.unwrap(data.enable);
                        var value = ko.unwrap(data.value);
                        var rows = ko.unwrap(data.rows);
                        $grid.data("init", true);
                        if (data.multiple) {
                            ROW_HEIGHT = 24;
                            // Internet Explorer 6-11
                            var isIE = false || !!document.documentMode;
                            // Edge 20+
                            var isEdge = !isIE && !!window.StyleMedia;
                            if (isIE || isEdge) {
                                DIFF_NUMBER = -2;
                            }
                        }
                        var features = [];
                        features.push({ name: 'Selection', multipleSelection: data.multiple });
                        if (data.multiple || showNumbering) {
                            features.push({ name: 'RowSelectors', enableCheckBoxes: data.multiple, enableRowNumbering: showNumbering });
                        }
                        var tabIndex = $grid.attr("tabindex");
                        $grid.data("tabindex", nts.uk.util.isNullOrEmpty(tabIndex) ? "0" : tabIndex);
                        $grid.attr("tabindex", "-1");
                        var gridFeatures = ko.unwrap(data.features);
                        var iggridColumns = _.map(observableColumns, function (c) {
                            c["key"] = c["key"] === undefined ? c["prop"] : c["key"];
                            c["dataType"] = 'string';
                            if (c["controlType"] === "switch") {
                                var switchF = _.find(gridFeatures, function (s) {
                                    return s["name"] === "Switch";
                                });
                                if (!uk.util.isNullOrUndefined(switchF)) {
                                    features.push({ name: 'Updating', enableAddRow: false, enableDeleteRow: false, editMode: 'none' });
                                    var switchOptions_1 = ko.unwrap(switchF['options']);
                                    var switchValue_1 = switchF['optionsValue'];
                                    var switchText_1 = switchF['optionsText'];
                                    c["formatter"] = function createButton(val, row) {
                                        var result = $('<div class="ntsControl"/>');
                                        result.attr("data-value", val);
                                        _.forEach(switchOptions_1, function (opt) {
                                            var value = opt[switchValue_1];
                                            var text = opt[switchText_1];
                                            var btn = $('<button class="nts-switch-button" tabindex="-1"/>').text(text);
                                            if ($grid.data("enable") === false) {
                                                btn.attr("disabled", "disabled");
                                            }
                                            btn.attr('data-value', value);
                                            if (val == value) {
                                                btn.addClass('selected');
                                            }
                                            btn.appendTo(result);
                                        });
                                        return result[0].outerHTML;
                                    };
                                    $grid.on("click", ".nts-switch-button", function (evt, ui) {
                                        var $element = $(this);
                                        var selectedValue = $element.attr('data-value');
                                        var $tr = $element.closest("tr");
                                        $grid.ntsGridListFeature('switch', 'setValue', $tr.attr("data-id"), c["key"], selectedValue);
                                    });
                                    ROW_HEIGHT = 30;
                                }
                            }
                            return c;
                        });
                        var isDeleteButton = !uk.util.isNullOrUndefined(deleteOptions) && !uk.util.isNullOrUndefined(deleteOptions.deleteField)
                            && deleteOptions.visible === true;
                        var height = data.height;
                        if (!nts.uk.util.isNullOrEmpty(rows)) {
                            if (isDeleteButton) {
                                ROW_HEIGHT = 30;
                            }
                            height = rows * ROW_HEIGHT + HEADER_HEIGHT - DIFF_NUMBER;
                            var colSettings_1 = [];
                            _.forEach(iggridColumns, function (c) {
                                if (c["hidden"] === undefined || c["hidden"] === false) {
                                    colSettings_1.push({ columnKey: c["key"], allowTooltips: true });
                                    if (nts.uk.util.isNullOrEmpty(c["columnCssClass"])) {
                                        c["columnCssClass"] = "text-limited";
                                    }
                                    else {
                                        c["columnCssClass"] += " text-limited";
                                    }
                                }
                            });
                            features.push({
                                name: "Tooltips",
                                columnSettings: colSettings_1,
                                visibility: "overflow",
                                showDelay: 200,
                                hideDelay: 200
                            });
                            $grid.addClass("row-limited");
                        }
                        $grid.data("height", height);
                        $grid.igGrid({
                            width: data.width,
                            height: height,
                            primaryKey: optionsValue,
                            columns: iggridColumns,
                            virtualization: true,
                            virtualizationMode: 'continuous',
                            features: features,
                            tabIndex: -1
                        });
                        if (data.itemDraggable) {
                            new SwapHandler().setModel(new GridSwapList($grid, optionsValue)).enableDragDrop(data.dataSource);
                        }
                        if (isDeleteButton) {
                            var sources = (data.dataSource !== undefined ? data.dataSource : data.options);
                            $grid.ntsGridList("setupDeleteButton", {
                                deleteField: deleteOptions.deleteField,
                                sourceTarget: sources
                            });
                        }
                        $grid.ntsGridList('setupSelecting');
                        if (data.multiple) {
                            $grid.bind('iggridrowselectorscheckboxstatechanging', function (eventObject) {
                                return (String($grid.data("enable")) === "false") ? false : true;
                            });
                        }
                        $grid.bind('iggridselectionrowselectionchanging', function (eventObject) {
                            return (String($grid.data("enable")) === "false") ? false : true;
                        });
                        $grid.bind('selectionchanged', function () {
                            $grid.data("ui-changed", true);
                            if (data.multiple) {
                                var selected = $grid.ntsGridList('getSelected');
                                if (!nts.uk.util.isNullOrEmpty(selected)) {
                                    data.value(_.map(selected, function (s) { return s.id; }));
                                }
                                else {
                                    data.value([]);
                                }
                            }
                            else {
                                var selected = $grid.ntsGridList('getSelected');
                                if (!nts.uk.util.isNullOrEmpty(selected)) {
                                    data.value(selected.id);
                                }
                                else {
                                    data.value('');
                                }
                            }
                        });
                        $grid.setupSearchScroll("igGrid", true);
                        $grid.ntsGridList("setupScrollWhenBinding");
                        $grid.bind("switchvaluechanged", function (evt, dataX) {
                            setTimeout(function () {
                                var source = _.cloneDeep(data.dataSource !== undefined ? data.dataSource() : data.options());
                                _.forEach(source, function (o) {
                                    if (o[optionsValue] === dataX.rowKey) {
                                        o[dataX.columnKey] = dataX.value;
                                        return true;
                                    }
                                });
                                $grid.data("ui-changed", true);
                                if (data.dataSource !== undefined) {
                                    data.dataSource(source);
                                }
                                else {
                                    data.options(source);
                                }
                            }, 100);
                        });
                    };
                    NtsGridListBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var $grid = $(element);
                        var data = valueAccessor();
                        var enable = ko.unwrap(data.enable);
                        var optionsValue = data.primaryKey !== undefined ? data.primaryKey : data.optionsValue;
                        var gridSource = $grid.igGrid('option', 'dataSource');
                        var sources = (data.dataSource !== undefined ? data.dataSource() : data.options());
                        if ($grid.data("enable") !== enable) {
                            if (!enable) {
                                $grid.ntsGridList('unsetupSelecting');
                                $grid.addClass("disabled");
                            }
                            else {
                                $grid.ntsGridList('setupSelecting');
                                $grid.removeClass("disabled");
                            }
                        }
                        $grid.data("enable", enable);
                        if ($grid.data("ui-changed") !== true) {
                            var currentSources = sources.slice();
                            var observableColumns = _.filter(ko.unwrap(data.columns), function (c) {
                                c["key"] = c["key"] === undefined ? c["prop"] : c["key"];
                                return c["isDateColumn"] !== undefined && c["isDateColumn"] !== null && c["isDateColumn"] === true;
                            });
                            if (!nts.uk.util.isNullOrEmpty(observableColumns)) {
                                _.forEach(currentSources, function (s) {
                                    _.forEach(observableColumns, function (c) {
                                        var key = c["key"] === undefined ? c["prop"] : c["key"];
                                        s[key] = moment(s[key]).format(c["format"]);
                                    });
                                });
                            }
                            if (!_.isEqual(currentSources, gridSource)) {
                                $grid.igGrid('option', 'dataSource', _.cloneDeep(currentSources));
                                $grid.igGrid("dataBind");
                            }
                        }
                        //            else if(String($grid.attr("filtered")) === "true"){
                        //                let filteredSource = [];
                        //                _.forEach(gridSource, function(item){
                        //                    let itemX = _.find(sources, function (s){
                        //                        return s[optionsValue] === item[optionsValue];        
                        //                    });
                        //                    if(!nts.uk.util.isNullOrUndefined(itemX)){ 
                        //                        filteredSource.push(itemX);
                        //                    }     
                        //                });     
                        //                if(!_.isEqual(filteredSource, gridSource)){
                        //                    $grid.igGrid('option', 'dataSource', _.cloneDeep(filteredSource));
                        //                    $grid.igGrid("dataBind");    
                        //                }
                        //            }
                        var currentSelectedItems = $grid.ntsGridList('getSelected');
                        var isEqual = _.isEqualWith(currentSelectedItems, data.value(), function (current, newVal) {
                            if ((current === undefined && newVal === undefined) || (current !== undefined && current.id === newVal)) {
                                return true;
                            }
                        });
                        if (!isEqual) {
                            _.defer(function () { $grid.trigger("selectChange"); });
                            $grid.ntsGridList('setSelected', data.value());
                        }
                        $grid.data("ui-changed", false);
                        $grid.closest('.ui-iggrid').addClass('nts-gridlist').height($grid.data("height")).attr("tabindex", $grid.data("tabindex"));
                    };
                    return NtsGridListBindingHandler;
                }());
                ko.bindingHandlers['ntsGridList'] = new NtsGridListBindingHandler();
                var SwapHandler = (function () {
                    function SwapHandler() {
                    }
                    SwapHandler.prototype.setModel = function (model) {
                        this.model = model;
                        return this;
                    };
                    Object.defineProperty(SwapHandler.prototype, "Model", {
                        get: function () {
                            return this.model;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SwapHandler.prototype.handle = function (value) {
                        var self = this;
                        var model = this.model;
                        var options = {
                            items: "tbody > tr",
                            containment: this.model.$grid,
                            cursor: "move",
                            connectWith: this.model.$grid,
                            placeholder: "ui-state-highlight",
                            helper: this._createHelper,
                            appendTo: this.model.$grid,
                            start: function (evt, ui) {
                                self.model.transportBuilder.setList(self.model.$grid.igGrid("option", "dataSource"));
                            },
                            beforeStop: function (evt, ui) {
                                self._beforeStop.call(this, model, evt, ui);
                            },
                            update: function (evt, ui) {
                                self._update.call(this, model, evt, ui, value);
                            }
                        };
                        this.model.$grid.sortable(options).disableSelection();
                    };
                    SwapHandler.prototype._createHelper = function (evt, ui) {
                        var selectedRowElms = $(evt.currentTarget).igGrid("selectedRows");
                        // Set the orders same as on grid
                        selectedRowElms.sort(function (one, two) {
                            return one.index - two.index;
                        });
                        var $helper;
                        if ($(evt.currentTarget).hasClass("multiple-drag") && selectedRowElms.length > 1) {
                            $helper = $("<div><table><tbody></tbody></table></div>").addClass("select-drag");
                            var rowId = ui.data("row-idx");
                            var selectedItems = selectedRowElms.map(function (elm) { return elm.element; });
                            var height = 0;
                            $.each(selectedItems, function () {
                                $helper.find("tbody").append($(this).clone());
                                height += $(this).outerHeight();
                                if (rowId !== this.data("row-idx"))
                                    $(this).hide();
                            });
                            $helper.height(height);
                            $helper.find("tr").first().children().each(function (idx) {
                                $(this).width(ui.children().eq(idx).width());
                            });
                        }
                        else {
                            $helper = ui.clone();
                            $helper.children().each(function (idx) {
                                $(this).width(ui.children().eq(idx).width());
                            });
                        }
                        return $helper[0];
                    };
                    SwapHandler.prototype._beforeStop = function (model, evt, ui) {
                        model.transportBuilder.toAdjacent(model.neighbor(ui)).target(model.target(ui));
                        // In case of multiple selections
                        if (ui.helper.hasClass("select-drag")) {
                            var rowsInHelper = ui.helper.find("tr");
                            var rows = rowsInHelper.toArray();
                            $(this).sortable("cancel");
                            for (var idx in rows) {
                                model.$grid.find("tbody").children().eq($(rows[idx]).data("row-idx")).show();
                            }
                        }
                    };
                    SwapHandler.prototype._update = function (model, evt, ui, value) {
                        if (ui.item.closest("table").length === 0)
                            return;
                        model.transportBuilder.update();
                        model.$grid.igGrid("option", "dataSource", model.transportBuilder.getList());
                        value(model.transportBuilder.getList());
                        setTimeout(function () { model.dropDone(); }, 0);
                    };
                    SwapHandler.prototype.enableDragDrop = function (value) {
                        this.model.enableDrag(this, value, this.handle);
                    };
                    return SwapHandler;
                }());
                var SwapModel = (function () {
                    function SwapModel($grid, primaryKey) {
                        this.$grid = $grid;
                        this.primaryKey = primaryKey;
                        this.transportBuilder = new ListItemTransporter().primary(this.primaryKey);
                    }
                    return SwapModel;
                }());
                var GridSwapList = (function (_super) {
                    __extends(GridSwapList, _super);
                    function GridSwapList() {
                        _super.apply(this, arguments);
                    }
                    GridSwapList.prototype.target = function (opts) {
                        if (opts.helper !== undefined && opts.helper.hasClass("select-drag")) {
                            return opts.helper.find("tr").map(function () {
                                return $(this).data("id");
                            });
                        }
                        return [opts.item.data("id")];
                    };
                    GridSwapList.prototype.neighbor = function (opts) {
                        return opts.item.prev().length === 0 ? "ceil" : opts.item.prev().data("id");
                    };
                    GridSwapList.prototype.dropDone = function () {
                        var self = this;
                        self.$grid.igGridSelection("clearSelection");
                        setTimeout(function () {
                            self.$grid.igGrid("virtualScrollTo", self.transportBuilder.incomeIndex);
                        }, 0);
                    };
                    GridSwapList.prototype.enableDrag = function (ctx, value, cb) {
                        var self = this;
                        this.$grid.on("iggridrowsrendered", function (evt, ui) {
                            cb.call(ctx, value);
                        });
                    };
                    return GridSwapList;
                }(SwapModel));
                var ListItemTransporter = (function () {
                    function ListItemTransporter() {
                    }
                    ListItemTransporter.prototype.primary = function (primaryKey) {
                        this.primaryKey = primaryKey;
                        return this;
                    };
                    ListItemTransporter.prototype.target = function (targetIds) {
                        this.targetIds = targetIds;
                        return this;
                    };
                    ListItemTransporter.prototype.toAdjacent = function (adjId) {
                        if (adjId === null)
                            adjId = "ceil";
                        this.adjacentIncomeId = adjId;
                        return this;
                    };
                    ListItemTransporter.prototype.indexOf = function (list, targetId) {
                        var _this = this;
                        return _.findIndex(list, function (elm) { return elm[_this.primaryKey].toString() === targetId.toString(); });
                    };
                    ListItemTransporter.prototype.update = function () {
                        for (var i = 0; i < this.targetIds.length; i++) {
                            this.outcomeIndex = this.indexOf(this.list, this.targetIds[i]);
                            if (this.outcomeIndex === -1)
                                return;
                            var target = this.list.splice(this.outcomeIndex, 1);
                            this.incomeIndex = this.indexOf(this.list, this.adjacentIncomeId) + 1;
                            if (this.incomeIndex === 0) {
                                if (this.adjacentIncomeId === "ceil")
                                    this.incomeIndex = 0;
                                else if (target !== undefined) {
                                    this.list.splice(this.outcomeIndex, 0, target[0]);
                                    return;
                                }
                            }
                            this.list.splice(this.incomeIndex + i, 0, target[0]);
                        }
                    };
                    ListItemTransporter.prototype.getList = function () {
                        return this.list;
                    };
                    ListItemTransporter.prototype.setList = function (list) {
                        this.list = list;
                    };
                    return ListItemTransporter;
                }());
            })(koExtentions = ui_5.koExtentions || (ui_5.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * ListBox binding handler
                 */
                var ListBoxBindingHandler = (function () {
                    /**
                     * Constructor.
                     */
                    function ListBoxBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    ListBoxBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        // Get options
                        var options = ko.unwrap(data.options);
                        // Get options value
                        var optionValue = ko.unwrap(data.primaryKey === undefined ? data.optionsValue : data.primaryKey);
                        var optionText = ko.unwrap(data.primaryText === undefined ? data.optionsText : data.primaryText);
                        var selectedValue = ko.unwrap(data.value);
                        var isMultiSelect = ko.unwrap(data.multiple);
                        var enable = ko.unwrap(data.enable);
                        //            var required = ko.unwrap(data.required) || false;
                        var columns = data.columns;
                        // Container
                        var $element = $(element);
                        var elementId = $element.addClass("listbox-wrapper").attr("id");
                        if (nts.uk.util.isNullOrUndefined($element.attr("tabindex"))) {
                            $element.attr("tabindex", "0");
                        }
                        $element.data("tabindex", $element.attr("tabindex"));
                        var gridId = elementId;
                        if (nts.uk.util.isNullOrUndefined(gridId)) {
                            gridId = nts.uk.util.randomId();
                        }
                        else {
                            gridId += "_grid";
                        }
                        $element.append("<table id='" + gridId + "' class='ntsListBox ntsControl'/>");
                        var container = $element.find("#" + gridId);
                        container.data("options", options.slice());
                        container.data("init", true);
                        container.data("enable", enable);
                        // Create changing event.
                        var changeEvent = new CustomEvent("selectionChange", {
                            detail: {},
                        });
                        container.data("selectionChange", changeEvent);
                        var features = [];
                        features.push({ name: 'Selection', multipleSelection: isMultiSelect });
                        var maxWidthCharacter = 15;
                        var gridFeatures = ko.unwrap(data.features);
                        var width = 0;
                        var iggridColumns = [];
                        if (nts.uk.util.isNullOrUndefined(columns)) {
                            iggridColumns.push({ "key": optionValue, "width": 10 * maxWidthCharacter + 20, "headerText": '', "columnCssClass": 'nts-column', 'hidden': true });
                            iggridColumns.push({ "key": optionText, "width": 10 * maxWidthCharacter + 20, "headerText": '', "columnCssClass": 'nts-column' });
                            width += 10 * maxWidthCharacter + 20;
                            container.data("fullValue", true);
                        }
                        else {
                            var isHaveKey_1 = false;
                            iggridColumns = _.map(columns, function (c) {
                                c["key"] = c["key"] === undefined ? c["prop"] : c["key"];
                                c["width"] = c["length"] * maxWidthCharacter + 20;
                                c["headerText"] = '';
                                c["columnCssClass"] = 'nts-column';
                                width += c["length"] * maxWidthCharacter + 20;
                                if (optionValue === c["key"]) {
                                    isHaveKey_1 = true;
                                }
                                return c;
                            });
                            if (!isHaveKey_1) {
                                iggridColumns.push({ "key": optionValue, "width": 10 * maxWidthCharacter + 20, "headerText": '', "columnCssClass": 'nts-column', 'hidden': true });
                            }
                        }
                        var gridHeaderHeight = 24;
                        container.igGrid({
                            width: width + "px",
                            height: (data.rows * 28 + gridHeaderHeight) + "px",
                            primaryKey: optionValue,
                            columns: iggridColumns,
                            virtualization: true,
                            virtualizationMode: 'continuous',
                            features: features,
                            tabIndex: -1
                        });
                        container.ntsGridList('setupSelecting');
                        container.bind('iggridselectionrowselectionchanging', function (evt, uiX) {
                            if (container.data("enable") === false) {
                                return false;
                            }
                            var itemSelected = uiX.row.id;
                            var dataSource = container.igGrid('option', "dataSource");
                            if (container.data("fullValue")) {
                                itemSelected = _.find(dataSource, function (d) {
                                    return d[optionValue].toString() === itemSelected.toString();
                                });
                            }
                            var changingEvent = new CustomEvent("selectionChanging", {
                                detail: itemSelected,
                                bubbles: true,
                                cancelable: false,
                            });
                            container.data("chaninged", true);
                            document.getElementById(elementId).dispatchEvent(changingEvent);
                        });
                        container.bind('selectionchanged', function () {
                            //                console.log(ui);
                            var itemSelected;
                            if (container.igGridSelection('option', 'multipleSelection')) {
                                var selected = container.ntsGridList('getSelected');
                                if (!nts.uk.util.isNullOrEmpty(selected)) {
                                    itemSelected = _.map(selected, function (s) { return s.id; });
                                }
                                else {
                                    itemSelected = [];
                                }
                            }
                            else {
                                var selected = container.ntsGridList('getSelected');
                                if (!nts.uk.util.isNullOrEmpty(selected)) {
                                    itemSelected = selected.id;
                                }
                                else {
                                    itemSelected = ('');
                                }
                            }
                            container.data("selected", itemSelected);
                            var isMultiOld = container.igGridSelection('option', 'multipleSelection');
                            if (container.data("fullValue")) {
                                var dataSource = container.igGrid('option', "dataSource");
                                if (isMultiOld) {
                                    itemSelected = _.filter(dataSource, function (d) {
                                        itemSelected.indexOf(d[optionValue].toString()) >= 0;
                                    });
                                }
                                else {
                                    itemSelected = _.find(dataSource, function (d) {
                                        return d[optionValue].toString() === itemSelected.toString();
                                    });
                                }
                            }
                            if (container.data("chaninged") !== true) {
                                var changingEvent = new CustomEvent("selectionChanging", {
                                    detail: itemSelected,
                                    bubbles: true,
                                    cancelable: false,
                                });
                                document.getElementById(container.attr('id')).dispatchEvent(changingEvent);
                            }
                            container.data("chaninged", false);
                            container.data("ui-changed", true);
                            if (!_.isEqual(itemSelected, data.value())) {
                                data.value(itemSelected);
                            }
                        });
                        container.setupSearchScroll("igGrid", true);
                        container.ntsGridList("setupScrollWhenBinding");
                        container.data("multiple", isMultiSelect);
                        $("#" + gridId + "_container").find("#" + gridId + "_headers").closest("tr").hide();
                        $("#" + gridId + "_container").height($("#" + gridId + "_container").height() - gridHeaderHeight);
                    };
                    /**
                     * Update
                     */
                    ListBoxBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        // Get options.
                        var sources = (data.dataSource !== undefined ? data.dataSource() : data.options());
                        // Get options value.
                        var optionValue = ko.unwrap(data.primaryKey === undefined ? data.optionsValue : data.primaryKey);
                        var optionText = ko.unwrap(data.primaryText === undefined ? data.optionsText : data.primaryText);
                        var selectedValue = ko.unwrap(data.value);
                        var isMultiSelect = ko.unwrap(data.multiple);
                        var enable = ko.unwrap(data.enable);
                        var columns = data.columns;
                        var rows = data.rows;
                        // Container.
                        var container = $(element).find(".ntsListBox");
                        var currentSource = container.igGrid('option', 'dataSource');
                        if (container.data("enable") !== enable) {
                            if (!enable) {
                                container.ntsGridList('unsetupSelecting');
                                container.addClass("disabled");
                                $(element).attr("tabindex", "-1");
                            }
                            else {
                                container.ntsGridList('setupSelecting');
                                container.removeClass("disabled");
                                $(element).attr("tabindex", $(element).data("tabindex"));
                            }
                        }
                        container.data("enable", enable);
                        if (!((String(container.attr("filtered")) === "true") || container.data("ui-changed") === true)) {
                            var currentSources = sources.slice();
                            var observableColumns = _.filter(ko.unwrap(data.columns), function (c) {
                                c["key"] = c["key"] === undefined ? c["prop"] : c["key"];
                                return c["isDateColumn"] !== undefined && c["isDateColumn"] !== null && c["isDateColumn"] === true;
                            });
                            _.forEach(currentSources, function (s) {
                                _.forEach(observableColumns, function (c) {
                                    var key = c["key"] === undefined ? c["prop"] : c["key"];
                                    s[key] = moment(s[key]).format(c["format"]);
                                });
                            });
                            if (!_.isEqual(currentSources, container.igGrid('option', 'dataSource'))) {
                                container.igGrid('option', 'dataSource', currentSources);
                                container.igGrid("dataBind");
                            }
                        }
                        else if (String(container.attr("filtered")) === "true") {
                            var filteredSource_1 = [];
                            _.forEach(currentSource, function (item) {
                                var itemX = _.find(sources, function (s) {
                                    return s[optionValue] === item[optionValue];
                                });
                                if (!nts.uk.util.isNullOrUndefined(itemX)) {
                                    filteredSource_1.push(itemX);
                                }
                            });
                            if (!_.isEqual(filteredSource_1, currentSource)) {
                                container.igGrid('option', 'dataSource', _.cloneDeep(filteredSource_1));
                                container.igGrid("dataBind");
                            }
                        }
                        var isMultiOld = container.igGridSelection('option', 'multipleSelection');
                        if (isMultiOld !== isMultiSelect) {
                            container.igGridSelection('option', 'multipleSelection', isMultiSelect);
                            if (isMultiOld && !nts.uk.util.isNullOrUndefined(data.value()) && data.value().length > 0) {
                                data.value(data.value()[0]);
                            }
                            else if (!isMultiOld && !nts.uk.util.isNullOrUndefined(data.value())) {
                                data.value([data.value()]);
                            }
                            var dataValue = data.value();
                            if (container.data("fullValue")) {
                                if (isMultiOld) {
                                    dataValue = _.map(dataValue, optionValue);
                                }
                                else {
                                    dataValue = dataValue[optionValue];
                                }
                            }
                            container.ntsGridList('setSelected', dataValue);
                        }
                        else {
                            var dataValue = data.value();
                            if (container.data("fullValue")) {
                                if (isMultiOld) {
                                    dataValue = _.map(dataValue, optionValue);
                                }
                                else {
                                    dataValue = dataValue[optionValue];
                                }
                            }
                            var currentSelectedItems = container.ntsGridList('getSelected');
                            if (isMultiOld) {
                                if (currentSelectedItems) {
                                    currentSelectedItems = _.map(currentSelectedItems, function (s) { return s["id"]; });
                                }
                                else {
                                    currentSelectedItems = [];
                                }
                                if (dataValue) {
                                    dataValue = _.map(dataValue, function (s) { return s.toString(); });
                                }
                            }
                            else {
                                if (currentSelectedItems) {
                                    currentSelectedItems = currentSelectedItems.id;
                                }
                                else {
                                    currentSelectedItems = ('');
                                }
                                if (dataValue) {
                                    dataValue = dataValue.toString();
                                }
                            }
                            var isEqual = _.isEqual(currentSelectedItems, dataValue);
                            if (!isEqual) {
                                _.defer(function () { container.trigger("selectChange"); });
                                container.ntsGridList('setSelected', dataValue);
                            }
                        }
                        container.data("ui-changed", false);
                        container.closest('.ui-iggrid').addClass('nts-gridlist').height(data.height);
                    };
                    return ListBoxBindingHandler;
                }());
                ko.bindingHandlers['ntsListBox'] = new ListBoxBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_6) {
            var koExtentions;
            (function (koExtentions) {
                var NtsRadioBoxBindingHandler = (function () {
                    function NtsRadioBoxBindingHandler() {
                    }
                    /**
                     * Init
                     */
                    NtsRadioBoxBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var optionValue = ko.unwrap(data.optionValue);
                        var optionText = ko.unwrap(data.optionText);
                        var dataName = ko.unwrap(data.name);
                        var option = ko.unwrap(data.option);
                        var group = ko.unwrap(data.group);
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var selectedValue = ko.unwrap(data.checked);
                        var container = $(element);
                        container.addClass("ntsControl radio-wrapper");
                        container.data("enable", enable);
                        if (nts.uk.util.isNullOrUndefined(container.attr("tabindex"))) {
                            container.attr("tabindex", "0");
                        }
                        container.data("tabindex", container.attr("tabindex"));
                        container.keydown(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code === 32) {
                                evt.preventDefault();
                            }
                        });
                        container.keyup(function (evt, ui) {
                            if (container.data("enable") !== false) {
                                var code = evt.which || evt.keyCode;
                                if (code === 32) {
                                    var checkitem = container.find("input[type='radio']");
                                    if (!container.find("input[type='radio']").is(":checked")) {
                                        checkitem.prop("checked", true);
                                        data.checked(container.find("input[type='radio']").data("value"));
                                    }
                                    else {
                                        checkitem.prop("checked", false);
                                        data.checked(undefined);
                                    }
                                    container.focus();
                                }
                            }
                        });
                        var radioBoxLabel = drawRadio(data.checked, option, dataName, optionValue, enable, optionText, false);
                        radioBoxLabel.appendTo(container);
                        var radio = container.find("input[type='radio']");
                        radio.attr("name", group).bind('selectionchanged', function () {
                            data.checked(radio.data("value"));
                        });
                        // Default value
                        new nts.uk.util.value.DefaultValue().onReset(container, data.value);
                    };
                    /**
                     * Update
                     */
                    NtsRadioBoxBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var option = data.option === undefined ? [] : ko.unwrap(data.option);
                        var optionValue = ko.unwrap(data.optionValue);
                        var optionText = ko.unwrap(data.optionText);
                        var selectedValue = data.checked;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Container
                        var container = $(element);
                        container.data("enable", enable);
                        container.find(".label").text(nts.uk.util.isNullOrUndefined(option) ? optionText : option[optionText]);
                        if (selectedValue() === true) {
                            container.find("input[type='radio']").prop("checked", true);
                        }
                        else {
                            container.find("input[type='radio']").prop("checked", false);
                        }
                        // Enable
                        if (enable === true) {
                            container.find("input[type='radio']").removeAttr("disabled");
                            container.attr("tabindex", container.data("tabindex"));
                        }
                        else if (enable === false) {
                            container.find("input[type='radio']").attr("disabled", "disabled");
                            if (!nts.uk.util.isNullOrUndefined(data.value)) {
                                new nts.uk.util.value.DefaultValue().applyReset(container, data.value);
                            }
                            container.attr("tabindex", "-1");
                        }
                        //            }
                    };
                    return NtsRadioBoxBindingHandler;
                }());
                /**
                 * RadioBoxGroup binding handler
                 */
                var NtsRadioBoxGroupBindingHandler = (function () {
                    function NtsRadioBoxGroupBindingHandler() {
                    }
                    /**
                     * Init
                     */
                    NtsRadioBoxGroupBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var optionValue = ko.unwrap(data.optionsValue);
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var container = $(element);
                        container.addClass("ntsControl radio-wrapper");
                        container.data("enable", enable);
                        if (nts.uk.util.isNullOrUndefined(container.attr("tabindex"))) {
                            container.attr("tabindex", "0");
                        }
                        container.data("tabindex", container.attr("tabindex"));
                        container.keydown(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code === 32) {
                                evt.preventDefault();
                            }
                        });
                        container.keyup(function (evt, ui) {
                            if (container.data("enable") !== false) {
                                var code = evt.which || evt.keyCode;
                                var checkitem = void 0;
                                if (code === 32) {
                                    checkitem = $(_.find(container.find("input[type='radio']"), function (radio, idx) {
                                        return $(radio).attr("disabled") !== "disabled";
                                    }));
                                }
                                else if (code === 37 || code === 38) {
                                    var inputList = _.filter(container.find("input[type='radio']"), function (radio, idx) {
                                        return $(radio).attr("disabled") !== "disabled";
                                    });
                                    //                        let inputList = container.find("input[type='radio']");
                                    var currentSelect = _.findIndex(inputList, function (item) {
                                        return $(item).is(":checked");
                                    });
                                    checkitem = $(inputList[currentSelect - 1]);
                                }
                                else if (code === 39 || code === 40) {
                                    var inputList = _.filter(container.find("input[type='radio']"), function (radio, idx) {
                                        return $(radio).attr("disabled") !== "disabled";
                                    });
                                    var currentSelect = _.findIndex(inputList, function (item) {
                                        return $(item).is(":checked");
                                    });
                                    checkitem = $(inputList[currentSelect + 1]);
                                }
                                if (checkitem !== undefined && checkitem.length > 0) {
                                    checkitem.prop("checked", true);
                                    data.value(optionValue === undefined ? checkitem.data("option") : checkitem.data("option")[optionValue]);
                                }
                                container.focus();
                            }
                        });
                        //            container.find(".ntsRadioBox").focus(function (evt, ui){
                        //                console.log(evt);            
                        //            });
                        // Default value
                        new nts.uk.util.value.DefaultValue().onReset(container, data.value);
                    };
                    /**
                     * Update
                     */
                    NtsRadioBoxGroupBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var options = data.options === undefined ? [] : JSON.parse(ko.toJSON(data.options));
                        var optionValue = ko.unwrap(data.optionsValue);
                        var optionText = ko.unwrap(data.optionsText);
                        var selectedValue = data.value;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Container
                        var container = $(element);
                        container.data("enable", enable);
                        // Render
                        if (!_.isEqual(container.data("options"), options)) {
                            var radioName = uk.util.randomId();
                            container.empty();
                            _.forEach(options, function (option) {
                                var radioBoxLabel = drawRadio(selectedValue, option, radioName, optionValue, option["enable"], optionText, false);
                                radioBoxLabel.appendTo(container);
                            });
                            // Save a clone
                            container.data("options", _.cloneDeep(options));
                        }
                        // Checked
                        var checkedRadio = _.find(container.find("input[type='radio']"), function (item) {
                            return _.isEqual(JSON.parse(ko.toJSON(selectedValue())), $(item).data("value"));
                        });
                        if (checkedRadio !== undefined)
                            $(checkedRadio).prop("checked", true);
                        // Enable
                        if (enable === true) {
                            _.forEach(container.find("input[type='radio']"), function (radio) {
                                var dataOpion = $(radio).data("option");
                                if (dataOpion["enable"] !== false) {
                                    $(radio).removeAttr("disabled");
                                }
                            });
                            container.attr("tabindex", container.data("tabindex"));
                        }
                        else if (enable === false) {
                            container.find("input[type='radio']").attr("disabled", "disabled");
                            new nts.uk.util.value.DefaultValue().applyReset(container, data.value);
                            container.attr("tabindex", "-1");
                        }
                        //            }
                    };
                    return NtsRadioBoxGroupBindingHandler;
                }());
                function getOptionValue(item, optionValue) {
                    if (nts.uk.util.isNullOrUndefined(item)) {
                        return nts.uk.util.isNullOrUndefined(optionValue) ? true : optionValue;
                    }
                    return (optionValue === undefined) ? item : item[optionValue];
                }
                ;
                function drawRadio(selectedValue, option, radioName, optionValue, disableOption, optionText, booleanValue) {
                    var radioBoxLabel = $("<label class='ntsRadioBox'></label>");
                    var radioBox = $('<input type="radio">').data("option", option).attr("name", radioName).data("value", getOptionValue(option, optionValue)).on("change", function () {
                        var self = $(this);
                        if (self.is(":checked") && !booleanValue) {
                            selectedValue(self.data("value"));
                        }
                        else if (booleanValue) {
                            var name_1 = self.attr("name");
                            if (nts.uk.util.isNullOrUndefined(name_1)) {
                                selectedValue(self.is(":checked"));
                            }
                            else {
                                var selector = 'input[name=' + name_1 + ']';
                                $(selector).each(function (idx, e) {
                                    $(e).triggerHandler('selectionchanged');
                                });
                            }
                        }
                    });
                    if (!nts.uk.util.isNullOrUndefined(disableOption) && (disableOption === false)) {
                        radioBox.attr("disabled", "disabled");
                    }
                    radioBox.appendTo(radioBoxLabel);
                    var box = $("<span class='box'></span>").appendTo(radioBoxLabel);
                    //        if (option[optionText] && option[optionText].length > 0)
                    var label = $("<span class='label'></span>").text(nts.uk.util.isNullOrUndefined(option) ? optionText : option[optionText]).appendTo(radioBoxLabel);
                    return radioBoxLabel;
                }
                ko.bindingHandlers['ntsRadioButton'] = new NtsRadioBoxBindingHandler();
                ko.bindingHandlers['ntsRadioBoxGroup'] = new NtsRadioBoxGroupBindingHandler();
            })(koExtentions = ui_6.koExtentions || (ui_6.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_7) {
            var koExtentions;
            (function (koExtentions) {
                /**
                * SearchBox Binding Handler
                */
                var SearchBox = (function () {
                    function SearchBox(source, searchField, childField) {
                        this.childField = childField;
                        this.source = nts.uk.util.isNullOrEmpty(source) ? [] : this.cloneDeep(source);
                        this.searchField = searchField;
                    }
                    SearchBox.prototype.search = function (searchKey) {
                        var self = this;
                        if (nts.uk.util.isNullOrEmpty(this.source)) {
                            return [];
                        }
                        var flatArr = nts.uk.util.flatArray(this.source, this.childField);
                        var filtered = _.filter(flatArr, function (item) {
                            return _.find(self.searchField, function (x) {
                                if (x !== undefined && x !== null) {
                                    var val = item[x].toString();
                                    return val.indexOf(searchKey.toString()) >= 0;
                                }
                                return false;
                            }) !== undefined;
                        });
                        return filtered;
                    };
                    SearchBox.prototype.setDataSource = function (source) {
                        this.source = nts.uk.util.isNullOrEmpty(source) ? [] : this.cloneDeep(source);
                    };
                    SearchBox.prototype.getDataSource = function () {
                        return this.cloneDeep(this.source);
                    };
                    SearchBox.prototype.cloneDeep = function (source) {
                        var self = this;
                        return self.cloneDeepX(source);
                    };
                    SearchBox.prototype.cloneDeepX = function (source) {
                        return _.cloneDeep(source);
                    };
                    return SearchBox;
                }());
                var SearchResult = (function () {
                    function SearchResult() {
                        this.options = [];
                        this.selectItems = [];
                    }
                    return SearchResult;
                }());
                var SearchPub = (function () {
                    function SearchPub(key, mode, source, searchField, childField) {
                        this.seachBox = new SearchBox(source, searchField, childField);
                        ;
                        this.mode = nts.uk.util.isNullOrEmpty(mode) ? "highlight" : mode;
                        this.key = key;
                    }
                    SearchPub.prototype.search = function (searchKey, selectedItems) {
                        var result = new SearchResult();
                        var filtered = this.seachBox.search(searchKey);
                        if (!nts.uk.util.isNullOrEmpty(filtered)) {
                            var key_1 = this.key;
                            if (this.mode === "highlight") {
                                result.options = this.seachBox.getDataSource();
                                var index = 0;
                                if (!nts.uk.util.isNullOrEmpty(selectedItems)) {
                                    var firstItemValue_1 = $.isArray(selectedItems)
                                        ? selectedItems[0]["id"].toString() : selectedItems["id"].toString();
                                    index = _.findIndex(filtered, function (item) {
                                        return item[key_1].toString() === firstItemValue_1;
                                    });
                                    if (!nts.uk.util.isNullOrUndefined(index)) {
                                        index++;
                                    }
                                }
                                if (index >= 0) {
                                    result.selectItems = [filtered[index >= filtered.length ? 0 : index]];
                                }
                            }
                            else if (this.mode === "filter") {
                                result.options = filtered;
                                var selectItem = _.filter(filtered, function (itemFilterd) {
                                    return _.find(selectedItems, function (item) {
                                        var itemVal = itemFilterd[key_1];
                                        return itemVal === item["id"];
                                    }) !== undefined;
                                });
                                result.selectItems = selectItem;
                            }
                        }
                        return result;
                    };
                    SearchPub.prototype.setDataSource = function (source) {
                        this.seachBox.setDataSource(source);
                    };
                    SearchPub.prototype.getDataSource = function () {
                        return this.seachBox.getDataSource();
                    };
                    return SearchPub;
                }());
                koExtentions.SearchPub = SearchPub;
                var NtsSearchBoxBindingHandler = (function () {
                    function NtsSearchBoxBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsSearchBoxBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var minusWidth = 0;
                        var data = ko.unwrap(valueAccessor());
                        var fields = ko.unwrap(data.fields);
                        var searchText = (data.searchText !== undefined) ? ko.unwrap(data.searchText) : "検索";
                        var placeHolder = (data.placeHolder !== undefined) ? ko.unwrap(data.placeHolder) : "コード・名称で検索・・・";
                        var searchMode = (data.searchMode !== undefined) ? ko.unwrap(data.searchMode) : "highlight";
                        var label = (data.label !== undefined) ? ko.unwrap(data.label) : "";
                        var enable = ko.unwrap(data.enable);
                        var selectedKey = null;
                        if (data.selectedKey) {
                            selectedKey = ko.unwrap(data.selectedKey);
                        }
                        var dataSource = ko.unwrap(data.items);
                        var childField = null;
                        if (data.childField) {
                            childField = ko.unwrap(data.childField);
                        }
                        var component;
                        var targetMode = data.mode;
                        if (targetMode === "listbox") {
                            component = $("#" + ko.unwrap(data.comId)).find(".ntsListBox");
                            targetMode = "igGrid";
                        }
                        else {
                            component = $("#" + ko.unwrap(data.comId));
                        }
                        var $container = $(element);
                        var tabIndex = nts.uk.util.isNullOrEmpty($container.attr("tabindex")) ? "0" : $container.attr("tabindex");
                        $container.addClass("nts-searchbbox-wrapper").removeAttr("tabindex");
                        $container.append("<div class='input-wrapper'><span class='nts-editor-wrapped ntsControl'><input class='ntsSearchBox nts-editor ntsSearchBox_Component' type='text' /></span></div>");
                        $container.append("<div class='input-wrapper'><button class='search-btn caret-bottom ntsSearchBox_Component'>" + searchText + "</button></div>");
                        if (!nts.uk.util.isNullOrEmpty(label)) {
                            var $formLabel = $("<div>", { text: label });
                            $formLabel.prependTo($container);
                            ko.bindingHandlers["ntsFormLabel"].init($formLabel, function () {
                                return {};
                            }, allBindingsAccessor, viewModel, bindingContext);
                            minusWidth += $formLabel.outerWidth(true);
                        }
                        var $button = $container.find("button.search-btn");
                        var $input = $container.find("input.ntsSearchBox");
                        minusWidth += $button.outerWidth(true);
                        if (searchMode === "filter") {
                            $container.append("<button class='clear-btn ntsSearchBox_Component'>解除</button>");
                            var $clearButton = $container.find("button.clear-btn");
                            minusWidth += $clearButton.outerWidth(true);
                            $clearButton.click(function (evt, ui) {
                                if (component.length === 0) {
                                    component = $("#" + ko.unwrap(data.comId)).find(".ntsListBox");
                                }
                                var srh = $container.data("searchObject");
                                $input.val("");
                                component.igGrid("option", "dataSource", srh.seachBox.getDataSource());
                                component.igGrid("dataBind");
                                $container.data("searchKey", null);
                                component.attr("filtered", false);
                                _.defer(function () {
                                    component.trigger("selectChange");
                                });
                            });
                        }
                        $input.attr("placeholder", placeHolder);
                        $input.attr("data-name", "検索テキストボックス");
                        $input.outerWidth($container.outerWidth(true) - minusWidth);
                        var primaryKey = ko.unwrap(data.targetKey);
                        var searchObject = new SearchPub(primaryKey, searchMode, dataSource, fields, childField);
                        $container.data("searchObject", searchObject);
                        var search = function (searchKey) {
                            if (targetMode) {
                                var selectedItems = void 0, isMulti = void 0;
                                if (targetMode == 'igGrid') {
                                    if (component.length === 0) {
                                        component = $("#" + ko.unwrap(data.comId)).find(".ntsListBox");
                                    }
                                    selectedItems = component.ntsGridList("getSelected");
                                    isMulti = component.igGridSelection('option', 'multipleSelection');
                                }
                                else if (targetMode == 'igTree') {
                                    selectedItems = component.ntsTreeView("getSelected");
                                    isMulti = component.igTreeGridSelection('option', 'multipleSelection');
                                }
                                else if (targetMode == 'igTreeDrag') {
                                    selectedItems = component.ntsTreeDrag("getSelected");
                                    isMulti = component.ntsTreeDrag('option', 'isMulti');
                                }
                                var srh_1 = $container.data("searchObject");
                                var result_1 = srh_1.search(searchKey, selectedItems);
                                if (nts.uk.util.isNullOrEmpty(result_1.options) && searchMode === "highlight") {
                                    nts.uk.ui.dialog.alert(nts.uk.resource.getMessage("FND_E_SEARCH_NOHIT")).then(function () {
                                        $input.focus();
                                        $input.select();
                                    });
                                    return false;
                                }
                                var selectedProperties = _.map(result_1.selectItems, primaryKey);
                                if (targetMode === 'igGrid') {
                                    component.ntsGridList("setSelected", selectedProperties);
                                    if (searchMode === "filter") {
                                        $container.data("filteredSrouce", result_1.options);
                                        component.attr("filtered", true);
                                        //selected(selectedValue);
                                        //selected.valueHasMutated();
                                        var source = _.filter(data.items(), function (item) {
                                            return _.find(result_1.options, function (itemFilterd) {
                                                return itemFilterd[primaryKey] === item[primaryKey];
                                            }) !== undefined || _.find(srh_1.getDataSource(), function (oldItem) {
                                                return oldItem[primaryKey] === item[primaryKey];
                                            }) === undefined;
                                        });
                                        component.igGrid("option", "dataSource", _.cloneDeep(source));
                                        component.igGrid("dataBind");
                                        if (nts.uk.util.isNullOrEmpty(selectedProperties)) {
                                            component.trigger("selectionchanged");
                                        }
                                    }
                                    else {
                                        component.trigger("selectionchanged");
                                    }
                                }
                                else if (targetMode == 'igTree') {
                                    component.ntsTreeView("setSelected", selectedProperties);
                                    component.trigger("selectionchanged");
                                }
                                else if (targetMode == 'igTreeDrag') {
                                    component.ntsTreeDrag("setSelected", selectedProperties);
                                }
                                _.defer(function () {
                                    component.trigger("selectChange");
                                });
                                $container.data("searchKey", searchKey);
                            }
                            return true;
                        };
                        var nextSearch = function () {
                            var searchKey = $input.val();
                            if (nts.uk.util.isNullOrEmpty(searchKey)) {
                                nts.uk.ui.dialog.alert(nts.uk.resource.getMessage("FND_E_SEARCH_NOWORD")).then(function () {
                                    $input.focus();
                                    //                        $input.select();
                                });
                                return false;
                            }
                            return search(searchKey);
                        };
                        $input.keydown(function (event) {
                            if (event.which == 13) {
                                event.preventDefault();
                                var result_2 = nextSearch();
                                _.defer(function () {
                                    if (result_2) {
                                        $input.focus();
                                    }
                                });
                            }
                        });
                        $button.click(function () {
                            nextSearch();
                        });
                        $container.find(".ntsSearchBox_Component").attr("tabindex", tabIndex);
                        if (enable === false) {
                            $container.find(".ntsSearchBox_Component").attr('disabled', 'disabled');
                        }
                        return { 'controlsDescendantBindings': true };
                    };
                    NtsSearchBoxBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var $searchBox = $(element);
                        var data = valueAccessor();
                        var arr = ko.unwrap(data.items);
                        var searchMode = ko.unwrap(data.searchMode);
                        var primaryKey = ko.unwrap(data.targetKey);
                        var enable = ko.unwrap(data.enable);
                        var targetMode = data.mode;
                        var component;
                        if (targetMode === "listbox") {
                            component = $("#" + ko.unwrap(data.comId)).find(".ntsListBox");
                            targetMode = "igGrid";
                        }
                        else {
                            component = $("#" + ko.unwrap(data.comId));
                        }
                        var srhX = $searchBox.data("searchObject");
                        if (component.attr("filtered") === true || component.attr("filtered") === "true") {
                            var currentSoruce_1 = srhX.getDataSource();
                            var newItems = _.filter(arr, function (i) {
                                return _.find(currentSoruce_1, function (ci) {
                                    return ci[primaryKey] === i[primaryKey];
                                }) === undefined;
                            });
                            if (!nts.uk.util.isNullOrEmpty(newItems)) {
                                var gridSources_1 = component.igGrid("option", "dataSource");
                                _.forEach(newItems, function (item) {
                                    gridSources_1.push(item);
                                });
                                component.igGrid("option", "dataSource", _.cloneDeep(gridSources_1));
                                component.igGrid("dataBind");
                            }
                        }
                        srhX.setDataSource(arr);
                        if (enable === false) {
                            $searchBox.find(".ntsSearchBox_Component").attr('disabled', 'disabled');
                        }
                        else {
                            $searchBox.find(".ntsSearchBox_Component").removeAttr('disabled');
                        }
                    };
                    return NtsSearchBoxBindingHandler;
                }());
                ko.bindingHandlers['ntsSearchBox'] = new NtsSearchBoxBindingHandler();
            })(koExtentions = ui_7.koExtentions || (ui_7.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_8) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * SwapList binding handler
                 */
                var NtsSwapListBindingHandler = (function () {
                    /**
                     * Constructor.
                     */
                    function NtsSwapListBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsSwapListBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var HEADER_HEIGHT = 27;
                        var CHECKBOX_WIDTH = 70;
                        var SEARCH_AREA_HEIGHT = 45;
                        var BUTTON_SEARCH_WIDTH = 70;
                        var INPUT_SEARCH_PADDING = 65;
                        var $swap = $(element);
                        var elementId = $swap.attr('id');
                        if (nts.uk.util.isNullOrUndefined(elementId)) {
                            throw new Error('the element NtsSwapList must have id attribute.');
                        }
                        var tabIndex = nts.uk.util.isNullOrEmpty($swap.attr("tabindex")) ? "0" : $swap.attr("tabindex");
                        $swap.data("tabindex", tabIndex);
                        $swap.attr("tabindex", "-1");
                        var data = valueAccessor();
                        var originalSource = ko.unwrap(data.dataSource !== undefined ? data.dataSource : data.options);
                        //            var selectedValues = ko.unwrap(data.value);
                        var totalWidth = ko.unwrap(data.width);
                        var disableMove = ko.unwrap(data.disableMoveButton);
                        var height = ko.unwrap(data.height);
                        var showSearchBox = ko.unwrap(data.showSearchBox);
                        var primaryKey = data.primaryKey !== undefined ? data.primaryKey : data.optionsValue;
                        var leftColumns = data.leftColumns || data.columns;
                        var rightColumns = data.rightColumns || data.columns;
                        var enableRowNumbering = ko.unwrap(data.enableRowNumbering);
                        var defaultSearchText = (data.placeHolder !== undefined) ? ko.unwrap(data.placeHolder) : "コード・名称で検索・・・";
                        // 動作が不安定なので、使わないようにする
                        data.draggable = false;
                        $swap.wrap("<div class= 'ntsComponent ntsSwapList' id='" + elementId + "_container' tabindex='-1'/>");
                        if (totalWidth !== undefined) {
                            $swap.parent().width(totalWidth);
                        }
                        $swap.parent().height(height);
                        $swap.addClass("ntsSwapList-container");
                        var leftGridWidth = _.sumBy(leftColumns(), function (c) {
                            return c.width;
                        });
                        var rightGridWidth = _.sumBy(rightColumns(), function (c) {
                            return c.width;
                        });
                        var leftIggridColumns = _.map(leftColumns(), function (c) {
                            c["key"] = c.key === undefined ? c.prop : c.key;
                            c["dataType"] = 'string';
                            return c;
                        });
                        var rightIggridColumns = _.map(rightColumns(), function (c) {
                            c["key"] = c.key === undefined ? c.prop : c.key;
                            c["dataType"] = 'string';
                            return c;
                        });
                        var gridHeight = (height - 20);
                        var grid1Id = "#" + elementId + "-grid1";
                        var grid2Id = "#" + elementId + "-grid2";
                        //var defaultSearchText = "コード・名称で検索・・・"; // nts.uk.resource.getText("");
                        if (!uk.util.isNullOrUndefined(showSearchBox) && (showSearchBox.showLeft || showSearchBox.showRight)) {
                            var initSearchArea = function ($SearchArea, searchMode, searchText) {
                                $SearchArea.append("<div class='ntsSearchTextContainer'/>")
                                    .append("<div class='ntsSearchButtonContainer'/>");
                                if (searchMode === "filter") {
                                    $SearchArea.append("<div class='ntsClearButtonContainer'/>");
                                    $SearchArea.find(".ntsClearButtonContainer")
                                        .append("<button id = " + searchAreaId + "-clear-btn" + " class='ntsSearchButton clear-btn ntsSwap_Component'/>");
                                    $SearchArea.find(".clear-btn").text("解除");
                                }
                                $SearchArea.find(".ntsSearchTextContainer")
                                    .append("<input id = " + searchAreaId + "-input" + " class = 'ntsSearchInput ntsSwap_Component ntsSearchBox nts-editor ntsSearchBox_Component'/>");
                                $SearchArea.find(".ntsSearchButtonContainer")
                                    .append("<button id = " + searchAreaId + "-btn" + " class='ntsSearchButton search-btn caret-bottom ntsSwap_Component'/>");
                                $SearchArea.find(".ntsSearchInput").attr("placeholder", searchText).wrap("<span class='nts-editor-wrapped ntsControl'/>");
                                $SearchArea.find(".search-btn").text("検索");
                            };
                            var searchAreaId = elementId + "-search-area";
                            $swap.append("<div class = 'nts-searchbbox-wrapper ntsSearchArea' id = " + searchAreaId + "/>");
                            var $searchArea = $swap.find(".ntsSearchArea");
                            $searchArea.append("<div class='ntsSwapSearchLeft'/>")
                                .append("<div class='ntsSwapSearchRight'/>");
                            $searchArea.css({ position: "relative" });
                            var searchAreaWidth = leftGridWidth + CHECKBOX_WIDTH;
                            if (showSearchBox.showLeft) {
                                var $searchLeftContainer = $swap.find(".ntsSwapSearchLeft");
                                $searchLeftContainer.width(searchAreaWidth).css({ position: "absolute", left: 0 });
                                initSearchArea($searchLeftContainer, data.searchMode, data.leftSearchBoxText || defaultSearchText);
                                $searchLeftContainer.find(".ntsSearchBox").width(searchAreaWidth - BUTTON_SEARCH_WIDTH - INPUT_SEARCH_PADDING - (data.searchMode === "filter" ? BUTTON_SEARCH_WIDTH : 0));
                            }
                            if (showSearchBox.showRight) {
                                var $searchRightContainer = $swap.find(".ntsSwapSearchRight");
                                $searchRightContainer.width(rightGridWidth + CHECKBOX_WIDTH).css({ position: "absolute", right: 0 });
                                initSearchArea($searchRightContainer, data.searchMode, data.rightSearchBoxText || defaultSearchText);
                                $searchRightContainer.find(".ntsSearchBox").width(rightGridWidth + CHECKBOX_WIDTH - BUTTON_SEARCH_WIDTH - INPUT_SEARCH_PADDING - (data.searchMode === "filter" ? BUTTON_SEARCH_WIDTH : 0));
                            }
                            $searchArea.height(SEARCH_AREA_HEIGHT);
                            gridHeight -= SEARCH_AREA_HEIGHT;
                        }
                        $swap.append("<div class= 'ntsSwapArea ntsGridArea'/>");
                        $swap.find(".ntsGridArea").append("<div class = 'ntsSwapGridArea ntsSwapComponent' id = " + elementId + "-gridArea1" + "/>")
                            .append("<div class = 'ntsMoveDataArea ntsSwapComponent' id = " + elementId + "-move-data" + "/>")
                            .append("<div class = 'ntsSwapGridArea ntsSwapComponent' id = " + elementId + "-gridArea2" + "/>");
                        $swap.find("#" + elementId + "-gridArea1").append("<table class = 'ntsSwapGrid' id = " + elementId + "-grid1" + "/>");
                        $swap.find("#" + elementId + "-gridArea2").append("<table class = 'ntsSwapGrid' id = " + elementId + "-grid2" + "/>");
                        var $grid1 = $swap.find(grid1Id);
                        var $grid2 = $swap.find(grid2Id);
                        var features = [{ name: 'Selection', multipleSelection: true },
                            //                            { name: 'Sorting', type: 'local' },
                            { name: 'RowSelectors', enableCheckBoxes: true, enableRowNumbering: enableRowNumbering }];
                        $swap.find("#" + elementId + "-gridArea1").width(leftGridWidth + CHECKBOX_WIDTH);
                        $swap.find("#" + elementId + "-gridArea2").width(rightGridWidth + CHECKBOX_WIDTH);
                        var leftCriterion = _.map(leftColumns(), function (c) { return c.key === undefined ? c.prop : c.key; });
                        var rightCriterion = _.map(rightColumns(), function (c) { return c.key === undefined ? c.prop : c.key; });
                        var swapParts = new Array();
                        swapParts.push(new GridSwapPart().listControl($grid1)
                            .searchControl($swap.find(".ntsSwapSearchLeft").find(".search-btn"))
                            .clearControl($swap.find(".ntsSwapSearchLeft").find(".clear-btn"))
                            .searchBox($swap.find(".ntsSwapSearchLeft").find(".ntsSearchBox"))
                            .withDataSource(originalSource)
                            .setSearchCriterion(data.leftSearchCriterion || data.searchCriterion || leftCriterion)
                            .setSearchMode(data.searchMode || "highlight")
                            .setColumns(leftColumns())
                            .setPrimaryKey(primaryKey)
                            .setInnerDrop((data.innerDrag && data.innerDrag.left !== undefined) ? data.innerDrag.left : true)
                            .setOuterDrop((data.outerDrag && data.outerDrag.left !== undefined) ? data.outerDrag.left : true)
                            .setItemsLimit((data.itemsLimit && data.itemsLimit.left !== undefined) ? data.itemsLimit.left : null)
                            .build());
                        swapParts.push(new GridSwapPart().listControl($grid2)
                            .searchControl($swap.find(".ntsSwapSearchRight").find(".search-btn"))
                            .clearControl($swap.find(".ntsSwapSearchRight").find(".clear-btn"))
                            .searchBox($swap.find(".ntsSwapSearchRight").find(".ntsSearchBox"))
                            .withDataSource(data.value())
                            .setSearchCriterion(data.rightSearchCriterion || data.searchCriterion || rightCriterion)
                            .setSearchMode(data.searchMode || "highlight")
                            .setColumns(rightColumns())
                            .setPrimaryKey(primaryKey)
                            .setInnerDrop((data.innerDrag && data.innerDrag.right !== undefined) ? data.innerDrag.right : true)
                            .setOuterDrop((data.outerDrag && data.outerDrag.right !== undefined) ? data.outerDrag.right : true)
                            .setItemsLimit((data.itemsLimit && data.itemsLimit.right !== undefined) ? data.itemsLimit.right : null)
                            .build());
                        this.swapper = new SwapHandler().setModel(new GridSwapList($swap, swapParts));
                        $grid1.igGrid({
                            width: leftGridWidth + CHECKBOX_WIDTH,
                            height: (gridHeight) + "px",
                            primaryKey: primaryKey,
                            columns: leftIggridColumns,
                            virtualization: true,
                            virtualizationMode: 'continuous',
                            features: features,
                            tabIndex: -1
                        });
                        $grid1.closest('.ui-iggrid')
                            .addClass('nts-gridlist')
                            .height(gridHeight)
                            .attr("tabindex", tabIndex);
                        $grid1.ntsGridList('setupSelecting');
                        $grid2.igGrid({
                            width: rightGridWidth + CHECKBOX_WIDTH,
                            height: (gridHeight) + "px",
                            primaryKey: primaryKey,
                            columns: rightIggridColumns,
                            virtualization: true,
                            virtualizationMode: 'continuous',
                            features: features,
                            tabIndex: -1
                        });
                        if (data.draggable === true) {
                            this.swapper.enableDragDrop(data.value);
                            if (data.multipleDrag && data.multipleDrag.left === true) {
                                this.swapper.Model.swapParts[0].$listControl.addClass("multiple-drag");
                            }
                            if (data.multipleDrag && data.multipleDrag.right === true) {
                                this.swapper.Model.swapParts[1].$listControl.addClass("multiple-drag");
                            }
                        }
                        $grid2.closest('.ui-iggrid')
                            .addClass('nts-gridlist')
                            .height(gridHeight)
                            .attr("tabindex", tabIndex);
                        $grid2.ntsGridList('setupSelecting');
                        var $moveArea = $swap.find("#" + elementId + "-move-data")
                            .append("<button class='move-button move-forward-all ntsSwap_Component'><i class='img-icon icon-next-all'></i></button>")
                            .append("<button class='move-button move-forward ntsSwap_Component'><i class='img-icon icon-next'></i></button>")
                            .append("<button class='move-button move-back ntsSwap_Component'><i class='img-icon icon-prev'></i></button>")
                            .append("<button class='move-button move-back-all ntsSwap_Component'><i class='img-icon icon-prev-all'></i></button>");
                        var $moveForward = $moveArea.find(".move-forward");
                        var $moveForwardAll = $moveArea.find(".move-forward-all");
                        var $moveBack = $moveArea.find(".move-back");
                        var $moveBackAll = $moveArea.find(".move-back-all");
                        var swapper = this.swapper;
                        $moveForward.click(function () {
                            swapper.Model.move(true, data.value, false);
                        });
                        $moveBack.click(function () {
                            swapper.Model.move(false, data.value, false);
                        });
                        $moveForwardAll.click(function () {
                            swapper.Model.move(true, data.value, true);
                        });
                        $moveBackAll.click(function () {
                            swapper.Model.move(false, data.value, true);
                        });
                        $swap.find(".ntsSwap_Component").attr("tabindex", tabIndex);
                        this.swapper.Model.$container.bind("swaplistgridsizeexceed", function (evt, data) {
                            nts.uk.ui.dialog.alertError({ messageId: "Msg_887" });
                        });
                    };
                    /**
                     * Update
                     */
                    NtsSwapListBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var $swap = $(element);
                        var disableMove = ko.unwrap(data.disableMoveButton);
                        if (disableMove === true) {
                            $swap.find(".move-button").attr("disabled", "disabled");
                        }
                        else {
                            $swap.find(".move-button").removeAttr("disabled");
                        }
                        var elementId = this.swapper.Model.$container.attr('id');
                        var primaryKey = this.swapper.Model.swapParts[0].primaryKey;
                        if (nts.uk.util.isNullOrUndefined(elementId)) {
                            throw new Error('the element NtsSwapList must have id attribute.');
                        }
                        var $grid1 = this.swapper.Model.swapParts[0].$listControl;
                        var $grid2 = this.swapper.Model.swapParts[1].$listControl;
                        var currentSource = $grid1.igGrid('option', 'dataSource');
                        var currentSelectedList = $grid2.igGrid('option', 'dataSource');
                        var newSources = (data.dataSource !== undefined ? data.dataSource() : data.options());
                        var newSelectedList = data.value();
                        _.remove(newSources, function (item) {
                            return _.find(newSelectedList, function (selected) {
                                return selected[primaryKey] === item[primaryKey];
                            }) !== undefined;
                        });
                        //            if (!_.isEqual(currentSource, newSources)) {
                        this.swapper.Model.swapParts[0].setDataSource(newSources.slice());
                        this.swapper.Model.transportBuilder.setFirst(newSources);
                        //            }
                        //            if (!_.isEqual(currentSelectedList, newSelectedList)) {
                        this.swapper.Model.swapParts[1].setDataSource(newSelectedList.slice());
                        this.swapper.Model.transportBuilder.setSecond(newSelectedList);
                        //            }
                    };
                    /**
                     * Share swapper b/w init and update
                     */
                    NtsSwapListBindingHandler.prototype.makeBindings = function () {
                        var handler = this;
                        return {
                            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                                var newHandler = Object.create(handler);
                                if (handler.init) {
                                    handler.init.call(newHandler, element, valueAccessor, allBindings, viewModel, bindingContext);
                                }
                                if (handler.update) {
                                    ko.computed({
                                        read: handler.update.bind(newHandler, element, valueAccessor, allBindings, viewModel, bindingContext),
                                        disposeWhenNodeIsRemoved: element
                                    });
                                }
                            }
                        };
                    };
                    return NtsSwapListBindingHandler;
                }());
                ko.bindingHandlers['ntsSwapList'] = new NtsSwapListBindingHandler().makeBindings();
                var SwapHandler = (function () {
                    function SwapHandler() {
                    }
                    SwapHandler.prototype.setModel = function (model) {
                        this.model = model;
                        return this;
                    };
                    Object.defineProperty(SwapHandler.prototype, "Model", {
                        get: function () {
                            return this.model;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    SwapHandler.prototype.handle = function (parts, value) {
                        var self = this;
                        var model = this.model;
                        for (var id in parts) {
                            var options = {
                                items: "tbody > tr",
                                containment: this.model.$container,
                                cursor: "move",
                                connectWith: ".ntsSwapGrid",
                                placeholder: "ui-state-highlight",
                                helper: this._createHelper,
                                appendTo: this.model.$container,
                                start: function (evt, ui) {
                                    model.transportBuilder.at(model.sender(ui));
                                },
                                beforeStop: function (evt, ui) {
                                    self._beforeStop.call(this, model, evt, ui);
                                },
                                update: function (evt, ui) {
                                    self._update.call(this, model, evt, ui, value);
                                }
                            };
                            this.model.swapParts[parts[id]].initDraggable(options);
                        }
                    };
                    SwapHandler.prototype._createHelper = function (evt, ui) {
                        var selectedRowElms = $(evt.currentTarget).igGrid("selectedRows");
                        // Set the orders same as on grid
                        selectedRowElms.sort(function (one, two) {
                            return one.index - two.index;
                        });
                        var $helper;
                        if ($(evt.currentTarget).hasClass("multiple-drag") && selectedRowElms.length > 1) {
                            $helper = $("<div><table><tbody></tbody></table></div>").addClass("select-drag");
                            var rowId = ui.data("row-idx");
                            var selectedItems = selectedRowElms.map(function (elm) { return elm.element; });
                            var height = 0;
                            $.each(selectedItems, function () {
                                $helper.find("tbody").append($(this).clone());
                                height += $(this).outerHeight();
                                if (rowId !== this.data("row-idx"))
                                    $(this).hide();
                            });
                            $helper.height(height);
                            $helper.find("tr").first().children().each(function (idx) {
                                $(this).width(ui.children().eq(idx).width());
                            });
                        }
                        else {
                            $helper = ui.clone();
                            $helper.children().each(function (idx) {
                                $(this).width(ui.children().eq(idx).width());
                            });
                        }
                        return $helper[0];
                    };
                    SwapHandler.prototype._beforeStop = function (model, evt, ui) {
                        var partId = model.transportBuilder.startAt === "first" ? 0 : 1;
                        var destPartId = model.receiver(ui) === "first" ? 0 : 1;
                        model.transportBuilder.toAdjacent(model.neighbor(ui)).target(model.target(ui));
                        var max = model.swapParts[destPartId].itemsLimit;
                        // In case of multiple selections
                        if (ui.helper.hasClass("select-drag") === true) {
                            var rowsInHelper = ui.helper.find("tr");
                            var rows = rowsInHelper.toArray();
                            if (model.transportBuilder.startAt === model.receiver(ui)
                                || (model.swapParts[partId].outerDrop === false
                                    && model.transportBuilder.startAt !== model.receiver(ui))
                                || (!uk.util.isNullOrUndefined(max) && (rows.length + model.swapParts[destPartId].dataSource.length > max))) {
                                $(this).sortable("cancel");
                                for (var idx in rows) {
                                    model.swapParts[partId].$listControl.find("tbody").children()
                                        .eq($(rows[idx]).data("row-idx")).show();
                                }
                                if (!uk.util.isNullOrUndefined(max) && (rows.length + model.swapParts[destPartId].dataSource.length > max)) {
                                    model.$container.trigger($.Event("swaplistgridsizeexceed"), [model.swapParts[destPartId].$listControl, max]);
                                }
                                return;
                            }
                            else {
                                var standardIdx = ui.placeholder.index();
                                var targetIdx = ui.item.data("row-idx");
                                var rowsBefore = new Array();
                                var rowsAfter = new Array();
                                for (var id in rows) {
                                    if ($(rows[id]).data("row-idx") < targetIdx)
                                        rowsBefore.push(rows[id]);
                                    else if ($(rows[id]).data("row-idx") > targetIdx)
                                        rowsAfter.push(rows[id]);
                                }
                                model.swapParts[destPartId].$listControl.find("tbody").children()
                                    .eq(standardIdx - 1).before(rowsBefore).after(rowsAfter);
                                // Remove rows in source
                                var sourceRows = model.swapParts[partId].$listControl.find("tbody").children();
                                for (var index = rowsAfter.length - 1; index >= 0; index--) {
                                    if ($(rows[index]).data("row-idx") === targetIdx)
                                        continue;
                                    sourceRows.eq($(rowsAfter[index]).data("row-idx") - 1).remove();
                                }
                                for (var val in rowsBefore) {
                                    sourceRows.eq($(rowsBefore[val]).data("row-idx")).remove();
                                }
                            }
                        }
                        else if ((model.swapParts[partId].innerDrop === false
                            && model.transportBuilder.startAt === model.receiver(ui))
                            || (model.swapParts[partId].outerDrop === false
                                && model.transportBuilder.startAt !== model.receiver(ui))
                            || (!uk.util.isNullOrUndefined(max) && model.swapParts[destPartId].dataSource.length >= max)) {
                            $(this).sortable("cancel");
                            if (!uk.util.isNullOrUndefined(max) && model.swapParts[destPartId].dataSource.length >= max) {
                                model.$container.trigger($.Event("swaplistgridsizeexceed"), [model.swapParts[destPartId].$listControl, max]);
                            }
                        }
                    };
                    SwapHandler.prototype._update = function (model, evt, ui, value) {
                        if (ui.item.closest("table").length === 0)
                            return;
                        model.transportBuilder.directTo(model.receiver(ui)).update();
                        if (model.transportBuilder.startAt === model.transportBuilder.direction) {
                            model.transportBuilder.startAt === "first"
                                ? model.swapParts[0].bindData(model.transportBuilder.getFirst())
                                : model.swapParts[1].bindData(model.transportBuilder.getSecond());
                        }
                        else {
                            model.swapParts[0].bindData(model.transportBuilder.getFirst());
                            model.swapParts[1].bindData(model.transportBuilder.getSecond());
                        }
                        value(model.transportBuilder.getSecond());
                        setTimeout(function () { model.dropDone(); }, 0);
                    };
                    SwapHandler.prototype.enableDragDrop = function (value, parts) {
                        parts = parts || [0, 1];
                        this.model.enableDrag(this, value, parts, this.handle);
                    };
                    return SwapHandler;
                }());
                var SwapModel = (function () {
                    function SwapModel($container, swapParts) {
                        this.$container = $container;
                        this.swapParts = swapParts;
                        this.transportBuilder = new ListItemTransporter(this.swapParts[0].dataSource, this.swapParts[1].dataSource)
                            .primary(this.swapParts[0].primaryKey);
                    }
                    return SwapModel;
                }());
                var SearchResult = (function () {
                    function SearchResult(results, indices) {
                        this.data = results;
                        this.indices = indices;
                    }
                    return SearchResult;
                }());
                var SwapPart = (function () {
                    function SwapPart() {
                        this.searchMode = "highlight"; // highlight & filter - Default: highlight
                        this.innerDrop = true;
                        this.outerDrop = true;
                    }
                    SwapPart.prototype.listControl = function ($listControl) {
                        this.$listControl = $listControl;
                        return this;
                    };
                    SwapPart.prototype.searchControl = function ($searchControl) {
                        this.$searchControl = $searchControl;
                        return this;
                    };
                    SwapPart.prototype.clearControl = function ($clearControl) {
                        this.$clearControl = $clearControl;
                        return this;
                    };
                    SwapPart.prototype.searchBox = function ($searchBox) {
                        this.$searchBox = $searchBox;
                        return this;
                    };
                    SwapPart.prototype.setSearchMode = function (searchMode) {
                        this.searchMode = searchMode;
                        return this;
                    };
                    SwapPart.prototype.setSearchCriterion = function (searchCriterion) {
                        this.searchCriterion = searchCriterion;
                        return this;
                    };
                    SwapPart.prototype.withDataSource = function (dataSource) {
                        this.dataSource = dataSource;
                        this.resetOriginalDataSource();
                        return this;
                    };
                    SwapPart.prototype.setDataSource = function (dataSource) {
                        this.bindData(dataSource);
                        this.resetOriginalDataSource();
                        return this;
                    };
                    SwapPart.prototype.setColumns = function (columns) {
                        this.columns = columns;
                        return this;
                    };
                    SwapPart.prototype.setPrimaryKey = function (primaryKey) {
                        this.primaryKey = primaryKey;
                        return this;
                    };
                    SwapPart.prototype.setInnerDrop = function (innerDrop) {
                        this.innerDrop = innerDrop;
                        return this;
                    };
                    SwapPart.prototype.setOuterDrop = function (outerDrop) {
                        this.outerDrop = outerDrop;
                        return this;
                    };
                    SwapPart.prototype.setItemsLimit = function (itemsLimit) {
                        this.itemsLimit = itemsLimit;
                        return this;
                    };
                    SwapPart.prototype.initDraggable = function (opts) {
                        this.$listControl.sortable(opts).disableSelection();
                    };
                    SwapPart.prototype.resetOriginalDataSource = function () {
                        this.originalDataSource = _.cloneDeep(this.dataSource);
                    };
                    SwapPart.prototype.search = function () {
                        var searchContents = this.$searchBox.val();
                        var orders = new Array();
                        if (nts.uk.util.isNullOrEmpty(searchContents)) {
                            nts.uk.ui.dialog.alert(nts.uk.resource.getMessage("FND_E_SEARCH_NOWORD"));
                            return null;
                        }
                        var searchCriterion = this.searchCriterion;
                        if (this.originalDataSource === undefined)
                            this.resetOriginalDataSource();
                        var results = _.filter(this.originalDataSource, function (value, index) {
                            var found = false;
                            _.forEach(searchCriterion, function (criteria) {
                                if (value[criteria].toString().indexOf(searchContents) !== -1) {
                                    found = true;
                                    return false;
                                }
                                else
                                    return true;
                            });
                            orders.push(index);
                            return found;
                        });
                        return new SearchResult(results, orders);
                    };
                    SwapPart.prototype.bindData = function (src) {
                        this.bindIn(src);
                        this.dataSource = src;
                    };
                    SwapPart.prototype.bindSearchEvent = function () {
                        var self = this;
                        var proceedSearch = this.proceedSearch;
                        var clearFilter = this.clearFilter;
                        this.$searchControl.click(function (evt, ui) {
                            proceedSearch.apply(self);
                        });
                        this.$clearControl.click(function (evt, ui) {
                            clearFilter.apply(self);
                            ;
                        });
                        this.$searchBox.keydown(function (evt, ui) {
                            var $input = this;
                            if (evt.which === 13) {
                                proceedSearch.apply(self);
                                _.defer(function () {
                                    $input.focus();
                                });
                            }
                        });
                    };
                    SwapPart.prototype.proceedSearch = function () {
                        if (this.searchMode === "filter") {
                            var results = this.search();
                            if (results === null)
                                return;
                            this.bindData(results.data);
                        }
                        else {
                            this.highlightSearch();
                        }
                    };
                    SwapPart.prototype.clearFilter = function () {
                        if (this.searchMode === "filter") {
                            if (this.originalDataSource === undefined) {
                                this.resetOriginalDataSource();
                            }
                            this.bindData(this.originalDataSource);
                        }
                    };
                    SwapPart.prototype.build = function () {
                        this.bindSearchEvent();
                        return this;
                    };
                    return SwapPart;
                }());
                var GridSwapPart = (function (_super) {
                    __extends(GridSwapPart, _super);
                    function GridSwapPart() {
                        _super.apply(this, arguments);
                    }
                    GridSwapPart.prototype.search = function () {
                        return _super.prototype.search.call(this);
                    };
                    GridSwapPart.prototype.highlightSearch = function () {
                        var value = this.$searchBox.val();
                        if (nts.uk.util.isNullOrEmpty(value)) {
                            nts.uk.ui.dialog.alert(nts.uk.resource.getMessage("FND_E_SEARCH_NOWORD"));
                            return;
                        }
                        var source = this.dataSource.slice();
                        var selected = this.$listControl.ntsGridList("getSelected");
                        if (selected.length > 0) {
                            var gotoEnd = source.splice(0, selected[0].index + 1);
                            source = source.concat(gotoEnd);
                        }
                        var iggridColumns = _.map(this.columns, function (c) {
                            c["key"] = c.key === undefined ? c.prop : c.key;
                            c["dataType"] = 'string';
                            return c;
                        });
                        var searchedValues = _.find(source, function (val) {
                            return _.find(iggridColumns, function (x) {
                                return x !== undefined && x !== null && val[x["key"]].toString().indexOf(value) >= 0;
                            }) !== undefined;
                        });
                        if (searchedValues === undefined) {
                            nts.uk.ui.dialog.alert(nts.uk.resource.getMessage("FND_E_SEARCH_NOHIT"));
                            return;
                        }
                        this.$listControl.ntsGridList('setSelected', searchedValues !== undefined ? [searchedValues[this.primaryKey]] : []);
                        if (searchedValues !== undefined && (selected.length === 0 ||
                            selected[0].id !== searchedValues[this.primaryKey])) {
                            var current = this.$listControl.igGrid("selectedRows");
                            if (current.length > 0 && this.$listControl.igGrid("hasVerticalScrollbar")) {
                                this.$listControl.igGrid("virtualScrollTo", current[0].index === source.length - 1
                                    ? current[0].index : current[0].index + 1);
                            }
                        }
                    };
                    GridSwapPart.prototype.bindIn = function (src) {
                        this.$listControl.igGrid("option", "dataSource", src);
                        this.$listControl.igGrid("dataBind");
                    };
                    return GridSwapPart;
                }(SwapPart));
                var GridSwapList = (function (_super) {
                    __extends(GridSwapList, _super);
                    function GridSwapList() {
                        _super.apply(this, arguments);
                    }
                    GridSwapList.prototype.sender = function (opts) {
                        return opts.item.closest("table")[0].id == this.swapParts[0].$listControl.attr("id")
                            ? "first" : "second";
                    };
                    GridSwapList.prototype.receiver = function (opts) {
                        return opts.item.closest("table")[0].id == this.swapParts[1].$listControl.attr("id")
                            ? "second" : "first";
                    };
                    GridSwapList.prototype.target = function (opts) {
                        if (opts.helper !== undefined && opts.helper.hasClass("select-drag")) {
                            return opts.helper.find("tr").map(function () {
                                return $(this).data("id");
                            });
                        }
                        return [opts.item.data("id")];
                    };
                    GridSwapList.prototype.neighbor = function (opts) {
                        return opts.item.prev().length === 0 ? "ceil" : opts.item.prev().data("id");
                    };
                    GridSwapList.prototype.dropDone = function () {
                        var self = this;
                        self.swapParts[0].$listControl.igGridSelection("clearSelection");
                        self.swapParts[1].$listControl.igGridSelection("clearSelection");
                        setTimeout(function () {
                            (self.transportBuilder.direction === "first"
                                ? self.swapParts[0].$listControl
                                : self.swapParts[1].$listControl).igGrid("virtualScrollTo", self.transportBuilder.incomeIndex);
                            (self.transportBuilder.startAt === "first"
                                ? self.swapParts[0].$listControl
                                : self.swapParts[1].$listControl).igGrid("virtualScrollTo", self.transportBuilder.outcomeIndex + 1);
                        }, 0);
                    };
                    GridSwapList.prototype.enableDrag = function (ctx, value, parts, cb) {
                        var self = this;
                        for (var idx in parts) {
                            this.swapParts[parts[idx]].$listControl.on("iggridrowsrendered", function (evt, ui) {
                                cb.call(ctx, parts, value);
                            });
                        }
                    };
                    GridSwapList.prototype.move = function (forward, value, moveAll) {
                        var primaryKey = this.transportBuilder.primaryKey;
                        var $source = forward === true ? this.swapParts[0].$listControl : this.swapParts[1].$listControl;
                        var sourceList = forward === true ? this.swapParts[0].dataSource : this.swapParts[1].dataSource;
                        var $dest = forward === true ? this.swapParts[1].$listControl : this.swapParts[0].$listControl;
                        var destList = forward === true ? this.swapParts[1].dataSource : this.swapParts[0].dataSource;
                        var max = forward === true ? this.swapParts[1].itemsLimit : this.swapParts[0].itemsLimit;
                        if (moveAll) {
                            var selectedIds = sourceList.map(function (row) { return row[primaryKey]; });
                            if (!uk.util.isNullOrUndefined(max) && (selectedIds.length + destList.length > max)) {
                                this.$container.trigger($.Event("swaplistgridsizeexceed"), [$dest, max]);
                                return;
                            }
                            this.transportBuilder.at(forward ? "first" : "second").directTo(forward ? "second" : "first")
                                .toAdjacent(destList.length > 0 ? destList[destList.length - 1][primaryKey] : null).update(moveAll);
                        }
                        else {
                            var selectedRows = $source.igGrid("selectedRows");
                            if (nts.uk.util.isNullOrEmpty(selectedRows)) {
                                return;
                            }
                            if (!uk.util.isNullOrUndefined(max) && (selectedRows.length + destList.length > max)) {
                                this.$container.trigger($.Event("swaplistgridsizeexceed"), [$dest, max]);
                                return;
                            }
                            selectedRows.sort(function (one, two) {
                                return one.index - two.index;
                            });
                            var firstSelected = selectedRows[0];
                            var selectedIds = selectedRows.map(function (row) { return row.id; });
                            this.transportBuilder.at(forward ? "first" : "second").directTo(forward ? "second" : "first")
                                .target(selectedIds).toAdjacent(destList.length > 0 ? destList[destList.length - 1][primaryKey] : null).update(moveAll);
                        }
                        var firstSource = this.transportBuilder.getFirst();
                        var secondSource = this.transportBuilder.getSecond();
                        this.swapParts[0].setDataSource(firstSource);
                        this.swapParts[1].setDataSource(secondSource);
                        value(secondSource);
                        $source.igGridSelection("clearSelection");
                        $dest.igGridSelection("clearSelection");
                        if (forward) {
                            var selectIndex = firstSource.length === 0 ? -1
                                : (firstSource.length - 1 < firstSelected.index ? firstSource.length - 1 : firstSelected.index);
                        }
                        else {
                            var selectIndex = secondSource.length === 0 ? -1
                                : (secondSource.length - 1 < firstSelected.index ? secondSource.length - 1 : firstSelected.index);
                        }
                        setTimeout(function () {
                            $source.igGrid("virtualScrollTo", selectIndex);
                            $dest.igGrid("virtualScrollTo", destList.length - 1);
                            if (selectIndex >= 0) {
                                $source.igGridSelection("selectRowById", forward ? firstSource[selectIndex][primaryKey] : secondSource[selectIndex][primaryKey]);
                            }
                            if (!forward) {
                                $dest.ntsGridList("setSelected", selectedIds);
                            }
                        }, 10);
                    };
                    return GridSwapList;
                }(SwapModel));
                var ListItemTransporter = (function () {
                    function ListItemTransporter(firstList, secondList) {
                        this.firstList = firstList;
                        this.secondList = secondList;
                    }
                    ListItemTransporter.prototype.first = function (firstList) {
                        this.firstList = firstList;
                        return this;
                    };
                    ListItemTransporter.prototype.second = function (secondList) {
                        this.secondList = secondList;
                        return this;
                    };
                    ListItemTransporter.prototype.at = function (startAt) {
                        this.startAt = startAt;
                        return this;
                    };
                    ListItemTransporter.prototype.directTo = function (direction) {
                        this.direction = direction;
                        return this;
                    };
                    ListItemTransporter.prototype.out = function (index) {
                        this.outcomeIndex = index;
                        return this;
                    };
                    ListItemTransporter.prototype.into = function (index) {
                        this.incomeIndex = index;
                        return this;
                    };
                    ListItemTransporter.prototype.primary = function (primaryKey) {
                        this.primaryKey = primaryKey;
                        return this;
                    };
                    ListItemTransporter.prototype.target = function (targetIds) {
                        this.targetIds = targetIds;
                        return this;
                    };
                    ListItemTransporter.prototype.toAdjacent = function (adjId) {
                        if (adjId === null)
                            adjId = "ceil";
                        this.adjacentIncomeId = adjId;
                        return this;
                    };
                    ListItemTransporter.prototype.indexOf = function (list, targetId) {
                        var _this = this;
                        return _.findIndex(list, function (elm) { return elm[_this.primaryKey].toString() === targetId.toString(); });
                    };
                    ListItemTransporter.prototype.move = function (src, dest, moveAll) {
                        if (moveAll) {
                            this.moveAllItems(src, dest);
                        }
                        else {
                            this.moveNormal(src, dest);
                        }
                    };
                    ListItemTransporter.prototype.moveNormal = function (src, dest) {
                        for (var i = 0; i < this.targetIds.length; i++) {
                            this.outcomeIndex = this.indexOf(src, this.targetIds[i]);
                            if (this.outcomeIndex === -1)
                                return;
                            var target = src.splice(this.outcomeIndex, 1);
                            this.incomeIndex = this.indexOf(dest, this.adjacentIncomeId) + 1;
                            if (this.incomeIndex === 0) {
                                if (this.adjacentIncomeId === "ceil")
                                    this.incomeIndex = 0;
                                else if (target !== undefined) {
                                    src.splice(this.outcomeIndex, 0, target[0]);
                                    return;
                                }
                            }
                            dest.splice(this.incomeIndex + i, 0, target[0]);
                        }
                    };
                    ListItemTransporter.prototype.moveAllItems = function (src, dest) {
                        dest.push.apply(dest, src);
                        //            dest.splice(0, 0, src);       
                        _.remove(src);
                    };
                    ListItemTransporter.prototype.determineDirection = function () {
                        if (this.startAt.toLowerCase() !== this.direction.toLowerCase()
                            && this.direction.toLowerCase() === "second") {
                            return "firstToSecond";
                        }
                        else if (this.startAt.toLowerCase() !== this.direction.toLowerCase()
                            && this.direction.toLowerCase() === "first") {
                            return "secondToFirst";
                        }
                        else if (this.startAt.toLowerCase() === this.direction.toLowerCase()
                            && this.direction.toLowerCase() === "first") {
                            return "insideFirst";
                        }
                        else
                            return "insideSecond";
                    };
                    ListItemTransporter.prototype.update = function (moveAll) {
                        switch (this.determineDirection()) {
                            case "firstToSecond":
                                this.move(this.firstList, this.secondList, moveAll);
                                break;
                            case "secondToFirst":
                                this.move(this.secondList, this.firstList, moveAll);
                                break;
                            case "insideFirst":
                                this.move(this.firstList, this.firstList, moveAll);
                                break;
                            case "insideSecond":
                                this.move(this.secondList, this.secondList, moveAll);
                                break;
                        }
                    };
                    ListItemTransporter.prototype.getFirst = function () {
                        return this.firstList;
                    };
                    ListItemTransporter.prototype.getSecond = function () {
                        return this.secondList;
                    };
                    ListItemTransporter.prototype.setFirst = function (first) {
                        this.firstList = first;
                    };
                    ListItemTransporter.prototype.setSecond = function (second) {
                        this.secondList = second;
                    };
                    return ListItemTransporter;
                }());
            })(koExtentions = ui_8.koExtentions || (ui_8.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_9) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * SwitchButton binding handler
                 */
                var NtsSwitchButtonBindingHandler = (function () {
                    /**
                     * Constructor.
                     */
                    function NtsSwitchButtonBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsSwitchButtonBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var container = $(element);
                        if (nts.uk.util.isNullOrUndefined(container.attr("tabindex")))
                            container.attr("tabindex", "0");
                        container.data("tabindex", container.attr("tabindex"));
                        var container = $(element);
                        container.keydown(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code === 32) {
                                evt.preventDefault();
                            }
                        });
                        container.keyup(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (container.data("enable") !== false) {
                                if (code === 32) {
                                    var selectedCode = container.find(".nts-switch-button:first").data('swbtn');
                                    data.value(selectedCode);
                                }
                                else if (code === 37 || code === 38) {
                                    var inputList = container.find(".nts-switch-button");
                                    var currentSelect = _.findIndex(inputList, function (item) {
                                        return $(item).data('swbtn') === data.value();
                                    });
                                    var selectedCode = $(inputList[currentSelect - 1]).data('swbtn');
                                    if (!nts.uk.util.isNullOrUndefined(selectedCode)) {
                                        data.value(selectedCode);
                                    }
                                }
                                else if (code === 39 || code === 40) {
                                    var inputList = container.find(".nts-switch-button");
                                    var currentSelect = _.findIndex(inputList, function (item) {
                                        return $(item).data('swbtn') === data.value();
                                    });
                                    var selectedCode = $(inputList[currentSelect + 1]).data('swbtn');
                                    if (!nts.uk.util.isNullOrUndefined(selectedCode)) {
                                        data.value(selectedCode);
                                    }
                                }
                            }
                        });
                        // Default value.
                        var defVal = new nts.uk.util.value.DefaultValue().onReset(container, data.value);
                    };
                    /**
                     * Update
                     */
                    NtsSwitchButtonBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var selectedCssClass = 'selected';
                        // Get options.
                        var options = ko.unwrap(data.options);
                        // Get options value.
                        var optionValue = ko.unwrap(data.optionsValue);
                        var optionText = ko.unwrap(data.optionsText);
                        var selectedValue = ko.unwrap(data.value);
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Container.
                        var container = $(element);
                        container.data("enable", enable);
                        container.addClass("ntsControl switchButton-wrapper");
                        // Remove deleted button.
                        $('button', container).each(function (index, btn) {
                            var $btn = $(btn);
                            var btnValue = $(btn).data('swbtn');
                            // Check if btn is contained in options.
                            var foundFlag = _.findIndex(options, function (opt) {
                                return opt[optionValue] == btnValue;
                            }) != -1;
                            if (!foundFlag) {
                                $btn.remove();
                                return;
                            }
                        });
                        // Start binding new state.
                        _.forEach(options, function (opt) {
                            var value = opt[optionValue];
                            var text = opt[optionText];
                            // Find button.
                            var targetBtn = NtsSwitchButtonBindingHandler.setSelectedClass(container, selectedCssClass, selectedValue, value);
                            if (targetBtn) {
                            }
                            else {
                                // Recreate
                                var btn = $('<button>').text(text)
                                    .addClass('nts-switch-button')
                                    .data('swbtn', value)
                                    .attr('tabindex', "-1")
                                    .on('click', function () {
                                    var selectedValue = $(this).data('swbtn');
                                    data.value(selectedValue);
                                    $('button', container).removeClass(selectedCssClass);
                                    $(this).addClass(selectedCssClass);
                                    //                            container.focus();
                                });
                                if (selectedValue == value) {
                                    btn.addClass(selectedCssClass);
                                }
                                container.append(btn);
                            }
                        });
                        if (enable === true) {
                            $('button', container).prop("disabled", false);
                            container.attr("tabindex", container.data("tabindex"));
                        }
                        else {
                            $('button', container).prop("disabled", true);
                            new nts.uk.util.value.DefaultValue().applyReset(container, data.value);
                            container.attr("tabindex", "-1");
                        }
                    };
                    NtsSwitchButtonBindingHandler.setSelectedClass = function ($container, selectedCssClass, selectedValue, optValue) {
                        var targetBtn;
                        $('button', $container).each(function (index, btn) {
                            var btnValue = $(btn).data('swbtn');
                            if (btnValue == optValue) {
                                targetBtn = $(btn);
                            }
                            if (btnValue == selectedValue) {
                                $(btn).addClass(selectedCssClass);
                            }
                            else {
                                $(btn).removeClass(selectedCssClass);
                            }
                        });
                        return targetBtn;
                    };
                    return NtsSwitchButtonBindingHandler;
                }());
                ko.bindingHandlers['ntsSwitchButton'] = new NtsSwitchButtonBindingHandler();
            })(koExtentions = ui_9.koExtentions || (ui_9.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_10) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * TabPanel Binding Handler
                 */
                var TabPanelBindingHandler = (function () {
                    /**
                     * Constructor.
                     */
                    function TabPanelBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    TabPanelBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var tabs = ko.unwrap(data.dataSource);
                        var direction = ko.unwrap(data.direction || "horizontal");
                        // Container.
                        var container = $(element);
                        // Create title.
                        container.prepend('<ul></ul>');
                        var titleContainer = container.children('ul');
                        for (var i = 0; i < tabs.length; i++) {
                            var id = tabs[i].id;
                            var title = tabs[i].title;
                            titleContainer.append('<li><a href="#' + id + '">' + title + '</a></li>');
                            // Wrap content.
                            var content = tabs[i].content;
                            container.children(content).wrap('<div id="' + id + '"></div>');
                        }
                        container.bind("parentactived", function (evt, dataX) {
                            dataX.child.find("div[role='tabpanel'][aria-hidden='false']:first").removeClass("disappear");
                            //                data.active.valueHasMutated();
                        });
                        container.tabs({
                            create: function (event, ui) {
                                container.find('.ui-tabs-panel').addClass('disappear');
                                ui.panel.removeClass('disappear');
                            },
                            activate: function (evt, ui) {
                                data.active(ui.newPanel[0].id);
                                container.find('.ui-tabs-panel').addClass('disappear');
                                ui.newPanel.removeClass('disappear');
                                container.children('ul').children('.ui-tabs-active').addClass('active');
                                container.children('ul').children('li').not('.ui-tabs-active').removeClass('active');
                                container.children('ul').children('.ui-state-disabled').addClass('disabled');
                                container.children('ul').children('li').not('.ui-state-disabled').removeClass('disabled');
                                var child = ui.newPanel.children().find(".ui-tabs:first");
                                child.trigger("parentactived", { child: child });
                            }
                        }).addClass(direction);
                    };
                    /**
                     * Update
                     */
                    TabPanelBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        // Get tab list.
                        var tabs = ko.unwrap(data.dataSource);
                        // Container.
                        var container = $(element);
                        // Select tab.
                        var activeTab = _.find(tabs, function (tab) {
                            return tab.id == data.active();
                        });
                        var indexActive = tabs.indexOf(activeTab);
                        var oldIndexActive = container.tabs("option", "active");
                        if (oldIndexActive !== indexActive) {
                            container.tabs("option", "active", indexActive);
                        }
                        if (!activeTab.enable() || !activeTab.visible()) {
                            var firstActiveTab = _.find(tabs, function (tab) {
                                return tab.enable() && tab.visible();
                            });
                            if (!nts.uk.util.isNullOrUndefined(firstActiveTab)) {
                                data.active(firstActiveTab.id);
                                var firstIndexActive = tabs.indexOf(firstActiveTab);
                                container.tabs("option", "active", firstIndexActive);
                            }
                        }
                        // Disable & visible tab.
                        tabs.forEach(function (tab) {
                            if (tab.enable()) {
                                container.tabs("enable", '#' + tab.id);
                                container.children('#' + tab.id).children('div').show();
                                container.children('ul').children('li[aria-controls="' + tab.id + '"]').removeClass('disabled');
                            }
                            else {
                                container.tabs("disable", '#' + tab.id);
                                container.children('#' + tab.id).children('div').hide();
                                container.children('ul').children('li[aria-controls="' + tab.id + '"]').addClass('disabled');
                            }
                            if (!tab.visible()) {
                                container.children('ul').children('li[aria-controls="' + tab.id + '"]').hide();
                            }
                            else {
                                container.children('ul').children('li[aria-controls="' + tab.id + '"]').show();
                            }
                        });
                        _.defer(function () { container.children('ul').children('li').attr("tabindex", "-1"); });
                    };
                    return TabPanelBindingHandler;
                }());
                ko.bindingHandlers['ntsTabPanel'] = new TabPanelBindingHandler();
            })(koExtentions = ui_10.koExtentions || (ui_10.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Panel binding handler
                 */
                var NtsPanelBindingHandler = (function () {
                    function NtsPanelBindingHandler() {
                    }
                    /**
                     * Init
                     */
                    NtsPanelBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var width = (data.width !== undefined) ? ko.unwrap(data.width) : null;
                        var height = (data.height !== undefined) ? ko.unwrap(data.height) : null;
                        var direction = (data.direction !== undefined) ? ko.unwrap(data.direction) : "right";
                        var showIcon = (data.showIcon !== undefined) ? ko.unwrap(data.showIcon) : false;
                        var visible = (data.visible !== undefined) ? ko.unwrap(data.visible) : true;
                        var container = $(element);
                        container.addClass("panel ntsPanel caret-background");
                        var caretClass = "caret-" + direction;
                        container.addClass(caretClass + " direction-" + direction);
                        if (showIcon === true) {
                            container.append("<i class='icon icon-searchbox'></i>");
                        }
                    };
                    /**
                     * Update
                     */
                    NtsPanelBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var width = (data.width !== undefined) ? ko.unwrap(data.width) : null;
                        var height = (data.height !== undefined) ? ko.unwrap(data.height) : null;
                        var direction = (data.direction !== undefined) ? ko.unwrap(data.direction) : "right";
                        var showIcon = (data.showIcon !== undefined) ? ko.unwrap(data.showIcon) : false;
                        var visible = (data.visible !== undefined) ? ko.unwrap(data.visible) : null;
                        // Container
                        var container = $(element);
                        if (!nts.uk.util.isNullOrEmpty(width))
                            container.width(width);
                        if (!nts.uk.util.isNullOrEmpty(height))
                            container.height(height);
                        if (!nts.uk.util.isNullOrEmpty(visible)) {
                            if (visible === true)
                                container.show();
                            else
                                container.hide();
                        }
                    };
                    return NtsPanelBindingHandler;
                }());
                ko.bindingHandlers['ntsPanel'] = new NtsPanelBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_11) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * TreeGrid binding handler
                 */
                var NtsTreeGridViewBindingHandler = (function () {
                    /**
                     * Constructor.
                     */
                    function NtsTreeGridViewBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsTreeGridViewBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var ROW_HEIGHT = 24;
                        var HEADER_HEIGHT = 24;
                        // Get data.
                        var data = valueAccessor();
                        var options = ko.unwrap(data.dataSource !== undefined ? data.dataSource : data.options);
                        var optionsValue = ko.unwrap(data.primaryKey !== undefined ? data.primaryKey : data.optionsValue);
                        var optionsText = ko.unwrap(data.primaryText !== undefined ? data.primaryText : data.optionsText);
                        var optionsChild = ko.unwrap(data.childDataKey !== undefined ? data.childDataKey : data.optionsChild);
                        var extColumns = ko.unwrap(data.columns !== undefined ? data.columns : data.extColumns);
                        var initialExpandDepth = ko.unwrap(data.initialExpandDepth);
                        var selectedValues = ko.unwrap(data.selectedValues);
                        var singleValue = ko.unwrap(data.value);
                        var rows = ko.unwrap(data.rows);
                        // Default.
                        var showCheckBox = data.showCheckBox !== undefined ? ko.unwrap(data.showCheckBox) : true;
                        var enable = data.enable !== undefined ? ko.unwrap(data.enable) : true;
                        var height = ko.unwrap(data.height !== undefined ? data.height : 0);
                        var width = ko.unwrap(data.width !== undefined ? data.width : 0);
                        if (extColumns !== undefined && extColumns !== null) {
                            var displayColumns = extColumns;
                        }
                        else {
                            var displayColumns = [
                                { headerText: "コード", key: optionsValue, dataType: "string", hidden: true },
                                { headerText: "コード／名称", key: optionsText, dataType: "string" }
                            ];
                        }
                        var $treegrid = $(element);
                        var tabIndex = nts.uk.util.isNullOrEmpty($treegrid.attr("tabindex")) ? "0" : $treegrid.attr("tabindex");
                        $treegrid.attr("tabindex", "-1");
                        var features = [];
                        features.push({
                            name: "Selection",
                            multipleSelection: true,
                            activation: true,
                            rowSelectionChanged: function (evt, ui) {
                                var selectedRows = ui.selectedRows;
                                if (ko.unwrap(data.multiple)) {
                                    if (ko.isObservable(data.selectedValues)) {
                                        data.selectedValues(_.map(selectedRows, function (row) {
                                            return row.id;
                                        }));
                                    }
                                }
                                else {
                                    if (ko.isObservable(data.value)) {
                                        data.value(selectedRows.length <= 0 ? undefined : ui.row.id);
                                        data.value.valueHasMutated();
                                    }
                                }
                            }
                        });
                        features.push({
                            name: "RowSelectors",
                            enableCheckBoxes: showCheckBox,
                            rowSelectorColumnWidth: showCheckBox ? 40 : 0,
                            enableRowNumbering: false,
                            checkBoxMode: "biState"
                        });
                        features.push({ name: "Resizing" });
                        if (!nts.uk.util.isNullOrEmpty(rows)) {
                            height = rows * ROW_HEIGHT + HEADER_HEIGHT;
                            var colSettings_2 = [];
                            _.forEach(displayColumns, function (c) {
                                if (c["hidden"] === undefined || c["hidden"] === false) {
                                    colSettings_2.push({ columnKey: c["key"], allowTooltips: true });
                                    if (nts.uk.util.isNullOrEmpty(c["columnCssClass"])) {
                                        c["columnCssClass"] = "text-limited";
                                    }
                                    else {
                                        c["columnCssClass"] += " text-limited";
                                    }
                                }
                            });
                            features.push({
                                name: "Tooltips",
                                columnSettings: colSettings_2,
                                visibility: "overflow",
                                showDelay: 200,
                                hideDelay: 200
                            });
                            $treegrid.addClass("row-limited");
                        }
                        $treegrid.data("expand", new ExpandNodeHolder());
                        $treegrid.data("autoExpanding", false);
                        // Init ig grid.
                        $treegrid.igTreeGrid({
                            width: width,
                            height: height,
                            indentation: "12px",
                            dataSource: _.cloneDeep(options),
                            primaryKey: optionsValue,
                            columns: displayColumns,
                            childDataKey: optionsChild,
                            initialExpandDepth: nts.uk.util.isNullOrUndefined(initialExpandDepth) ? 10 : initialExpandDepth,
                            tabIndex: -1,
                            features: features,
                            rowExpanded: function (evt, ui) {
                                if (!$treegrid.data("autoExpanding")) {
                                    var holder = $treegrid.data("expand");
                                    holder.addNode(ui["dataRecord"][optionsValue]);
                                    $treegrid.data("expand", holder);
                                }
                            }, rowCollapsed: function (evt, ui) {
                                if (!$treegrid.data("autoExpanding")) {
                                    var holder = $treegrid.data("expand");
                                    holder.removeNodeAndChilds(ui["dataRecord"], optionsValue, optionsChild);
                                    $treegrid.data("expand", holder);
                                }
                            }, rowsRendered: function (evt, ui) {
                                $treegrid.data("autoExpanding", true);
                                var holder = $treegrid.data("expand");
                                //                    if(!nts.uk.util.isNullOrEmpty(holder.nodes)){
                                _.forEach(holder.nodes, function (node) {
                                    $treegrid.igTreeGrid("expandRow", node);
                                });
                                //                    }
                                $treegrid.data("autoExpanding", false);
                            }
                        });
                        var treeGridId = $treegrid.attr('id');
                        $treegrid.closest('.ui-igtreegrid').addClass('nts-treegridview').attr("tabindex", tabIndex);
                        $treegrid.bind('selectionchanged', function () {
                            if (data.multiple) {
                                var selected = $treegrid.ntsTreeView('getSelected');
                                if (!nts.uk.util.isNullOrEmpty(selected)) {
                                    data.selectedValues(_.map(selected, function (s) { return s.id; }));
                                }
                                else {
                                    data.selectedValues([]);
                                }
                            }
                            else {
                                var selected = $treegrid.ntsTreeView('getSelected');
                                if (!nts.uk.util.isNullOrEmpty(selected)) {
                                    data.value(selected.id);
                                }
                                else {
                                    data.value('');
                                }
                            }
                        });
                        $treegrid.setupSearchScroll("igTreeGrid");
                    };
                    /**
                     * Update
                     */
                    NtsTreeGridViewBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var options = ko.unwrap(data.dataSource !== undefined ? data.dataSource : data.options);
                        var selectedValues = ko.unwrap(data.selectedValues);
                        var singleValue = ko.unwrap(data.value);
                        var $treegrid = $(element);
                        // Update datasource.
                        var originalSource = $(element).igTreeGrid('option', 'dataSource');
                        if (!_.isEqual(originalSource, options)) {
                            $treegrid.igTreeGrid("option", "dataSource", _.cloneDeep(options));
                            $treegrid.igTreeGrid("dataBind");
                        }
                        // Set multiple data source.
                        var multiple = data.multiple != undefined ? ko.unwrap(data.multiple) : true;
                        if ($treegrid.igTreeGridSelection("option", "multipleSelection") !== multiple) {
                            $treegrid.igTreeGridSelection("option", "multipleSelection", multiple);
                        }
                        // Set show checkbox.
                        var showCheckBox = ko.unwrap(data.showCheckBox != undefined ? data.showCheckBox : true);
                        if ($treegrid.igTreeGridRowSelectors("option", "enableCheckBoxes") !== showCheckBox) {
                            $treegrid.igTreeGridRowSelectors("option", "enableCheckBoxes", showCheckBox);
                        }
                        // Clear selection.
                        if ((selectedValues === null || selectedValues === undefined) && (singleValue === null || singleValue === undefined)) {
                            $treegrid.igTreeGridSelection("clearSelection");
                        }
                        else {
                            // Compare value.
                            var olds = _.map($treegrid.igTreeGridSelection("selectedRow"), function (row) {
                                return row.id;
                            });
                            // Not change, do nothing.
                            if (multiple) {
                                if (_.isEqual(selectedValues.sort(), olds.sort())) {
                                    return;
                                }
                                // Update.
                                $treegrid.igTreeGridSelection("clearSelection");
                                selectedValues.forEach(function (val) {
                                    $treegrid.igTreeGridSelection("selectRowById", val);
                                });
                            }
                            else {
                                if (olds.length > 1 && olds[0] === singleValue) {
                                    return;
                                }
                                $treegrid.igTreeGridSelection("clearSelection");
                                $treegrid.igTreeGridSelection("selectRowById", singleValue);
                                ui.ig.tree.grid.expandTo(singleValue, $treegrid);
                            }
                        }
                    };
                    return NtsTreeGridViewBindingHandler;
                }());
                var isEmpty = nts.uk.util.isNullOrEmpty;
                var ExpandNodeHolder = (function () {
                    function ExpandNodeHolder() {
                        this.nodes = [];
                    }
                    ExpandNodeHolder.prototype.isEmpty = function () {
                        return isEmpty(this.nodes);
                    };
                    ExpandNodeHolder.prototype.addNode = function (nodeId) {
                        this.nodes.push(nodeId);
                    };
                    ExpandNodeHolder.prototype.removeNodeAndChilds = function (nodeSource, nodeKey, nodeChildKey) {
                        var ids = Helper.getAllIdFromNodeSource(_.cloneDeep(nodeSource), nodeKey, nodeChildKey);
                        _.remove(this.nodes, function (node) {
                            return ids.indexOf(node) >= 0;
                        });
                    };
                    return ExpandNodeHolder;
                }());
                var Helper;
                (function (Helper) {
                    function getAllIdFromNodeSource(nodeSource, nodeKey, childKey) {
                        var ids = [nodeSource[nodeKey]];
                        var children = [].concat(nodeSource[childKey]);
                        while (!isEmpty(children)) {
                            var currentNode = children.shift();
                            ids.push(currentNode[nodeKey]);
                            if (!isEmpty(currentNode)) {
                                children = children.concat(currentNode[childKey]);
                            }
                        }
                        return ids;
                    }
                    Helper.getAllIdFromNodeSource = getAllIdFromNodeSource;
                    function flatTree(tree, childKey) {
                        var ids = [];
                        _.forEach(tree, function (nodeSource) {
                            ids.push(nodeSource);
                            var children = [].concat(nodeSource[childKey]);
                            while (!isEmpty(children)) {
                                var currentNode = children.shift();
                                ids.push(currentNode);
                                if (!isEmpty(currentNode)) {
                                    children = children.concat(currentNode[childKey]);
                                }
                            }
                        });
                        return ids;
                    }
                    Helper.flatTree = flatTree;
                    function getAllParentId(tree, id, nodeKey, childKey) {
                        var source = _.cloneDeep(tree.igTreeGrid("option", "dataSource"));
                        var parentIds = [];
                        _.forEach(source, function (node) {
                            var result = checkIfInBranch(node, id, nodeKey, childKey);
                            if (result.inThis) {
                                parentIds = [node[nodeKey]].concat(result.ids);
                                return false;
                            }
                        });
                        return parentIds;
                    }
                    Helper.getAllParentId = getAllParentId;
                    function checkIfInBranch(source, id, nodeKey, childKey) {
                        if (source[nodeKey] === id) {
                            return {
                                inThis: true,
                                ids: []
                            };
                        }
                        else {
                            var result_3 = {
                                inThis: false,
                                ids: []
                            };
                            _.forEach(source[childKey], function (node) {
                                result_3 = checkIfInBranch(node, id, nodeKey, childKey);
                                if (result_3.inThis) {
                                    result_3.ids = [node[nodeKey]].concat(result_3.ids);
                                    return false;
                                }
                            });
                            return result_3;
                        }
                    }
                })(Helper || (Helper = {}));
                var ExpandNode = (function () {
                    function ExpandNode(source, nodeKey, childKey, element, nodeLevel) {
                        this.nodeSource = source;
                        this.nodeLevel = nodeLevel;
                        this.element = element;
                        this.nodeKey = nodeKey;
                        this.childKey = childKey;
                    }
                    ExpandNode.prototype.getNode = function () {
                        return this.nodeSource;
                    };
                    return ExpandNode;
                }());
                ko.bindingHandlers['ntsTreeGridView'] = new NtsTreeGridViewBindingHandler();
            })(koExtentions = ui_11.koExtentions || (ui_11.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_12) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * UpDownButton binding handler
                 */
                var NtsUpDownBindingHandler = (function () {
                    /**
                     * Constructor.
                     */
                    function NtsUpDownBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsUpDownBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var $upDown = $(element);
                        if ($upDown.prop("tagName").toLowerCase() !== "div") {
                            throw new Error('The element must be a div');
                        }
                        var data = valueAccessor();
                        var tabIndex = nts.uk.util.isNullOrEmpty($upDown.attr("tabindex")) ? "0" : $upDown.attr("tabindex");
                        $upDown.attr("tabindex", "-1");
                        var elementId = $upDown.attr('id');
                        var comId = ko.unwrap(data.comId);
                        var childField = ko.unwrap(data.childDataKey);
                        var primaryKey = ko.unwrap(data.primaryKey);
                        var height = ko.unwrap(data.height);
                        var targetType = ko.unwrap(data.type);
                        var swapTarget = ko.unwrap(data.swapTarget);
                        if (nts.uk.util.isNullOrUndefined(elementId)) {
                            throw new Error('The element NtsSwapList must have id attribute.');
                        }
                        if (nts.uk.util.isNullOrUndefined(comId)) {
                            throw new Error('The target element of NtsUpDown is required.');
                        }
                        $upDown.addClass("ntsComponent ntsUpDown").append("<div class='upDown-container'/>");
                        $upDown.find(".upDown-container")
                            .append("<button class = 'ntsUpButton ntsButton ntsUpDownButton auto-height' id= '" + elementId + "-up'/>")
                            .append("<button class = 'ntsDownButton ntsButton ntsUpDownButton auto-height' id= '" + elementId + "-down'/>");
                        var $target = $(comId);
                        if (height !== undefined) {
                            $upDown.height(height);
                            $upDown.find(".upDown-container").height(height);
                        }
                        else {
                            var targetHeight = $(comId + "_container").height();
                            if (targetHeight === undefined) {
                                var h = _.find($(comId).attr("data-bind").split(","), function (attr) {
                                    return attr.indexOf("height") >= 0;
                                });
                                if (h !== undefined) {
                                    targetHeight = parseFloat(h.split(":")[1]);
                                }
                            }
                            $upDown.height(targetHeight);
                            $upDown.find(".upDown-container").height(targetHeight);
                        }
                        var $up = $upDown.find(".ntsUpButton");
                        var $down = $upDown.find(".ntsDownButton");
                        $up.append("<i class='icon icon-button-arrow-top'/>");
                        $down.append("<i class='icon icon-button-arrow-bottom'/>");
                        var move = function (upDown, $targetElement) {
                            var multiSelectedRaw = $targetElement.igGrid("selectedRows");
                            var singleSelectedRaw = $targetElement.igGrid("selectedRow");
                            var selected = [];
                            if (multiSelectedRaw !== null) {
                                selected = _.filter(multiSelectedRaw, function (item) {
                                    return item["index"] >= 0;
                                });
                            }
                            else if (singleSelectedRaw !== null) {
                                selected.push(singleSelectedRaw);
                            }
                            else {
                                return;
                            }
                            var source = _.cloneDeep($targetElement.igGrid("option", "dataSource"));
                            var group = 1;
                            var grouped = { "group1": [] };
                            if (selected.length > 0 && selected.length < source.length) {
                                _.forEach(selected, function (sle) {
                                    if (nts.uk.util.isNullOrEmpty($(sle.element).attr("data-row-idx"))) {
                                        var correctIndex = _.findIndex(source, function (s) {
                                            return s[primaryKey].toString() === sle.id.toString();
                                        });
                                        sle.index = correctIndex;
                                    }
                                    else {
                                        sle.index = parseInt($(sle.element).attr("data-row-idx"));
                                    }
                                });
                                var size = selected.length;
                                selected = _.sortBy(selected, "index");
                                _.forEach(selected, function (item, idx) {
                                    grouped["group" + group].push(item);
                                    if (idx !== size - 1 && item["index"] + 1 !== selected[idx + 1]["index"]) {
                                        group++;
                                        grouped["group" + group] = [];
                                    }
                                });
                                var moved = false;
                                _.forEach(_.valuesIn(grouped), function (items) {
                                    var firstIndex = items[0].index;
                                    var lastIndex = items[items.length - 1].index;
                                    if (upDown < 0) {
                                        var canMove = firstIndex > 0;
                                    }
                                    else {
                                        var canMove = lastIndex < source.length - 1;
                                    }
                                    if (canMove) {
                                        var removed = source.splice(firstIndex, items.length);
                                        _.forEach(removed, function (item, idx) {
                                            source.splice(firstIndex + upDown + idx, 0, item);
                                        });
                                        moved = true;
                                    }
                                });
                                if (moved) {
                                    //                        $targetElement.igGrid("virtualScrollTo", 0);
                                    data.targetSource(source);
                                    //                        $targetElement.igGrid("option", "dataSource", source);
                                    //                        $targetElement.igGrid("dataBind");
                                    var index = upDown + grouped["group1"][0].index;
                                    //                        var index = $targetElement.igGrid("selectedRows")[0].index;
                                    _.defer(function () { $targetElement.igGrid("virtualScrollTo", index); });
                                }
                            }
                        };
                        var moveTree = function (upDown, $targetElement) {
                            var multiSelectedRaw = $targetElement.igTreeGrid("selectedRows");
                            var singleSelectedRaw = $targetElement.igTreeGrid("selectedRow");
                            //                var targetSource = ko.unwrap(data.targetSource);
                            var selected;
                            if (multiSelectedRaw !== null) {
                                if (multiSelectedRaw.length !== 1) {
                                    return;
                                }
                                selected = multiSelectedRaw[0];
                            }
                            else if (singleSelectedRaw !== null) {
                                selected.push(singleSelectedRaw);
                            }
                            else {
                                return;
                            }
                            if (selected["index"] < 0) {
                                return;
                            }
                            //                var targetSource = ko.unwrap(data.targetSource);
                            var source = _.cloneDeep($targetElement.igTreeGrid("option", "dataSource"));
                            var result = findChild(upDown, selected["id"], source, false, false);
                            var moved = result.moved;
                            var changed = result.changed;
                            source = result.source;
                            if (moved && changed) {
                                data.targetSource(source);
                                //                    $targetElement.igTreeGrid("option", "dataSource", source);
                                //                    $targetElement.igTreeGrid("dataBind");
                                //                    data.targetSource(source);
                                var index = $targetElement.igTreeGrid("selectedRows")[0].index;
                                if (index !== selected["index"]) {
                                    var scrollTo = _.sumBy(_.filter($target.igTreeGrid("allRows"), function (row) {
                                        return $(row).attr("data-row-idx") < index;
                                    }), function (row) {
                                        return $(row).height();
                                    });
                                    $targetElement.igTreeGrid("scrollContainer").scrollTop(scrollTo);
                                }
                            }
                        };
                        var findChild = function (upDown, key, children, moved, changed) {
                            var index = -1;
                            if (children !== undefined && children !== null && children.length > 0 && !moved && !changed) {
                                _.forEach(children, function (child, idx) {
                                    if (!moved) {
                                        if (child[primaryKey] === key) {
                                            index = idx;
                                            return false;
                                        }
                                        else {
                                            var result = findChild(upDown, key, child[childField], moved, changed);
                                            child[childField] = result.source;
                                            moved = result.moved;
                                            changed = result.changed;
                                        }
                                    }
                                    else {
                                        return false;
                                    }
                                });
                                if (index >= 0) {
                                    if (upDown < 0) {
                                        var canMove = index > 0;
                                    }
                                    else {
                                        var canMove = index < children.length - 1;
                                    }
                                    if (canMove) {
                                        var removed = children.splice(index, 1);
                                        children.splice(index + upDown, 0, removed[0]);
                                        changed = true;
                                    }
                                    moved = true;
                                }
                                return {
                                    source: children,
                                    moved: moved,
                                    changed: changed
                                };
                            }
                            return {
                                source: children,
                                moved: moved,
                                changed: changed
                            };
                        };
                        $up.click(function (event, ui) {
                            if (targetType === "tree") {
                                moveTree(-1, $target);
                            }
                            else if (targetType === "grid") {
                                move(-1, $target);
                            }
                            else if (targetType === "swap") {
                                var swapTargetGrid = swapTarget.toLocaleLowerCase() === "left" ? "-grid1" : "-grid2";
                                move(-1, $(comId + swapTargetGrid));
                            }
                        });
                        $down.click(function (event, ui) {
                            if (targetType === "tree") {
                                moveTree(1, $target);
                            }
                            else if (targetType === "grid") {
                                move(1, $target);
                            }
                            else if (targetType === "swap") {
                                var swapTargetGrid = swapTarget.toLocaleLowerCase() === "left" ? "-grid1" : "-grid2";
                                move(1, $(comId + swapTargetGrid));
                            }
                        });
                        $upDown.find(".ntsUpDownButton").attr("tabindex", tabIndex);
                    };
                    /**
                     * Update
                     */
                    NtsUpDownBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var $upDown = $(element);
                        var elementId = $upDown.attr('id');
                        if (nts.uk.util.isNullOrUndefined(elementId)) {
                            throw new Error('the element NtsSwapList must have id attribute.');
                        }
                        var data = valueAccessor();
                        var enable = ko.unwrap(data.enable);
                        if (enable === false) {
                            $upDown.find(".ntsUpDownButton").prop('disabled', true);
                        }
                        else {
                            $upDown.find(".ntsUpDownButton").prop('disabled', false);
                        }
                    };
                    return NtsUpDownBindingHandler;
                }());
                ko.bindingHandlers['ntsUpDown'] = new NtsUpDownBindingHandler();
            })(koExtentions = ui_12.koExtentions || (ui_12.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Wizard binding handler
                 */
                var WizardBindingHandler = (function () {
                    /**
                     * Constructor.
                     */
                    function WizardBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    WizardBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        // Get step list
                        var options = ko.unwrap(data.steps);
                        var theme = ko.unwrap(data.theme);
                        var cssClass = "nts-wizard " + "theme-" + theme;
                        var active = ko.isObservable(data.active) ? data.active : ko.observable(data.active || 0);
                        // Container
                        var container = $(element);
                        // Create steps
                        for (var i = 0; i < options.length; i++) {
                            var contentClass = ko.unwrap(options[i].content);
                            var htmlStep = container.children('.steps').children(contentClass).html();
                            var htmlContent = container.children('.contents').children(contentClass).html();
                            container.append('<h1 class="' + contentClass + '">' + htmlStep + '</h1>');
                            container.append('<div>' + htmlContent + '</div>');
                        }
                        var icon = container.find('.header .image').data('icon');
                        // Remove html
                        var header = container.children('.header');
                        container.children('.header').remove();
                        container.children('.steps').remove();
                        container.children('.contents').remove();
                        // Create wizard
                        container.steps({
                            headerTag: "h1",
                            bodyTag: "div",
                            transitionEffect: "slideLeft",
                            stepsOrientation: "vertical",
                            titleTemplate: '<div>#title#</div>',
                            enablePagination: false,
                            enableFinishButton: false,
                            autoFocus: false,
                            enableKeyNavigation: false,
                            onStepChanged: function () {
                                // Remove old class.
                                container.children('.steps').children('ul').children('li').removeClass('step-current');
                                container.children('.steps').children('ul').children('li').removeClass('step-prev');
                                container.children('.steps').children('ul').children('li').removeClass('step-next');
                                // Add new class.
                                container.children('.steps').children('ul').children('.done').addClass('disabled');
                                container.children('.steps').children('ul').children('.current').addClass('step-current');
                                container.children('.steps').children('ul').children('.done').addClass('step-prev');
                                container.children('.steps').children('ul').children('.step-current').nextAll('li').not('.done').addClass('step-next');
                                active(container.steps("getCurrentIndex"));
                                if (container.data("waitStepShowed")) {
                                    container.trigger("stepShowed");
                                }
                                return true;
                            }
                        }).data("length", options.length);
                        // Add default class
                        container.addClass(cssClass);
                        container.children('.steps').children('ul').children('li').children('a').before('<div class="nts-steps"></div>');
                        container.children('.steps').children('ul').children('li').children('a').addClass('nts-step-contents');
                        //container.children('.steps').children('ul').children('.first').addClass('begin');
                        container.children('.steps').children('ul').children('.last').addClass('end');
                        container.children('.steps').children('ul').children('li').not('.begin').not('.end').children('.nts-steps').addClass('nts-steps-middle');
                        container.find('.nts-steps-middle').append('<div class="nts-vertical-line"></div><div class="nts-bridge"><div class="nts-point"></div><div class="nts-horizontal-line"></div></div>');
                        // Remove old class
                        container.children('.steps').children('ul').children('li').removeClass('step-current');
                        container.children('.steps').children('ul').children('li').removeClass('step-prev');
                        container.children('.steps').children('ul').children('li').removeClass('step-next');
                        // Add new class
                        container.children('.steps').children('ul').children('.current').addClass('step-current');
                        container.children('.steps').children('ul').children('.done').addClass('step-prev');
                        container.children('.steps').children('ul').children('.step-current').nextAll('li').not('.done').addClass('step-next');
                        // Remove content
                        container.find('.actions').hide();
                        // Add Header
                        container.children('.steps').prepend(header);
                        container.find('.header .image').attr('style', 'background-image: url("' + icon + '")');
                    };
                    /**
                     * Update
                     */
                    WizardBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var active = (data.active !== undefined) ? ko.unwrap(data.active) : 0;
                        // Container
                        var container = $(element);
                        if (container.steps("getCurrentIndex") != active) {
                            container.setStep(active);
                        }
                    };
                    return WizardBindingHandler;
                }());
                ko.bindingHandlers['ntsWizard'] = new WizardBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var NtsLegentButtonBindingHandler = (function () {
                    function NtsLegentButtonBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsLegentButtonBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var $container = $(element);
                        $container.text('■ 凡例');
                        $container.click(function () {
                            showLegendPanel($container, data);
                        });
                    };
                    /**
                     * Update
                     */
                    NtsLegentButtonBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    };
                    return NtsLegentButtonBindingHandler;
                }());
                function getColorCodeFromItem(legendItem) {
                    return uk.util.optional.of(legendItem.cssClass)
                        .map(function (cc) { return getColorCodeFromCssClass(cc); })
                        .orElse(legendItem.colorCode);
                }
                function getColorCodeFromCssClass(legendCssClass) {
                    var $temp = $('<span/>').addClass(legendCssClass.className)
                        .hide()
                        .appendTo('body');
                    var colorCode = $temp.css(legendCssClass.colorPropertyName);
                    $temp.remove();
                    return colorCode;
                }
                function showLegendPanel($legendButton, options) {
                    var legendSize = 18;
                    var hasTemplate = !nts.uk.util.isNullOrEmpty(options.template);
                    var $panel = $('<div/>').addClass('nts-legendbutton-panel');
                    options.items.forEach(function (item) {
                        if (hasTemplate) {
                            $('<div/>').addClass('legend-item')
                                .append(extractTemplate(options.template, item))
                                .appendTo($panel);
                        }
                        else {
                            $('<div/>').addClass('legend-item')
                                .append($('<div/>')
                                .addClass('legend-item-symbol')
                                .css({
                                'background-color': getColorCodeFromItem(item),
                                width: legendSize + 'px',
                                height: legendSize + 'px'
                            })
                                .text('　'))
                                .append($('<div/>')
                                .addClass('legend-item-label')
                                .text(item.labelText))
                                .appendTo($panel);
                        }
                    });
                    $panel.appendTo('body').position({
                        my: 'left top',
                        at: 'left bottom',
                        of: $legendButton
                    });
                    _.defer(function () {
                        $(window).bind('mousedown.legendpanel', function () {
                            $panel.remove();
                            $(window).unbind('mousedown.legendpanel');
                        });
                    });
                }
                function extractTemplate(template, item) {
                    var extracted = _.clone(template);
                    var changeTextIndex = extracted.indexOf("#{");
                    while (changeTextIndex > -1) {
                        var closeComa = extracted.indexOf("}", changeTextIndex);
                        var textToChange = extracted.substring(changeTextIndex, closeComa + 1);
                        extracted = extracted.replace(new RegExp(textToChange, 'g'), item[textToChange.substring(2, textToChange.length - 1)]);
                        changeTextIndex = extracted.indexOf("#{");
                    }
                    return extracted;
                }
                ko.bindingHandlers['ntsLegendButton'] = new NtsLegentButtonBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var enums;
        (function (enums) {
            enums.NtsCharset = [
                {
                    value: 1,
                    fieldName: "UTF8",
                    localizedName: "UTF-8"
                },
                {
                    value: 2,
                    fieldName: "UTF8_WITH_BOM",
                    localizedName: "UTF-8 BOM"
                },
                {
                    value: 3,
                    fieldName: "SHIFT_JIS",
                    localizedName: "Shift-JIS"
                },
            ];
        })(enums = uk.enums || (uk.enums = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_13) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Accordion binding handler
                 */
                var NtsCharsetSettingBindingHandler = (function () {
                    function NtsCharsetSettingBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsCharsetSettingBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var value = (data.value !== undefined) ? ko.unwrap(data.value) : null;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var container = $(element);
                        container.addClass("ntsControl nts-charset-setting");
                        if (nts.uk.util.isNullOrUndefined(container.attr("tabindex"))) {
                            container.attr("tabindex", "0");
                        }
                        container.keypress(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code === 32) {
                                container.igCombo("openDropDown");
                                evt.preventDefault();
                            }
                        });
                        container.igCombo({
                            dataSource: nts.uk.enums.NtsCharset,
                            valueKey: "value",
                            textKey: 'localizedName',
                            mode: "dropdown",
                            visibleItemsCount: 5,
                            disabled: !enable,
                            placeHolder: '',
                            tabIndex: -1,
                            enableClearButton: false,
                            initialSelectedItems: [
                                { value: value }
                            ],
                            selectionChanged: function (evt, ui) {
                                if (ui.items.length > 0) {
                                    data.value(ui.items[0].data["value"]);
                                }
                            }
                        });
                    };
                    /**
                     * Update
                     */
                    NtsCharsetSettingBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var value = (data.value !== undefined) ? ko.unwrap(data.value) : null;
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var container = $(element);
                        container.igCombo("option", "disabled", !enable);
                        if (!nts.uk.util.isNullOrUndefined(value) && container.igCombo("value") != value) {
                            container.igCombo("value", value);
                        }
                    };
                    return NtsCharsetSettingBindingHandler;
                }());
                ko.bindingHandlers['ntsCharsetSetting'] = new NtsCharsetSettingBindingHandler();
            })(koExtentions = ui_13.koExtentions || (ui_13.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_14) {
            var contextmenu;
            (function (contextmenu) {
                var ContextMenu = (function () {
                    /**
                     * Create an instance of ContextMenu. Auto call init() method
                     *
                     * @constructor
                     * @param {selector} Jquery selector for elements need to show ContextMenu
                     * @param {items} List ContextMenuItem for ContextMenu
                     * @param {enable} (Optinal) Set enable/disable for ContextMenu
                     */
                    function ContextMenu(selector, items, enable) {
                        this.selector = selector;
                        this.items = items;
                        this.enable = (enable !== undefined) ? enable : true;
                        this.init();
                    }
                    /**
                     * Create ContextMenu and bind event in DOM
                     */
                    ContextMenu.prototype.init = function () {
                        var self = this;
                        // Remove ContextMenu with same 'selector' (In case Ajax call will re-create DOM elements)
                        $('body .ntsContextMenu').each(function () {
                            if ($(this).data("selector") === self.selector) {
                                $("body").off("contextmenu", self.selector);
                                $(this).remove();
                            }
                        });
                        // Initial
                        self.guid = nts.uk.util.randomId();
                        var $contextMenu = $("<ul id='" + self.guid + "' class='ntsContextMenu'></ul>").data("selector", self.selector).hide();
                        self.createMenuItems($contextMenu);
                        $('body').append($contextMenu);
                        // Binding contextmenu event
                        $("html").on("contextmenu", self.selector, function (event) {
                            if (self.enable === true) {
                                event.preventDefault();
                                self.target = event.target;
                                $contextMenu.show().position({
                                    my: "left+2 top+2",
                                    of: event,
                                    collision: "fit"
                                });
                            }
                        });
                        // Hiding when click outside
                        $("html").on("mousedown", function (event) {
                            if (!$contextMenu.is(event.target) && $contextMenu.has(event.target).length === 0) {
                                $contextMenu.hide();
                            }
                        });
                    };
                    /**
                     * Remove and unbind ContextMenu event
                     */
                    ContextMenu.prototype.destroy = function () {
                        // Unbind contextmenu event
                        $("html").off("contextmenu", this.selector);
                        $("#" + this.guid).remove();
                    };
                    /**
                     * Re-create ContextMenu. Useful when you change various things in ContextMenu.items
                     */
                    ContextMenu.prototype.refresh = function () {
                        this.destroy();
                        this.init();
                    };
                    /**
                     * Get a ContextMenuItem instance
                     *
                     * @param {target} Can be string or number. String type will select item by "key", Number type will select item by index
                     * @return {any} Return ContextMenuItem if found or undefiend
                     */
                    ContextMenu.prototype.getItem = function (target) {
                        if (typeof target === "number") {
                            return this.items[target];
                        }
                        else if (typeof target === "string") {
                            return _.find(this.items, ["key", target]);
                        }
                        else {
                            return undefined;
                        }
                    };
                    /**
                     * Add an ContextMenuItem instance to ContextMenu
                     *
                     * @param {item} An ContextMenuItem instance
                     */
                    ContextMenu.prototype.addItem = function (item) {
                        this.items.push(item);
                        this.refresh();
                    };
                    /**
                     * Remove item with given "key" or index
                     *
                     * @param {target} Can be string or number. String type will select item by "key", Number type will select item by index
                     */
                    ContextMenu.prototype.removeItem = function (target) {
                        var item = this.getItem(target);
                        if (item !== undefined) {
                            _.remove(this.items, item);
                            this.refresh();
                        }
                    };
                    /**
                     * Enable/Disable ContextMenu. If disable right-click will have default behavior
                     *
                     * @param {enable} A boolean value set enable/disable
                     */
                    ContextMenu.prototype.setEnable = function (enable) {
                        this.enable = enable;
                    };
                    /**
                     * Enable/Disable item with given "key" or index
                     *
                     * @param {enable} A boolean value set enable/disable
                     * @param {target} Can be string or number. String type will select item by "key", Number type will select item by index
                     */
                    ContextMenu.prototype.setEnableItem = function (enable, target) {
                        var item = this.getItem(target);
                        item.enable = enable;
                        this.refresh();
                    };
                    /**
                     * Show/Hide item with given "key" or index
                     *
                     * @param {enable} A boolean value set visible/hidden
                     * @param {target} Can be string or number. String type will select item by "key", Number type will select item by index
                     */
                    ContextMenu.prototype.setVisibleItem = function (visible, target) {
                        var item = this.getItem(target);
                        item.visible = visible;
                        this.refresh();
                    };
                    ContextMenu.prototype.createMenuItems = function (container) {
                        var self = this;
                        _.forEach(self.items, function (item) {
                            if (item.key !== "divider") {
                                var menuClasses = "menu-item ";
                                menuClasses += (item.enable === true) ? "" : "disabled ";
                                menuClasses += (item.visible === true) ? "" : "hidden ";
                                var menuItem = $("<li class='" + menuClasses + "'><span class='menu-icon " + item.icon + "'></span>" + item.text + "</li>")
                                    .data("key", item.key)
                                    .on("click", function () {
                                    if (!$(this).hasClass("disabled")) {
                                        item.handler(self.target);
                                        container.hide();
                                    }
                                }).appendTo(container);
                            }
                            else {
                                var menuItem = $("<li class='menu-item divider'></li>").appendTo(container);
                            }
                        });
                    };
                    return ContextMenu;
                }());
                contextmenu.ContextMenu = ContextMenu;
                var ContextMenuItem = (function () {
                    function ContextMenuItem(key, text, handler, icon, visible, enable) {
                        this.key = key;
                        this.text = text;
                        this.handler = (handler !== undefined) ? handler : $.noop;
                        this.icon = (icon) ? icon : "";
                        this.visible = (visible !== undefined) ? visible : true;
                        this.enable = (enable !== undefined) ? enable : true;
                    }
                    return ContextMenuItem;
                }());
                contextmenu.ContextMenuItem = ContextMenuItem;
            })(contextmenu = ui_14.contextmenu || (ui_14.contextmenu = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="generic.d.ts/jquery.d.ts"/>
/// <reference path="generic.d.ts/jquery.steps.d.ts"/>
/// <reference path="generic.d.ts/igniteui.d.ts"/>
/// <reference path="generic.d.ts/jqueryui.d.ts"/>
/// <reference path="generic.d.ts/knockout.d.ts"/>
/// <reference path="generic.d.ts/knockout.mapping.d.ts"/>
/// <reference path="generic.d.ts/lodash.d.ts"/>
/// <reference path="generic.d.ts/moment.d.ts"/>
/// <reference path="generic.d.ts/require.d.ts"/>
/// <reference path="ui/viewcontext.d.ts"/>
/// <reference path="util.ts"/>
/// <reference path="text.ts"/>
/// <reference path="number.ts"/>
/// <reference path="time.ts"/>
/// <reference path="time/minutesbased/minutesbased.ts"/>
/// <reference path="time/minutesbased/minutesbased_duration.ts"/>
/// <reference path="time/minutesbased/minutesbased_clock.ts"/>
/// <reference path="time/minutesbased/minutesbased_withdayattr.ts"/>
/// <reference path="request.ts"/>
/// <reference path="ui/init.ts"/>
/// <reference path="ui/notify.ts"/>
/// <reference path="ui/validation.ts"/>
/// <reference path="ui/errors.ts"/>
/// <reference path="ui/ui.ts"/>
/// <reference path="ui/dialog-options.ts"/>
/// <reference path="ui/textbox-options.ts"/>
/// <reference path="ui/jquery-ext.ts"/>
/// <reference path="ui/ko-ext.ts"/>
/// <reference path="ui/ko-ext/checkbox-ko-ext.ts"/>
/// <reference path="ui/ko-ext/combobox-ko-ext.ts"/>
/// <reference path="ui/ko-ext/datepicker-ko-ext.ts"/>
/// <reference path="ui/ko-ext/dialog-ko-ext.ts"/>
/// <reference path="ui/ko-ext/editor-ko-ext.ts"/>
/// <reference path="ui/ko-ext/formlabel-ko-ext.ts"/>
/// <reference path="ui/ko-ext/gridlist-ko-ext.ts"/>
/// <reference path="ui/ko-ext/listbox-ko-ext.ts"/>
/// <reference path="ui/ko-ext/radiobox-ko-ext.ts"/> 
/// <reference path="ui/ko-ext/searchbox-ko-ext.ts"/>
/// <reference path="ui/ko-ext/swaplist-ko-ext.ts"/>
/// <reference path="ui/ko-ext/switch-button-ko-ext.ts"/>
/// <reference path="ui/ko-ext/tabpanel-ko-ext.ts"/>
/// <reference path="ui/ko-ext/panel-ko-ext.ts"/> 
/// <reference path="ui/ko-ext/treegrid-ko-ext.ts"/>
/// <reference path="ui/ko-ext/updown-button-ko-ext.ts"/>
/// <reference path="ui/ko-ext/wizard-ko-ext.ts"/>
/// <reference path="ui/ko-ext/legendbutton-ko-ext.ts"/>
/// <reference path="ui/ko-ext/charset-setting-ko-ext.ts"/>
/// <reference path="ui/function-wrap/contextmenu.ts"/> 
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_15) {
            var option;
            (function (option_2) {
                var DialogOption = (function () {
                    function DialogOption() {
                        this.show = false;
                    }
                    return DialogOption;
                }());
                option_2.DialogOption = DialogOption;
                var ConfirmDialogOption = (function (_super) {
                    __extends(ConfirmDialogOption, _super);
                    function ConfirmDialogOption(option) {
                        _super.call(this);
                        // Default value
                        this.modal = (option && option.modal !== undefined) ? option.modal : true;
                        this.buttons = [];
                        // Add OK Button
                        this.buttons.push({
                            text: "OK",
                            "class": "yes",
                            size: "large",
                            color: "proceed",
                            click: function (viewmodel, ui) {
                                viewmodel.okButtonClicked();
                                $(ui).dialog("close");
                            }
                        });
                    }
                    return ConfirmDialogOption;
                }(DialogOption));
                option_2.ConfirmDialogOption = ConfirmDialogOption;
                var DelDialogOption = (function (_super) {
                    __extends(DelDialogOption, _super);
                    function DelDialogOption(option) {
                        _super.call(this);
                        // Default value
                        this.modal = (option && option.modal !== undefined) ? option.modal : true;
                        this.buttons = [];
                        // Add OK Button
                        this.buttons.push({
                            text: "はい",
                            "class": "yes ",
                            size: "large",
                            color: "danger",
                            click: function (viewmodel, ui) {
                                viewmodel.okButtonClicked();
                                ui.dialog("close");
                            }
                        });
                        // Add Cancel Button
                        this.buttons.push({
                            text: "いいえ",
                            "class": "no ",
                            size: "large",
                            color: "",
                            click: function (viewmodel, ui) {
                                viewmodel.cancelButtonClicked();
                                ui.dialog("close");
                            }
                        });
                    }
                    return DelDialogOption;
                }(DialogOption));
                option_2.DelDialogOption = DelDialogOption;
                var OKDialogOption = (function (_super) {
                    __extends(OKDialogOption, _super);
                    function OKDialogOption(option) {
                        _super.call(this);
                        // Default value
                        this.modal = (option && option.modal !== undefined) ? option.modal : true;
                        this.buttons = [];
                        // Add OK Button
                        this.buttons.push({
                            text: "はい",
                            "class": "yes ",
                            size: "large",
                            color: "proceed",
                            click: function (viewmodel, ui) {
                                viewmodel.okButtonClicked();
                                ui.dialog("close");
                            }
                        });
                        // Add Cancel Button
                        this.buttons.push({
                            text: "いいえ",
                            "class": "no ",
                            size: "large",
                            color: "",
                            click: function (viewmodel, ui) {
                                viewmodel.cancelButtonClicked();
                                ui.dialog("close");
                            }
                        });
                    }
                    return OKDialogOption;
                }(DialogOption));
                option_2.OKDialogOption = OKDialogOption;
                var ErrorDialogOption = (function (_super) {
                    __extends(ErrorDialogOption, _super);
                    function ErrorDialogOption(option) {
                        _super.call(this);
                        // Default value
                        this.headers = (option && option.headers) ? option.headers : [
                            new nts.uk.ui.errors.ErrorHeader("messageText", "エラー内容", "auto", true),
                            new nts.uk.ui.errors.ErrorHeader("errorCode", "エラーコード", 150, true)
                        ];
                        this.modal = (option && option.modal !== undefined) ? option.modal : false;
                        this.displayrows = (option && option.displayrows) ? option.displayrows : 10;
                        //this.maxrows = (option && option.maxrows) ? option.maxrows : 1000;
                        this.autoclose = (option && option.autoclose !== undefined) ? option.autoclose : true;
                        this.buttons = [];
                        // Add Close Button
                        this.buttons.push({
                            text: "閉じる",
                            "class": "yes ",
                            size: "large",
                            color: "",
                            click: function (viewmodel, ui) {
                                viewmodel.closeButtonClicked();
                                ui.dialog("close");
                            }
                        });
                    }
                    return ErrorDialogOption;
                }(DialogOption));
                option_2.ErrorDialogOption = ErrorDialogOption;
                var ErrorDialogWithTabOption = (function (_super) {
                    __extends(ErrorDialogWithTabOption, _super);
                    function ErrorDialogWithTabOption(option) {
                        _super.call(this);
                        // Default value
                        this.headers = (option && option.headers) ? option.headers : [
                            new ui_15.errors.ErrorHeader("tab", "タブ", 90, true),
                            new ui_15.errors.ErrorHeader("location", "エラー箇所", 115, true),
                            new ui_15.errors.ErrorHeader("message", "エラー詳細", 250, true)
                        ];
                        this.modal = (option && option.modal !== undefined) ? option.modal : false;
                        this.displayrows = (option && option.displayrows) ? option.displayrows : 10;
                        //this.maxrows = (option && option.maxrows) ? option.maxrows : 1000;
                        this.autoclose = (option && option.autoclose !== undefined) ? option.autoclose : true;
                        this.buttons = [];
                        // Add Close Button
                        this.buttons.push({
                            text: "閉じる",
                            "class": "yes ",
                            size: "large",
                            color: "",
                            click: function (viewmodel, ui) {
                                viewmodel.closeButtonClicked();
                                ui.dialog("close");
                            }
                        });
                    }
                    return ErrorDialogWithTabOption;
                }(ErrorDialogOption));
                option_2.ErrorDialogWithTabOption = ErrorDialogWithTabOption;
                var DialogButton = (function () {
                    function DialogButton() {
                    }
                    DialogButton.prototype.click = function (viewmodel, ui) { };
                    ;
                    return DialogButton;
                }());
                option_2.DialogButton = DialogButton;
            })(option = ui_15.option || (ui_15.option = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var file;
            (function (file_1) {
                var FileDownload = (function () {
                    function FileDownload(servicePath, data) {
                        var self = this;
                        self.servicePath = servicePath;
                        self.data = data;
                        self.isFinishTask = ko.observable(false);
                        self.isFinishTask.subscribe(function (value) {
                            if (value) {
                                clearInterval(self.interval);
                                self.isFinishTask(false);
                                self.download();
                            }
                        });
                    }
                    FileDownload.prototype.isTaskFinished = function (file) {
                        var options = {
                            dataType: 'text',
                            contentType: 'text/plain'
                        };
                        uk.request.ajax("file/file/isfinished", file.taskId).done(function (res) {
                            file.isFinishTask(res);
                        }).fail(function (error) {
                            file.reject(error);
                        });
                    };
                    FileDownload.prototype.print = function () {
                        var self = this;
                        self.deferred = $.Deferred();
                        var options = {
                            dataType: 'text',
                            contentType: 'application/json'
                        };
                        uk.request.ajax(self.servicePath, self.data, options).done(function (res) {
                            self.taskId = res;
                            self.interval = setInterval(self.isTaskFinished, 1000, self);
                        }).fail(function (error) {
                            self.deferred.reject(error);
                        });
                        return self.deferred.promise();
                    };
                    FileDownload.prototype.download = function () {
                        var self = this;
                        window.location.href = ("http://localhost:8080/nts.uk.pr.web/webapi/file/file/dl/" + self.taskId);
                        if (self.deferred) {
                            self.deferred.resolve();
                        }
                    };
                    return FileDownload;
                }());
                file_1.FileDownload = FileDownload;
            })(file = ui.file || (ui.file = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_16) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Dialog binding handler
                 */
                var NtsDateRangePickerBindingHandler = (function () {
                    function NtsDateRangePickerBindingHandler() {
                    }
                    /**
                     * Init. sssss
                     */
                    NtsDateRangePickerBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var $container = $(element);
                        var dateType = ko.unwrap(data.type);
                        var maxRange = ko.unwrap(data.maxRange);
                        var value = data.value;
                        var rangeName = ko.unwrap(data.name);
                        var startName = ko.unwrap(data.startName);
                        var endName = ko.unwrap(data.endName);
                        var enable = data.enable === undefined ? true : ko.unwrap(data.enable);
                        var showNextPrevious = data.showNextPrevious === undefined ? false : ko.unwrap(data.showNextPrevious);
                        var required = ko.unwrap(data.required);
                        var id = nts.uk.util.randomId();
                        var tabIndex = nts.uk.util.isNullOrEmpty($container.attr("tabindex")) ? "0" : $container.attr("tabindex");
                        $container.data("tabindex", tabIndex);
                        $container.removeAttr("tabindex");
                        $container.append("<div class='ntsDateRange_Container' id='" + id + "' />");
                        var $datePickerArea = $container.find(".ntsDateRange_Container");
                        $datePickerArea.append("<div class='ntsDateRangeComponent ntsControl ntsDateRange'>" +
                            "<div class='ntsDateRangeComponent ntsStartDate ntsControl nts-datepicker-wrapper'/><div class='ntsDateRangeComponent ntsRangeLabel'><label>～</label></div>" +
                            "<div class='ntsDateRangeComponent ntsEndDate ntsControl nts-datepicker-wrapper' /></div>");
                        $datePickerArea.data("required", required);
                        var dateFormat = (dateType !== 'yearmonth') ? "YYYY/MM/DD" : 'YYYY/MM';
                        var ISOFormat = uk.text.getISOFormat(dateFormat);
                        ISOFormat = ISOFormat.replace(/d/g, "").trim();
                        if (showNextPrevious === true) {
                            $datePickerArea.append("<div class= 'ntsDateRangeComponent ntsDateNextButton_Container ntsRangeButton_Container'>" +
                                "<button class = 'ntsDateNextButton ntsButton ntsDateRangeButton ntsDateRange_Component auto-height'/></div>");
                            $datePickerArea.prepend("<div class='ntsDateRangeComponent ntsDatePreviousButton_Container ntsRangeButton_Container'>" +
                                "<button class = 'ntsDatePrevButton ntsButton ntsDateRangeButton ntsDateRange_Component auto-height'/></div>");
                            var $nextButton = $container.find(".ntsDateNextButton").text("▶").css("margin-left", "3px");
                            var $prevButton = $container.find(".ntsDatePrevButton").text("◀").css("margin-right", "3px");
                            $nextButton.click(function (evt, ui) {
                                var $startDate = $container.find(".ntsStartDatePicker");
                                var $endDate = $container.find(".ntsEndDatePicker");
                                var oldValue = value();
                                var currentStart = $startDate.val();
                                var currentEnd = $endDate.val();
                                if (!nts.uk.util.isNullOrEmpty(currentStart)) {
                                    var startDate = moment(currentStart, dateFormat);
                                    if (startDate.isValid()) {
                                        var isEndOfMonth = startDate.daysInMonth() === startDate.date();
                                        startDate.month(startDate.month() + 1);
                                        if (isEndOfMonth) {
                                            startDate.endOf("month");
                                        }
                                        oldValue.startDate = startDate.format(dateFormat);
                                    }
                                }
                                if (!nts.uk.util.isNullOrEmpty(currentEnd)) {
                                    var endDate = moment(currentEnd, dateFormat);
                                    if (endDate.isValid()) {
                                        var isEndOfMonth = endDate.daysInMonth() === endDate.date();
                                        endDate.month(endDate.month() + 1);
                                        if (isEndOfMonth) {
                                            endDate.endOf("month");
                                        }
                                        oldValue.endDate = endDate.format(dateFormat);
                                    }
                                }
                                value(oldValue);
                            });
                            $prevButton.click(function (evt, ui) {
                                var $startDate = $container.find(".ntsStartDatePicker");
                                var $endDate = $container.find(".ntsEndDatePicker");
                                var oldValue = value();
                                var currentStart = $startDate.val();
                                var currentEnd = $endDate.val();
                                if (!nts.uk.util.isNullOrEmpty(currentStart)) {
                                    var startDate = moment(currentStart, dateFormat);
                                    if (startDate.isValid()) {
                                        var isEndOfMonth = startDate.daysInMonth() === startDate.date();
                                        startDate.month(startDate.month() - 1);
                                        if (isEndOfMonth) {
                                            startDate.endOf("month");
                                        }
                                        oldValue.startDate = startDate.format(dateFormat);
                                    }
                                }
                                if (!nts.uk.util.isNullOrEmpty(currentEnd)) {
                                    var endDate = moment(currentEnd, dateFormat);
                                    if (endDate.isValid()) {
                                        var isEndOfMonth = endDate.daysInMonth() === endDate.date();
                                        endDate.month(endDate.month() - 1);
                                        if (isEndOfMonth) {
                                            endDate.endOf("month");
                                        }
                                        oldValue.endDate = endDate.format(dateFormat);
                                    }
                                }
                                value(oldValue);
                            });
                        }
                        var $startDateArea = $datePickerArea.find(".ntsStartDate");
                        var $endDateArea = $datePickerArea.find(".ntsEndDate");
                        $startDateArea.append("<input id='" + id + "-startInput'  class='ntsDatepicker nts-input ntsStartDatePicker ntsDateRange_Component' />");
                        $endDateArea.append("<input id='" + id + "-endInput' class='ntsDatepicker nts-input ntsEndDatePicker ntsDateRange_Component' />");
                        var $input = $container.find(".ntsDatepicker");
                        // Init Datepicker
                        $input.datepicker({
                            language: 'ja-JP',
                            format: ISOFormat,
                            autoHide: true,
                        });
                        rangeName = nts.uk.util.isNullOrUndefined(rangeName) ? "期間入力フォーム" : nts.uk.resource.getControlName(rangeName);
                        startName = nts.uk.util.isNullOrUndefined(startName) ? "期間入力フォーム開始" : nts.uk.resource.getControlName(startName);
                        endName = nts.uk.util.isNullOrUndefined(endName) ? "期間入力フォーム終了" : nts.uk.resource.getControlName(endName);
                        var $ntsDateRange = $container.find(".ntsRangeLabel");
                        var getMessage = nts.uk.resource.getMessage;
                        var validateProcess = function (newText, $target, isStart, oldValue, result) {
                            if (nts.uk.util.isNullOrEmpty(newText) && $datePickerArea.data("required") === true) {
                                $target.ntsError('set', getMessage('FND_E_REQ_INPUT', [isStart ? startName : endName]), 'FND_E_REQ_INPUT');
                            }
                            else if (!result.isValid) {
                                $target.ntsError('set', result.errorMessage, result.errorCode);
                            }
                            else if (!nts.uk.util.isNullOrEmpty(newText)) {
                                var startDate = moment(oldValue.startDate, dateFormat);
                                var endDate = moment(oldValue.endDate, dateFormat);
                                if (endDate.isBefore(startDate)) {
                                    $ntsDateRange.ntsError('set', getMessage("FND_E_SPAN_REVERSED", [rangeName]), "FND_E_SPAN_REVERSED");
                                }
                                else if (dateFormat === "YYYY/MM/DD" && maxRange === "oneMonth") {
                                    var maxDate = startDate.add(31, "days");
                                    if (endDate.isAfter(maxDate)) {
                                        $ntsDateRange.ntsError('set', getMessage("FND_E_SPAN_OVER_MONTH", [rangeName]), "FND_E_SPAN_OVER_MONTH");
                                    }
                                }
                                else if (maxRange === "oneYear") {
                                    var maxDate = _.cloneDeep(startDate);
                                    if (dateFormat === "YYYY/MM/DD") {
                                        var currentDate = startDate.date();
                                        var isEndMonth = currentDate === startDate.endOf("months").date();
                                        var isStartMonth = currentDate === 1;
                                        //                        maxDate = maxDate.add(1, 'year').add(-1, "months");
                                        maxDate = maxDate.date(1).add(1, 'year');
                                        if (isStartMonth) {
                                            maxDate = maxDate.month(maxDate.month() - 1).endOf("months");
                                        }
                                        else if (isEndMonth) {
                                            maxDate = maxDate.endOf("months").add(-1, "days");
                                        }
                                        else {
                                            maxDate = maxDate.date(currentDate - 1);
                                        }
                                    }
                                    else {
                                        maxDate = maxDate.add(1, 'year').add(-1, "months");
                                    }
                                    if (endDate.isAfter(maxDate)) {
                                        $ntsDateRange.ntsError('set', getMessage("FND_E_SPAN_OVER_YEAR", [rangeName]), "FND_E_SPAN_OVER_YEAR");
                                    }
                                }
                            }
                        };
                        $input.on("change", function (e) {
                            var $target = $(e.target);
                            var newText = $target.val();
                            $target.ntsError('clear');
                            $ntsDateRange.ntsError("clear");
                            var isStart = $target.hasClass("ntsStartDatePicker");
                            var validator = new ui_16.validation.TimeValidator(isStart ? startName : endName, "", { required: false, outputFormat: dateFormat, valueType: "string" });
                            var result = validator.validate(newText);
                            var oldValue = value();
                            if ($target.hasClass("ntsStartDatePicker")) {
                                oldValue.startDate = result.isValid ? result.parsedValue : newText;
                            }
                            else {
                                oldValue.endDate = result.isValid ? result.parsedValue : newText;
                            }
                            validateProcess(newText, $target, isStart, oldValue, result);
                            value(oldValue);
                        });
                        $input.on("blur", function (e) {
                            var isStart = $(e.target).hasClass("ntsStartDatePicker");
                            var newText = $(e.target).val();
                            if (nts.uk.util.isNullOrEmpty(newText) && $datePickerArea.data("required") === true) {
                                $(e.target).ntsError('set', getMessage('FND_E_REQ_INPUT', [isStart ? startName : endName]), 'FND_E_REQ_INPUT');
                            }
                            else {
                                var validator = new ui_16.validation.TimeValidator(isStart ? startName : endName, "", { required: false, outputFormat: dateFormat, valueType: "string" });
                                var result = validator.validate(newText);
                                if (!result.isValid) {
                                    $(e.target).ntsError('set', result.errorMessage, result.errorCode);
                                }
                            }
                        });
                        $input.on('validate', (function (e) {
                            var $target = $(e.target);
                            var newText = $target.val();
                            var isStart = $target.hasClass("ntsStartDatePicker");
                            var oldValue = value();
                            var validator = new ui_16.validation.TimeValidator(isStart ? startName : endName, "", { required: false, outputFormat: dateFormat, valueType: "string" });
                            var result = validator.validate(newText);
                            $target.ntsError('clear');
                            $ntsDateRange.ntsError("clear");
                            validateProcess(newText, $target, isStart, oldValue, result);
                        }));
                        $container.find(".ntsDateRange_Component").attr("tabindex", tabIndex);
                    };
                    /**
                     * Update
                     */
                    NtsDateRangePickerBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var $container = $(element);
                        var dateType = ko.unwrap(data.type);
                        var maxRange = ko.unwrap(data.maxRange);
                        var dataName = ko.unwrap(data.name);
                        var enable = data.enable === undefined ? true : ko.unwrap(data.enable);
                        var required = ko.unwrap(data.required);
                        var dateFormat = (dateType !== 'yearmonth') ? "YYYY/MM/DD" : 'YYYY/MM';
                        var ISOFormat = uk.text.getISOFormat(dateFormat);
                        ISOFormat = ISOFormat.replace(/d/g, "").trim();
                        var $input = $container.find(".ntsDatepicker");
                        var $startDate = $container.find(".ntsStartDatePicker");
                        var $endDate = $container.find(".ntsEndDatePicker");
                        if (!nts.uk.util.isNullOrUndefined(data.value())) {
                            var startDate = (data.value().startDate !== "") ? uk.time.formatPattern(data.value().startDate, dateFormat, ISOFormat) : "";
                            var oldStart = $startDate.val();
                            if (startDate !== oldStart) {
                                if (startDate !== "" && startDate !== "Invalid date") {
                                    // Check equals to avoid multi datepicker with same value
                                    $startDate.datepicker('setDate', startDate);
                                }
                                else {
                                    $startDate.val("");
                                }
                            }
                            var endDate = (data.value().endDate !== "") ? uk.time.formatPattern(data.value().endDate, dateFormat, ISOFormat) : "";
                            var oldEnd = $endDate.val();
                            if (endDate !== oldEnd) {
                                if (endDate !== "" && endDate !== "Invalid date") {
                                    // Check equals to avoid multi datepicker with same value
                                    $endDate.datepicker('setDate', endDate);
                                }
                                else {
                                    $endDate.val("");
                                }
                            }
                        }
                        if (enable === false) {
                            $container.find(".ntsDateRange_Component").removeAttr("tabindex");
                        }
                        else {
                            $container.find(".ntsDateRange_Component").attr("tabindex", $container.data("tabindex"));
                        }
                        $input.prop("disabled", !enable);
                        $container.find(".ntsDateRangeButton").prop("disabled", !enable);
                        var $datePickerArea = $container.find(".ntsDateRange_Container");
                        $datePickerArea.data("required", required);
                    };
                    return NtsDateRangePickerBindingHandler;
                }());
                ko.bindingHandlers['ntsDateRangePicker'] = new NtsDateRangePickerBindingHandler();
            })(koExtentions = ui_16.koExtentions || (ui_16.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * LinkButton
                 */
                var NtsLinkButtonBindingHandler = (function () {
                    function NtsLinkButtonBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsLinkButtonBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var jump = ko.unwrap(data.jump);
                        var action = data.action;
                        var linkText = $(element).text();
                        var $linkButton = $(element).wrap('<div class="ntsControl"/>')
                            .addClass('link-button')
                            .click(function () {
                            event.preventDefault();
                            if (!nts.uk.util.isNullOrUndefined(action))
                                action.call(viewModel);
                            else if (!nts.uk.util.isNullOrUndefined(jump))
                                nts.uk.request.jump(jump);
                        });
                    };
                    /**
                     * Update
                     */
                    NtsLinkButtonBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    };
                    return NtsLinkButtonBindingHandler;
                }());
                ko.bindingHandlers['ntsLinkButton'] = new NtsLinkButtonBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsListBox;
                (function (ntsListBox) {
                    $.fn.ntsListBox = function (action) {
                        var $grid = $(this);
                        switch (action) {
                            case 'deselectAll':
                                deselectAll($grid);
                                break;
                            case 'selectAll':
                                selectAll($grid);
                            default:
                                break;
                        }
                    };
                    function selectAll($list) {
                        var $grid = $list.find(".ntsListBox");
                        var options = $grid.igGrid("option", "dataSource");
                        var primaryKey = $grid.igGrid("option", "primaryKey");
                        _.forEach(options, function (option, idx) {
                            $grid.igGridSelection("selectRowById", option[primaryKey]);
                        });
                        $grid.triggerHandler('selectionchanged');
                    }
                    function deselectAll($list) {
                        var $grid = $list.find(".ntsListBox");
                        $grid.igGridSelection('clearSelection');
                        $grid.triggerHandler('selectionchanged');
                    }
                })(ntsListBox || (ntsListBox = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_17) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Dialog binding handler
                 */
                var NtsColorPickerBindingHandler = (function () {
                    function NtsColorPickerBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsColorPickerBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var $container = $(element);
                        var width = ko.unwrap(data.width);
                        var color = ko.unwrap(data.value);
                        var dataName = data.name === undefined ? "" : nts.uk.resource.getControlName(ko.unwrap(data.name));
                        var enable = data.enable === undefined ? true : ko.unwrap(data.enable);
                        var required = data.required === undefined ? false : ko.unwrap(data.required);
                        var tag = $container.prop("tagName").toLowerCase();
                        var id = $container.attr("id");
                        var $picker;
                        if (tag === "input") {
                            $picker = $container;
                            $picker.wrap("<div class='ntsControl ntsColorPicker_Container'/>");
                            $picker.addClass("ntsColorPicker");
                            $container = $picker.parent();
                        }
                        else if (tag === 'div') {
                            $container.addClass("ntsControl ntsColorPicker_Container");
                            $container.append("<input class='ntsColorPicker'/>");
                            $picker = $container.find(".ntsColorPicker");
                        }
                        else {
                            $container.wrap("<div class='ntsControl ntsColorPicker_Container'/>");
                            $container.removeAttr("id");
                            $container.hide();
                            $container = $container.parent();
                            $container.append("<input class='ntsColorPicker'/>");
                            $picker = $container.find(".ntsColorPicker");
                        }
                        $container.css("min-height", 32).attr("id", id);
                        $picker.data("required", required).removeAttr("id");
                        if (nts.uk.util.isNullOrEmpty($container.attr("tabindex"))) {
                            $container.attr("tabindex", "0");
                        }
                        $picker.addClass("ntsColorPicker").attr("data-name", dataName);
                        $picker.spectrum({
                            preferredFormat: "name",
                            showPaletteOnly: true,
                            togglePaletteOnly: true,
                            togglePaletteMoreText: 'その他の色',
                            togglePaletteLessText: '隠す',
                            color: color,
                            disabled: !enable,
                            showInput: true,
                            showSelectionPalette: true,
                            showInitial: true,
                            chooseText: "確定",
                            cancelText: "キャンセル",
                            allowEmpty: true,
                            showAlpha: false,
                            palette: [
                                ["#000", "#444", "#666", "#999", "#ccc", "#eee", "#f3f3f3", "#fff"],
                                ["#f00", "#f90", "#ff0", "#0f0", "#0ff", "#00f", "#90f", "#f0f"],
                                ["#f4cccc", "#fce5cd", "#fff2cc", "#d9ead3", "#d0e0e3", "#cfe2f3", "#d9d2e9", "#ead1dc"],
                                ["#ea9999", "#f9cb9c", "#ffe599", "#b6d7a8", "#a2c4c9", "#9fc5e8", "#b4a7d6", "#d5a6bd"],
                                ["#e06666", "#f6b26b", "#ffd966", "#93c47d", "#76a5af", "#6fa8dc", "#8e7cc3", "#c27ba0"],
                                ["#c00", "#e69138", "#f1c232", "#6aa84f", "#45818e", "#3d85c6", "#674ea7", "#a64d79"],
                                ["#900", "#b45f06", "#bf9000", "#38761d", "#134f5c", "#0b5394", "#351c75", "#741b47"],
                                ["#600", "#783f04", "#7f6000", "#274e13", "#0c343d", "#073763", "#20124d", "#4c1130"]
                            ],
                            change: function (color) {
                                var required = $picker.data("required");
                                $picker.ntsError('clear');
                                if (!nts.uk.util.isNullOrUndefined(color) && !nts.uk.util.isNullOrUndefined(data.value)) {
                                    data.value(color.toHexString()); // #ff0000    
                                }
                                else if (nts.uk.util.isNullOrUndefined(color)) {
                                    if (required === true) {
                                        $picker.ntsError('set', nts.uk.resource.getMessage('FND_E_REQ_INPUT', [dataName]), 'FND_E_REQ_INPUT');
                                    }
                                    else {
                                        data.value(null);
                                    }
                                }
                            }
                        });
                        var validateRequired = function ($p) {
                            $p.ntsError('clear');
                            var value = $p.spectrum("get");
                            if (nts.uk.util.isNullOrUndefined(value)) {
                                $p.ntsError('set', nts.uk.resource.getMessage('FND_E_REQ_INPUT', [dataName]), 'FND_E_REQ_INPUT');
                            }
                        };
                        $container.keydown(function (evt, ui) {
                            var code = evt.which || evt.keyCode;
                            if (code.toString() === "9") {
                                if (required === true) {
                                    validateRequired($picker);
                                }
                                $picker.spectrum("hide");
                            }
                        });
                        $container.on('validate', (function (e) {
                            if (required === true) {
                                validateRequired($picker);
                            }
                        }));
                        $picker.spectrum("container").find(".sp-clear").click(function (e) {
                            $picker.spectrum("set", null);
                            if (required === true) {
                                validateRequired($picker);
                            }
                            else if (!nts.uk.util.isNullOrUndefined(data.value)) {
                                data.value(null);
                            }
                        });
                        if (!nts.uk.util.isNullOrUndefined(width) && nts.uk.ntsNumber.isNumber(width)) {
                            $container.width(width);
                            $container.find(".sp-replacer").width(width - 10);
                            $container.find(".sp-preview").width(width - 30);
                        }
                    };
                    /**
                     * Update
                     */
                    NtsColorPickerBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var tag = $(element).prop("tagName").toLowerCase();
                        var $picker;
                        if (tag === "input") {
                            $picker = $(element);
                        }
                        else if (tag === 'div') {
                            $picker = $(element).find(".ntsColorPicker");
                        }
                        else {
                            $picker = $(element).parent().find(".ntsColorPicker");
                            $(element).hide();
                        }
                        var colorCode = ko.unwrap(data.value);
                        var enable = data.enable === undefined ? true : ko.unwrap(data.enable);
                        var required = data.required === undefined ? false : ko.unwrap(data.required);
                        $picker.data("required", required);
                        $picker.spectrum("set", colorCode);
                        if (enable !== false) {
                            $picker.spectrum("enable");
                        }
                        else {
                            $picker.spectrum("disable");
                        }
                    };
                    return NtsColorPickerBindingHandler;
                }());
                ko.bindingHandlers['ntsColorPicker'] = new NtsColorPickerBindingHandler();
            })(koExtentions = ui_17.koExtentions || (ui_17.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsError;
                (function (ntsError) {
                    var DATA_HAS_ERROR = 'hasError';
                    var DATA_GET_ERROR = 'getError';
                    $.fn.ntsError = function (action, message, errorCode) {
                        var $control = $(this);
                        if (action === DATA_HAS_ERROR) {
                            return _.some($control, function (c) { return hasError($(c)); });
                        }
                        else if (action === DATA_GET_ERROR) {
                            return getErrorByElement($control.first());
                        }
                        else {
                            $control.each(function (index) {
                                var $item = $(this);
                                $item = processErrorOnItem($item, message, action, errorCode);
                            });
                            return $control;
                        }
                    };
                    function processErrorOnItem($control, message, action, errorCode) {
                        switch (action) {
                            case 'set':
                                return setError($control, message, errorCode);
                            case 'clear':
                                return clearErrors($control);
                        }
                    }
                    function getErrorByElement($control) {
                        return ui.errors.getErrorByElement($control);
                    }
                    function setError($control, message, errorCode) {
                        $control.data(DATA_HAS_ERROR, true);
                        ui.errors.add({
                            location: $control.data('name') || "",
                            message: message,
                            errorCode: errorCode,
                            $control: $control
                        });
                        $control.parent().addClass('error');
                        return $control;
                    }
                    function clearErrors($control) {
                        $control.data(DATA_HAS_ERROR, false);
                        ui.errors.removeByElement($control);
                        $control.parent().removeClass('error');
                        return $control;
                    }
                    function hasError($control) {
                        return $control.data(DATA_HAS_ERROR) === true;
                    }
                })(ntsError || (ntsError = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_18) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsFixedTable;
                (function (ntsFixedTable_1) {
                    $.fn.ntsFixedTable = ntsFixedTable;
                    function ntsFixedTable(action, options) {
                        var $controls = $(this);
                        if (typeof arguments[0] !== 'string') {
                            return ntsFixedTable.apply($controls, _.concat("init", action));
                        }
                        if (action === "init") {
                            return init($controls, options);
                        }
                        else {
                            return $controls;
                        }
                        ;
                    }
                    function init(controls, options) {
                        controls.each(function () {
                            var $originTable = $(this);
                            $originTable.addClass("fixed-table");
                            var $colgroup = $originTable.find("colgroup");
                            var $thead = $originTable.find("thead");
                            var setting = $.extend({ height: "auto" }, options);
                            var viewWidth = setting.width;
                            var width = 0;
                            $colgroup.find("col").each(function () {
                                width += Number($(this).attr("width").replace(/px/gi, ''));
                            });
                            width++;
                            if (nts.uk.util.isNullOrUndefined(viewWidth)) {
                                viewWidth = width;
                            }
                            var $container = $("<div class='nts-fixed-table cf'/>");
                            $originTable.after($container);
                            var $headerContainer = $("<div class='nts-fixed-header-container ui-iggrid nts-fixed-header'/>").css({ "max-width": viewWidth });
                            var $headerWrapper = $("<div class='nts-fixed-header-wrapper'/>").width(width);
                            var $headerTable = $("<table class='fixed-table'></table>");
                            $headerTable.append($colgroup.clone()).append($thead);
                            $headerTable.appendTo($headerWrapper);
                            $headerContainer.append($headerWrapper);
                            var $header = $("<div>");
                            $headerContainer.appendTo($header);
                            $header.appendTo($container);
                            $header.height($headerContainer.height());
                            var $headerScroll = $("<div>", { "class": "scroll-header nts-fixed-header", width: 16, height: $headerWrapper.outerHeight() });
                            $headerScroll.appendTo($header);
                            $originTable.addClass("nts-fixed-body-table");
                            var $bodyContainer = $("<div class='nts-fixed-body-container ui-iggrid'/>");
                            var $bodyWrapper = $("<div class='nts-fixed-body-wrapper'/>");
                            var bodyHeight = "auto";
                            if (setting.height !== "auto") {
                                $bodyContainer.css("max-width", viewWidth);
                                bodyHeight = Number(setting.height.toString().replace(/px/mi)) - $headerTable.find("thead").outerHeight();
                            }
                            var resizeEvent = function () {
                                $header.height($headerContainer.height());
                                if (bodyHeight < $originTable.height()) {
                                    if (/Edge/.test(navigator.userAgent)) {
                                        $headerScroll.width(11);
                                        $bodyContainer.css("padding-right", "12px");
                                    }
                                    else {
                                        $headerScroll.width(16);
                                        $bodyContainer.css("padding-right", "17px");
                                    }
                                    $headerScroll.css({ "border-right": "1px #CCC solid", "border-top": "1px #CCC solid", "border-bottom": "1px #CCC solid" });
                                }
                                else {
                                    $headerScroll.width(0);
                                    $headerScroll.css({ "border-right": "0px", "border-top": "0px", "border-bottom": "0px" });
                                    $bodyContainer.css("padding-right", "0px");
                                }
                                setTimeout(resizeEvent, 20);
                            };
                            $bodyContainer.scroll(function (evt, ui) {
                                $headerContainer.scrollLeft($bodyContainer.scrollLeft());
                            });
                            $bodyWrapper.width(width).height(bodyHeight);
                            $bodyWrapper.append($originTable);
                            $bodyContainer.append($bodyWrapper);
                            $container.append($bodyContainer);
                            if (setting.height !== "auto" && bodyHeight < $originTable.height()) {
                                if (/Edge/.test(navigator.userAgent)) {
                                    $bodyContainer.css("padding-right", "12px");
                                }
                                else {
                                    $bodyContainer.css("padding-right", "17px");
                                }
                            }
                            resizeEvent();
                        });
                        return controls;
                    }
                })(ntsFixedTable || (ntsFixedTable = {}));
            })(jqueryExtentions = ui_18.jqueryExtentions || (ui_18.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_19) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsGridList;
                (function (ntsGridList) {
                    var OUTSIDE_AUTO_SCROLL_SPEED = {
                        RATIO: 0.2,
                        MAX: 30
                    };
                    $.fn.ntsGridListFeature = function (feature, action) {
                        var params = [];
                        for (var _i = 2; _i < arguments.length; _i++) {
                            params[_i - 2] = arguments[_i];
                        }
                        var $grid = $(this);
                        switch (feature) {
                            case 'switch':
                                switch (action) {
                                    case 'setValue':
                                        return setSwitchValue($grid, params);
                                }
                        }
                    };
                    function setSwitchValue($grid) {
                        var params = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            params[_i - 1] = arguments[_i];
                        }
                        var rowId = params[0][0];
                        var columnKey = params[0][1];
                        var selectedValue = params[0][2];
                        var $row = $($grid.igGrid("rowById", rowId));
                        var $parent = $row.find(".ntsControl");
                        var currentSelect = $parent.attr('data-value');
                        if (selectedValue !== currentSelect) {
                            var rowKey = $row.attr("data-id");
                            $parent.find(".nts-switch-button").removeClass("selected");
                            var element = _.find($parent.find(".nts-switch-button"), function (e) {
                                return selectedValue.toString() === $(e).attr('data-value').toString();
                            });
                            if (element !== undefined) {
                                var scrollTop_1 = $("#" + $grid.attr("id") + "_scrollContainer").scrollTop();
                                $(element).addClass('selected');
                                $parent.attr('data-value', selectedValue);
                                $grid.igGridUpdating("setCellValue", rowKey, columnKey, selectedValue);
                                $grid.igGrid("commit");
                                $grid.trigger("switchvaluechanged", { columnKey: columnKey, rowKey: rowKey, value: parseInt(selectedValue) });
                                if ($grid.igGrid("hasVerticalScrollbar")) {
                                    //                        let current = $grid.ntsGridList("getSelected");
                                    //                        if(current !== undefined){
                                    //                            $grid.igGrid("virtualScrollTo", (typeof current === 'object' ? current.index : current[0].index) + 1);        
                                    //                        }
                                    if (!nts.uk.util.isNullOrUndefined(scrollTop_1) && scrollTop_1 !== 0) {
                                        setTimeout(function () {
                                            $("#" + $grid.attr("id") + "_scrollContainer").scrollTop(scrollTop_1);
                                        }, 10);
                                    }
                                }
                            }
                        }
                    }
                    $.fn.ntsGridList = function (action, param) {
                        var $grid = $(this);
                        switch (action) {
                            case 'setupSelecting':
                                return setupSelecting($grid);
                            case 'unsetupSelecting':
                                return unsetupSelecting($grid);
                            case 'getSelected':
                                return getSelected($grid);
                            case 'setSelected':
                                return setSelected($grid, param);
                            case 'deselectAll':
                                return deselectAll($grid);
                            case 'setupDeleteButton':
                                return setupDeleteButton($grid, param);
                            case 'setupScrollWhenBinding':
                                return setupScrollWhenBinding($grid);
                        }
                    };
                    function setupScrollWhenBinding($grid) {
                        var gridId = "#" + $grid.attr("id");
                        $(document).delegate(gridId, "iggriddatarendered", function (evt, ui) {
                            var oldSelected = getSelectRow($grid);
                            if (!nts.uk.util.isNullOrEmpty(oldSelected)) {
                                _.defer(function () {
                                    var selected = getSelectRow($grid);
                                    if (!nts.uk.util.isNullOrEmpty(selected)) {
                                        if ($grid.igGrid("scrollContainer").length > 0) {
                                            var firstRowOffset = $($("#single-list").igGrid("rowAt", 0)).offset().top;
                                            var selectRowOffset = $($("#single-list").igGrid("rowAt", index)).offset().top;
                                            $grid.igGrid("scrollContainer").scrollTop(selectRowOffset - firstRowOffset);
                                        }
                                        else {
                                            var index = $(selected["element"]).attr("data-row-idx");
                                            $grid.igGrid("virtualScrollTo", nts.uk.util.isNullOrEmpty(index) ? oldSelected.index : parseInt(index)); //.scrollTop(scrollTop);    
                                        }
                                    }
                                });
                            }
                        });
                    }
                    function getSelectRow($grid) {
                        var row = null;
                        if ($grid.data("igGrid")) {
                            var selectedRows = $grid.igGrid("selectedRows");
                            if (selectedRows) {
                                row = selectedRows[0];
                            }
                            else {
                                row = $grid.igGrid("selectedRow");
                            }
                        }
                        return row;
                    }
                    function getSelected($grid) {
                        if ($grid.igGridSelection('option', 'multipleSelection')) {
                            var selectedRows = $grid.igGridSelection('selectedRows');
                            if (selectedRows)
                                return _.map(selectedRows, convertSelected);
                            return [];
                        }
                        else {
                            var selectedRow = $grid.igGridSelection('selectedRow');
                            if (selectedRow)
                                return convertSelected(selectedRow);
                            return undefined;
                        }
                    }
                    function convertSelected(igGridSelectedRow) {
                        return {
                            id: igGridSelectedRow.id,
                            index: igGridSelectedRow.index
                        };
                    }
                    function setSelected($grid, selectedId) {
                        deselectAll($grid);
                        if ($grid.igGridSelection('option', 'multipleSelection')) {
                            selectedId.forEach(function (id) { return $grid.igGridSelection('selectRowById', id); });
                        }
                        else {
                            $grid.igGridSelection('selectRowById', selectedId);
                        }
                    }
                    function deselectAll($grid) {
                        $grid.igGridSelection('clearSelection');
                    }
                    function setupDeleteButton($grid, param) {
                        var itemDeletedEvent = new CustomEvent("itemDeleted", {
                            detail: {},
                        });
                        var currentColumns = $grid.igGrid("option", "columns");
                        currentColumns.push({
                            dataType: "bool", columnCssClass: "delete-column", headerText: "test", key: param.deleteField,
                            width: 60, formatter: function createButton(deleteField, row) {
                                var primaryKey = $grid.igGrid("option", "primaryKey");
                                var result = $('<button tabindex="-1" class="small delete-button">Delete</button>');
                                result.attr("data-value", row[primaryKey]);
                                if (deleteField === true && primaryKey !== null && !uk.util.isNullOrUndefined(row[primaryKey]) && $grid.data("enable") !== false) {
                                    return result[0].outerHTML;
                                }
                                else {
                                    return result.attr("disabled", "disabled")[0].outerHTML;
                                }
                            }
                        });
                        $grid.igGrid("option", "columns", currentColumns);
                        $grid.on("click", ".delete-button", function () {
                            var key = $(this).attr("data-value");
                            var primaryKey = $grid.igGrid("option", "primaryKey");
                            var source = _.cloneDeep($grid.igGrid("option", "dataSource"));
                            _.remove(source, function (current) {
                                return _.isEqual(current[primaryKey].toString(), key.toString());
                            });
                            if (!uk.util.isNullOrUndefined(param.sourceTarget) && typeof param.sourceTarget === "function") {
                                param.sourceTarget(source);
                            }
                            else {
                                $grid.igGrid("option", "dataSource", source);
                                $grid.igGrid("dataBind");
                            }
                            itemDeletedEvent.detail["target"] = key;
                            document.getElementById($grid.attr('id')).dispatchEvent(itemDeletedEvent);
                        });
                    }
                    function setupSelecting($grid) {
                        setupDragging($grid);
                        setupSelectingEvents($grid);
                        return $grid;
                    }
                    function unsetupSelecting($grid) {
                        unsetupDragging($grid);
                        unsetupSelectingEvents($grid);
                        return $grid;
                    }
                    function setupDragging($grid) {
                        var dragSelectRange = [];
                        // used to auto scrolling when dragged above/below grid)
                        var mousePos = null;
                        $grid.bind('mousedown', function (e) {
                            // グリッド内がマウスダウンされていない場合は処理なしで終了
                            var $container = $grid.closest('.ui-iggrid-scrolldiv');
                            if ($(e.target).closest('.ui-iggrid-table').length === 0) {
                                return;
                            }
                            // current grid size
                            var gridVerticalRange = new uk.util.Range($container.offset().top, $container.offset().top + $container.height());
                            mousePos = {
                                x: e.pageX,
                                y: e.pageY,
                                rowIndex: ui_19.ig.grid.getRowIndexFrom($(e.target))
                            };
                            // set position to start dragging
                            dragSelectRange.push(mousePos.rowIndex);
                            var $scroller = $('#' + $grid.attr('id') + '_scrollContainer');
                            // auto scroll while mouse is outside grid
                            var timerAutoScroll = setInterval(function () {
                                var distance = gridVerticalRange.distanceFrom(mousePos.y);
                                if (distance === 0) {
                                    return;
                                }
                                var delta = Math.min(distance * OUTSIDE_AUTO_SCROLL_SPEED.RATIO, OUTSIDE_AUTO_SCROLL_SPEED.MAX);
                                var currentScrolls = $scroller.scrollTop();
                                $grid.igGrid('virtualScrollTo', (currentScrolls + delta) + 'px');
                            }, 20);
                            // handle mousemove on window while dragging (unhandle when mouseup)
                            $(window).bind('mousemove.NtsGridListDragging', function (e) {
                                var newPointedRowIndex = ui_19.ig.grid.getRowIndexFrom($(e.target));
                                // selected range is not changed
                                if (mousePos.rowIndex === newPointedRowIndex) {
                                    return;
                                }
                                mousePos = {
                                    x: e.pageX,
                                    y: e.pageY,
                                    rowIndex: newPointedRowIndex
                                };
                                if (dragSelectRange.length === 1 && !e.ctrlKey) {
                                    $grid.igGridSelection('clearSelection');
                                }
                                updateSelections();
                            });
                            // stop dragging
                            $(window).one('mouseup', function (e) {
                                mousePos = null;
                                dragSelectRange = [];
                                $(window).unbind('mousemove.NtsGridListDragging');
                                if ($grid.data("selectUpdated") === true) {
                                    $grid.triggerHandler('selectionchanged');
                                }
                                //$grid.triggerHandler('selectionchanged');  
                                clearInterval(timerAutoScroll);
                                $grid.data("selectUpdated", false);
                            });
                        });
                        function updateSelections() {
                            // rowIndex is NaN when mouse is outside grid
                            if (isNaN(mousePos.rowIndex)) {
                                return;
                            }
                            // 以前のドラッグ範囲の選択を一旦解除する
                            // TODO: probably this code has problem of perfomance when select many rows
                            // should process only "differences" instead of "all"
                            for (var i = 0, i_len = dragSelectRange.length; i < i_len; i++) {
                                // http://jp.igniteui.com/help/api/2016.2/ui.iggridselection#methods:deselectRow
                                $grid.igGridSelection('deselectRow', dragSelectRange[i]);
                            }
                            var newDragSelectRange = [];
                            if (dragSelectRange[0] <= mousePos.rowIndex) {
                                for (var j = dragSelectRange[0]; j <= mousePos.rowIndex; j++) {
                                    // http://jp.igniteui.com/help/api/2016.2/ui.iggridselection#methods:selectRow
                                    $grid.igGridSelection('selectRow', j);
                                    newDragSelectRange.push(j);
                                }
                            }
                            else if (dragSelectRange[0] > mousePos.rowIndex) {
                                for (var j = dragSelectRange[0]; j >= mousePos.rowIndex; j--) {
                                    $grid.igGridSelection('selectRow', j);
                                    newDragSelectRange.push(j);
                                }
                            }
                            dragSelectRange = newDragSelectRange;
                            $grid.data("selectUpdated", true);
                        }
                    }
                    function setupSelectingEvents($grid) {
                        $grid.bind('iggridselectioncellselectionchanging', function () {
                        });
                        $grid.bind('iggridselectionrowselectionchanged', function () {
                            $grid.triggerHandler('selectionchanged');
                        });
                        //            $grid.on('mouseup', () => {
                        //                $grid.triggerHandler('selectionchanged');
                        //            });
                    }
                    function unsetupDragging($grid) {
                        $grid.unbind('mousedown');
                    }
                    function unsetupSelectingEvents($grid) {
                        $grid.unbind('iggridselectionrowselectionchanged');
                        //            $grid.off('mouseup');
                    }
                })(ntsGridList || (ntsGridList = {}));
            })(jqueryExtentions = ui_19.jqueryExtentions || (ui_19.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                var FILES_CACHE_FOR_CANCEL = "files-cache-for-cancel";
                var IS_RESTORED_BY_CANCEL = "restored-by-cancel";
                var SELECTED_FILE_NAME = "selected-file-name";
                var STEREOTYPE = "stereotype";
                var IMMEDIATE_UPLOAD = "immediate-upload";
                /**
                 * CheckBox binding handler
                 */
                var NtsFileUploadBindingHandler = (function () {
                    /**
                     * Constructor..
                     */
                    function NtsFileUploadBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsFileUploadBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var fileName = data.filename;
                        var onchange = (data.onchange !== undefined) ? data.onchange : $.noop;
                        var onfilenameclick = (data.onfilenameclick !== undefined) ? data.onfilenameclick : $.noop;
                        var uploadFinished = (data.uploadFinished !== undefined) ? data.uploadFinished : $.noop;
                        // Container
                        var $container = $(element);
                        var $fileuploadContainer = $("<div class='nts-fileupload-container cf'></div>");
                        var $fileBrowserButton = $("<button class='browser-button'></button>");
                        var $fileNameWrap = $("<span class='nts-editor-wrapped ntsControl'/>");
                        var $fileNameInput = $("<input class='nts-editor nts-input' readonly='readonly'/>");
                        var $fileNameLabel = $("<span class='filenamelabel hyperlink'></span> ");
                        var $fileInput = $("<input type='file' class='fileinput'/>");
                        $fileuploadContainer.append($fileBrowserButton);
                        $fileNameWrap.append($fileNameInput);
                        $fileuploadContainer.append($fileNameWrap);
                        $fileuploadContainer.append($fileNameLabel);
                        $fileuploadContainer.append($fileInput);
                        $fileuploadContainer.appendTo($container);
                        $fileBrowserButton.attr("tabindex", -1).click(function () {
                            $fileInput.click();
                        });
                        $fileInput.change(function () {
                            if ($container.data(IS_RESTORED_BY_CANCEL) === true) {
                                $container.data(IS_RESTORED_BY_CANCEL, false);
                                return;
                            }
                            var selectedFilePath = $(this).val();
                            // canceled on selecting file dialog
                            if (nts.uk.util.isNullOrEmpty(selectedFilePath)) {
                                if (!nts.uk.util.isNullOrUndefined($container.data(FILES_CACHE_FOR_CANCEL))) {
                                    $container.data(IS_RESTORED_BY_CANCEL, true);
                                    this.files = ($container.data(FILES_CACHE_FOR_CANCEL));
                                }
                                return;
                            }
                            $container.data(FILES_CACHE_FOR_CANCEL, this.files);
                            var selectedFileName = selectedFilePath.substring(selectedFilePath.lastIndexOf("\\") + 1, selectedFilePath.length);
                            $container.data(SELECTED_FILE_NAME, selectedFileName);
                            fileName(selectedFileName);
                            onchange(selectedFileName);
                            if ($container.data(IMMEDIATE_UPLOAD)) {
                                nts.uk.ui.block.grayout();
                                $fileInput.ntsFileUpload({ stereoType: $container.data(STEREOTYPE) })
                                    .done(function (data) {
                                    uploadFinished.call(bindingContext.$data, data[0]);
                                })
                                    .fail(function (data) {
                                    nts.uk.ui.dialog.alertError(data);
                                })
                                    .always(function () {
                                    nts.uk.ui.block.clear();
                                });
                            }
                        });
                        $fileNameLabel.click(function () {
                            onfilenameclick($(this).text());
                        });
                    };
                    /**
                     * Update
                     */
                    NtsFileUploadBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var fileName = ko.unwrap(data.filename);
                        var accept = (data.accept !== undefined) ? ko.unwrap(data.accept) : "";
                        var asLink = (data.aslink !== undefined) ? ko.unwrap(data.aslink) : false;
                        var text = (data.text !== undefined) ? nts.uk.resource.getText(ko.unwrap(data.text)) : "参照";
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var $container = $(element)
                            .data(STEREOTYPE, ko.unwrap(data.stereoType))
                            .data(IMMEDIATE_UPLOAD, ko.unwrap(data.immediateUpload) === true);
                        $container.find("input[type='file']").attr("accept", accept.toString());
                        var $fileNameWrap = $container.find(".nts-editor-wrapped");
                        var $fileNameInput = $container.find(".nts-input");
                        var $fileNameLabel = $container.find(".filenamelabel");
                        // when change just only filename, file in input must be cleared
                        if ($container.data(SELECTED_FILE_NAME) !== fileName) {
                            $container.data(SELECTED_FILE_NAME, "");
                            $container.find("input[type='file']").val(null);
                        }
                        $fileNameInput.val(fileName);
                        $fileNameLabel.text(fileName);
                        if (asLink == true) {
                            $fileNameLabel.removeClass("hidden");
                            $fileNameWrap.addClass("hidden");
                        }
                        else {
                            $fileNameLabel.addClass("hidden");
                            $fileNameWrap.removeClass("hidden");
                        }
                        var $fileBrowserButton = $container.find(".browser-button");
                        $fileBrowserButton.text(text);
                        $fileBrowserButton.prop("disabled", !enable);
                        $fileNameInput.prop("disabled", !enable);
                    };
                    return NtsFileUploadBindingHandler;
                }());
                ko.bindingHandlers['ntsFileUpload'] = new NtsFileUploadBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Let binding handler
                 */
                var NtsLetBindingHandler = (function () {
                    function NtsLetBindingHandler() {
                        this.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            // Make a modified binding context, with extra properties, and apply it to descendant elements
                            ko.applyBindingsToDescendants(bindingContext.extend(valueAccessor), element);
                            return { controlsDescendantBindings: true };
                        };
                        this.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) { };
                    }
                    return NtsLetBindingHandler;
                }());
                ko.bindingHandlers['let'] = new NtsLetBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_20) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsWizard;
                (function (ntsWizard) {
                    $.fn.ntsWizard = function (action, index) {
                        var $wizard = $(this);
                        if (action === "begin") {
                            return begin($wizard);
                        }
                        else if (action === "end") {
                            return end($wizard);
                        }
                        else if (action === "goto") {
                            return goto($wizard, index);
                        }
                        else if (action === "prev") {
                            return prev($wizard);
                        }
                        else if (action === "next") {
                            return next($wizard);
                        }
                        else if (action === "getCurrentStep") {
                            return getCurrentStep($wizard);
                        }
                        else {
                            return $wizard;
                        }
                        ;
                    };
                    function begin(wizard) {
                        var dfd = $.Deferred();
                        wizard.data("waitStepShowed", true);
                        wizard.setStep(0);
                        wizard.bind("stepShowed", function (evt, ui) {
                            wizard.unbind("stepShowed");
                            wizard.data("waitStepShowed", false);
                            dfd.resolve();
                        });
                        return dfd.promise();
                    }
                    function end(wizard) {
                        var dfd = $.Deferred();
                        wizard.data("waitStepShowed", true);
                        wizard.setStep(wizard.data("length") - 1);
                        wizard.bind("stepShowed", function (evt, ui) {
                            wizard.unbind("stepShowed");
                            wizard.data("waitStepShowed", false);
                            dfd.resolve();
                        });
                        return dfd.promise();
                    }
                    function goto(wizard, index) {
                        var dfd = $.Deferred();
                        wizard.data("waitStepShowed", true);
                        wizard.setStep(index);
                        wizard.bind("stepShowed", function (evt, ui) {
                            wizard.unbind("stepShowed");
                            wizard.data("waitStepShowed", false);
                            dfd.resolve();
                        });
                        return dfd.promise();
                    }
                    function prev(wizard) {
                        var dfd = $.Deferred();
                        wizard.data("waitStepShowed", true);
                        wizard.steps("previous");
                        wizard.bind("stepShowed", function (evt, ui) {
                            wizard.unbind("stepShowed");
                            wizard.data("waitStepShowed", false);
                            dfd.resolve();
                        });
                        return dfd.promise();
                    }
                    function next(wizard) {
                        var dfd = $.Deferred();
                        wizard.data("waitStepShowed", true);
                        wizard.steps("next");
                        wizard.bind("stepShowed", function (evt, ui) {
                            wizard.unbind("stepShowed");
                            wizard.data("waitStepShowed", false);
                            dfd.resolve();
                        });
                        return dfd.promise();
                    }
                    function getCurrentStep(wizard) {
                        return wizard.steps("getCurrentIndex");
                    }
                })(ntsWizard || (ntsWizard = {}));
            })(jqueryExtentions = ui_20.jqueryExtentions || (ui_20.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_21) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var errorMementos = {};
                var currentTabIndex = undefined;
                var ntsSideBar;
                (function (ntsSideBar) {
                    ;
                    var defaultOption = {
                        active: 0,
                        beforeActivate: function (event, info) { },
                        activate: function (event, info) { },
                    };
                    $.fn.ntsSideBar = function (action, option) {
                        var $control = $(this);
                        if (nts.uk.util.isNullOrUndefined(action) || action === "init") {
                            return init($control, option);
                        }
                        else if (action === "active") {
                            return active($control, option);
                        }
                        else if (action === "enable") {
                            return enable($control, option);
                        }
                        else if (action === "disable") {
                            return disable($control, option);
                        }
                        else if (action === "show") {
                            return show($control, option);
                        }
                        else if (action === "hide") {
                            return hide($control, option);
                        }
                        else if (action === "getCurrent") {
                            return getCurrent($control);
                        }
                        else {
                            return $control;
                        }
                        ;
                    };
                    function init(control, option) {
                        $("html").addClass("sidebar-html");
                        control.find(".sidebar-content > div[role=tabpanel]").addClass("disappear");
                        var settings = $.extend({}, defaultOption, option);
                        control.off("click.sideBarClick", "#sidebar-area .navigator a");
                        control.on("click.sideBarClick", "#sidebar-area .navigator a", function (event) {
                            event.preventDefault();
                            var info = {
                                oldIndex: getCurrent(control),
                                newIndex: $(this).closest("li").index(),
                                oldTab: control.find("#sidebar-area .navigator a.active").closest("li"),
                                newTab: $(this).closest("li")
                            };
                            if ($(this).attr("disabled") !== "true" && $(this).attr("disabled") !== "disabled") {
                                settings.beforeActivate.call(this, event, info);
                                if ($(this).attr("href") !== undefined)
                                    active(control, $(this).closest("li").index());
                                settings.activate.call(this, event, info);
                            }
                        });
                        active(control, settings.active, true);
                        return control;
                    }
                    function active(control, index, isInit) {
                        if (isInit === void 0) { isInit = false; }
                        control.find("#sidebar-area .navigator a").removeClass("active");
                        control.find("#sidebar-area .navigator a").eq(index).addClass("active");
                        control.find(".sidebar-content > div[role=tabpanel]").addClass("disappear");
                        var $displayPanel = $(control.find("#sidebar-area .navigator a").eq(index).attr("href"));
                        if ($displayPanel.length > 0) {
                            if (!isInit) {
                                // keep error in old tab
                                if (currentTabIndex !== undefined) {
                                    errorMementos[currentTabIndex] = ui.errors.errorsViewModel().stashMemento();
                                }
                                // restore error in new tab
                                if (errorMementos[index] !== undefined) {
                                    ui.errors.errorsViewModel().restoreFrom(errorMementos[index]);
                                }
                            }
                            currentTabIndex = index;
                            $displayPanel.removeClass("disappear");
                            setErrorPosition($displayPanel);
                        }
                        return control;
                    }
                    function setErrorPosition($displayPanel) {
                        setTimeout(function () {
                            if ($displayPanel.find(".sidebar-content-header").length > 0) {
                                $('#func-notifier-errors').position({ my: 'left+5 top+44', at: 'left top', of: $displayPanel.find(".sidebar-content-header") });
                            }
                            else {
                                setErrorPosition($(".sidebar-content"));
                            }
                        }, 10);
                    }
                    function enable(control, index) {
                        control.find("#sidebar-area .navigator a").eq(index).removeAttr("disabled");
                        return control;
                    }
                    function disable(control, index) {
                        control.find("#sidebar-area .navigator a").eq(index).attr("disabled", "disabled");
                        return control;
                    }
                    function show(control, index) {
                        control.find("#sidebar-area .navigator a").eq(index).show();
                        return control;
                    }
                    function hide(control, index) {
                        var current = getCurrent(control);
                        if (current === index) {
                            active(control, 0);
                        }
                        control.find("#sidebar-area .navigator a").eq(index).hide();
                        return control;
                    }
                    function getCurrent(control) {
                        return control.find("#sidebar-area .navigator a.active").closest("li").index();
                    }
                })(ntsSideBar || (ntsSideBar = {}));
            })(jqueryExtentions = ui_21.jqueryExtentions || (ui_21.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * HelpButton binding handler
                 */
                var NtsHelpButtonBindingHandler = (function () {
                    function NtsHelpButtonBindingHandler() {
                    }
                    NtsHelpButtonBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var image = ko.unwrap(data.image);
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var position = ko.unwrap(data.position);
                        //Position
                        var myPositions = position.replace(/[^a-zA-Z ]/gmi, "").split(" ");
                        var atPositions = position.split(" ");
                        var operator = 1;
                        var marginDirection = "";
                        var caretDirection = "";
                        var caretPosition = "";
                        if (myPositions[0].search(/(top|left)/i) !== -1) {
                            operator = -1;
                        }
                        if (myPositions[0].search(/(left|right)/i) === -1) {
                            atPositions[0] = atPositions.splice(1, 1, atPositions[0])[0];
                            myPositions[0] = myPositions.splice(1, 1, myPositions[0])[0];
                            caretDirection = myPositions[1] = uk.text.reverseDirection(myPositions[1]);
                            caretPosition = "left";
                            marginDirection = "margin-top";
                        }
                        else {
                            caretDirection = myPositions[0] = uk.text.reverseDirection(myPositions[0]);
                            caretPosition = "top";
                            marginDirection = "margin-left";
                        }
                        // Container
                        $(element).on("click", function () {
                            if ($popup.is(":visible")) {
                                $popup.hide();
                            }
                            else {
                                var CARET_WIDTH = parseFloat($caret.css("font-size")) * 2;
                                $popup.show()
                                    .css(marginDirection, 0)
                                    .position({
                                    my: myPositions[0] + " " + myPositions[1],
                                    at: atPositions[0] + " " + atPositions[1],
                                    of: $(element),
                                    collision: "none"
                                })
                                    .css(marginDirection, CARET_WIDTH * operator);
                                $caret.css(caretPosition, parseFloat($popup.css(caretPosition)) * -1);
                            }
                        }).wrap($("<div class='ntsControl ntsHelpButton'></div>"));
                        var $container = $(element).closest(".ntsHelpButton");
                        var $caret = $("<span class='caret-helpbutton caret-" + caretDirection + "'></span>");
                        var $popup = $("<div class='nts-help-button-image'></div>")
                            .append($caret)
                            .append($("<img src='" + uk.request.resolvePath(image) + "' />"))
                            .appendTo($container).hide();
                        // Click outside event
                        $("html").on("click", function (event) {
                            if (!$container.is(event.target) && $container.has(event.target).length === 0) {
                                $container.find(".nts-help-button-image").hide();
                            }
                        });
                    };
                    NtsHelpButtonBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        // Enable
                        (enable === true) ? $(element).removeAttr("disabled") : $(element).attr("disabled", "disabled");
                    };
                    return NtsHelpButtonBindingHandler;
                }());
                ko.bindingHandlers['ntsHelpButton'] = new NtsHelpButtonBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * HelpButton binding handler
                 */
                var NtsIconBindingHandler = (function () {
                    function NtsIconBindingHandler() {
                    }
                    NtsIconBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var iconNo = ko.unwrap(data.no);
                        var width = ko.unwrap(data.width) || "100%";
                        var height = ko.unwrap(data.height) || "100%";
                        var iconFileName = iconNo + ".png";
                        var iconPath = nts.uk.request.location.siteRoot
                            .mergeRelativePath(nts.uk.request.WEB_APP_NAME["comjs"] + "/")
                            .mergeRelativePath("lib/nittsu/ui/style/stylesheets/images/icons/numbered/")
                            .mergeRelativePath(iconFileName)
                            .serialize();
                        var $icon = $(element);
                        $icon.addClass("img-icon");
                        $icon.css({
                            "background-image": "url(" + iconPath + ")",
                            "background-size": "contain",
                            width: width,
                            height: height
                        });
                    };
                    NtsIconBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                    };
                    return NtsIconBindingHandler;
                }());
                ko.bindingHandlers['ntsIcon'] = new NtsIconBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsSearchBox;
                (function (ntsSearchBox) {
                    $.fn.setupSearchScroll = function (controlType, virtualization) {
                        var $control = this;
                        if (controlType.toLowerCase() == 'iggrid')
                            return setupIgGridScroll($control, virtualization);
                        if (controlType.toLowerCase() == 'igtreegrid')
                            return setupTreeGridScroll($control, virtualization);
                        if (controlType.toLowerCase() == 'igtree')
                            return setupIgTreeScroll($control);
                        return this;
                    };
                    function setupIgGridScroll($control, virtualization) {
                        var $grid = $control;
                        if (virtualization) {
                            $grid.on("selectChange", function () {
                                var row = null;
                                var selectedRows = $grid.igGrid("selectedRows");
                                if (selectedRows) {
                                    row = selectedRows[0];
                                }
                                else {
                                    row = $grid.igGrid("selectedRow");
                                }
                                if (row) {
                                    var rowScrollTop = row.index * row.element.height();
                                    var scrollContainer = $($grid.igGrid("container")).find("#" + $grid.igGrid("id") + "_scrollContainer");
                                    if (isNaN(rowScrollTop) // In case virtualization not render row 
                                        || rowScrollTop < scrollContainer.scrollTop()
                                        || rowScrollTop > scrollContainer.scrollTop() + scrollContainer.height() - row.element.height()) {
                                        $grid.igGrid("virtualScrollTo", row.index === undefined ? getSelectRowIndex($grid, row.id) : row.index);
                                    }
                                }
                            });
                        }
                        else {
                            $grid.on("selectChange", function () {
                                var row = null;
                                var selectedRows = $grid.igGrid("selectedRows");
                                if (selectedRows) {
                                    row = selectedRows[0];
                                }
                                else {
                                    row = $grid.igGrid("selectedRow");
                                }
                                if (row) {
                                    var index = row.index;
                                    var height = row.element[0].scrollHeight;
                                    var gridId = $grid.attr('id');
                                    $("#" + gridId + "_scrollContainer").scrollTop(index * height);
                                }
                            });
                        }
                        return $grid;
                    }
                    function getSelectRowIndex($grid, selectedValue) {
                        var dataSource = $grid.igGrid("option", "dataSource");
                        var primaryKey = $grid.igGrid("option", "primaryKey");
                        return _.findIndex(dataSource, function (s) { return s[primaryKey].toString() === selectedValue.toString(); });
                    }
                    function setupTreeGridScroll($control, virtualization) {
                        var $treegrid = $control;
                        var id = $treegrid.attr('id');
                        $treegrid.on("selectChange", function () {
                            var row = null;
                            var selectedRows = $treegrid.igTreeGridSelection("selectedRows");
                            if (selectedRows) {
                                row = selectedRows[0];
                            }
                            else {
                                row = $treegrid.igTreeGridSelection("selectedRow");
                            }
                            if (row) {
                                ui.ig.tree.grid.expandTo(row.id, $treegrid);
                            }
                        });
                        return $treegrid;
                    }
                    function setupIgTreeScroll($control) {
                        var id = $control.attr('id');
                        $control.on("selectChange", function () {
                            var selectedRows = $control.ntsTreeDrag("getSelected");
                            if ($.isArray(selectedRows)) {
                                selectedRows = selectedRows[0];
                            }
                            if (!nts.uk.util.isNullOrUndefined(selectedRows)) {
                                $control.igTree("expandToNode", selectedRows.element);
                                var index = _.findIndex($control.find("li"), function (e) {
                                    return $(e).is(selectedRows.element);
                                });
                                if (index >= 0) {
                                    var scrollTo_1 = index * 29;
                                    var scrollTop = $control.scrollTop();
                                    var height = $control.height();
                                    if (scrollTo_1 < scrollTop || scrollTo_1 > scrollTop + height - 28) {
                                        $control.scrollTop(scrollTo_1);
                                    }
                                }
                            }
                        });
                        return $control;
                    }
                })(ntsSearchBox || (ntsSearchBox = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_22) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsGrid;
                (function (ntsGrid) {
                    var storage;
                    var dist;
                    (function (dist) {
                        dist.REMOTE = "Remote";
                        /**
                         * Query.
                         */
                        function query(features) {
                            storage = new Local();
                            var store = feature.find(features, feature.STORAGE);
                            if (!store)
                                return;
                            if (store.type === dist.REMOTE) {
                                storage = new Remote(store.loadPath, store.savePath);
                            }
                        }
                        dist.query = query;
                        var Local = (function () {
                            function Local() {
                            }
                            /**
                             * Get item.
                             */
                            Local.prototype.getItem = function (key) {
                                var dfd = $.Deferred();
                                dfd.resolve(uk.localStorage.getItem(key));
                                return dfd.promise();
                            };
                            /**
                             * Set item.
                             */
                            Local.prototype.setItemAsJson = function (key, value) {
                                var dfd = $.Deferred();
                                uk.localStorage.setItemAsJson(key, value);
                                dfd.resolve(true);
                                return dfd.promise();
                            };
                            return Local;
                        }());
                        dist.Local = Local;
                        var Remote = (function () {
                            function Remote(loadPath, savePath) {
                                this.loadPath = loadPath;
                                this.savePath = savePath;
                            }
                            /**
                             * Get item.
                             */
                            Remote.prototype.getItem = function (key) {
                                var dfd = $.Deferred();
                                uk.request.ajax(this.loadPath, { value: key }).done(function (widths) {
                                    dfd.resolve(uk.util.optional.of(widths));
                                });
                                return dfd.promise();
                            };
                            /**
                             * Set item.
                             */
                            Remote.prototype.setItemAsJson = function (key, value) {
                                var dfd = $.Deferred();
                                uk.request.ajax(this.savePath, { key: key, columns: value }).done(function (res) {
                                    dfd.resolve(res);
                                });
                                return dfd.promise();
                            };
                            return Remote;
                        }());
                        dist.Remote = Remote;
                    })(dist || (dist = {}));
                    $.fn.ntsGrid = function (options) {
                        var self = this;
                        if (typeof options === "string") {
                            return functions.ntsAction($(self), options, [].slice.call(arguments).slice(1));
                        }
                        if (options.ntsControls === undefined) {
                            $(this).igGrid(options);
                            return;
                        }
                        if (options.hidePrimaryKey) {
                            _.forEach(options.columns, function (c) {
                                if (c.key === options.primaryKey) {
                                    c.width = "1px";
                                    return false;
                                }
                            });
                        }
                        var flatCols = validation.scanValidators($(self), options.columns);
                        // Cell color
                        var cellFormatter = new color.CellFormatter($(this), options.ntsFeatures);
                        $(this).addClass('compact-grid nts-grid').wrap($("<div class='nts-grid-wrapper'/>"));
                        var columnControlTypes = {};
                        var columnSpecialTypes = {};
                        var bounceCombos = {};
                        var cbHeaderColumns = [];
                        var cbSelectionColumns = {};
                        var formatColumn = function (column) {
                            if (column.hidden)
                                return column;
                            if (column.showHeaderCheckbox) {
                                column.headerText = ntsControls.createHeaderCheckbox({
                                    controlDef: {
                                        options: { value: 1, text: column.headerText },
                                        optionsValue: 'value',
                                        optionsText: 'text'
                                    }
                                }, column.key);
                                cbHeaderColumns.push(column.key);
                                cbSelectionColumns[column.key] = {
                                    selectAll: false, quantity: 0,
                                    onSelect: function (value) {
                                        var fs = this;
                                        if (value && ++fs.quantity === options.dataSource.length) {
                                            fs.th.find(".nts-grid-header-control-" + column.key).find("input[type='checkbox']").prop("checked", true);
                                            fs.selectAll = true;
                                        }
                                        else if (!value && fs.quantity > 0) {
                                            fs.quantity--;
                                            if (fs.selectAll) {
                                                fs.th.find(".nts-grid-header-control-" + column.key).find("input[type='checkbox']").prop("checked", false);
                                                fs.selectAll = false;
                                            }
                                        }
                                    }
                                };
                            }
                            // Have column group
                            if (!uk.util.isNullOrUndefined(column.group)) {
                                var cols = _.map(column.group, formatColumn);
                                column.group = cols;
                                return column;
                            }
                            // Special column types
                            specialColumn.ifTrue(columnSpecialTypes, column, bounceCombos, flatCols);
                            // Control types
                            if (column.ntsControl === undefined) {
                                columnControlTypes[column.key] = ntsControls.TEXTBOX;
                                return cellFormatter.format(column);
                            }
                            if (column.ntsControl === ntsControls.LABEL) {
                                ntsControls.drawLabel($(self), column, cellFormatter);
                                columnControlTypes[column.key] = ntsControls.LABEL;
                                return cellFormatter.format(column);
                            }
                            var controlDef = _.find(options.ntsControls, function (ctl) {
                                return ctl.name === column.ntsControl;
                            });
                            if (!uk.util.isNullOrUndefined(controlDef))
                                columnControlTypes[column.key] = controlDef.controlType;
                            else {
                                columnControlTypes[column.key] = ntsControls.TEXTBOX;
                                return cellFormatter.format(column);
                            }
                            var $self = $(self);
                            // Format column
                            column.formatter = function (value, rowObj) {
                                if (uk.util.isNullOrUndefined(rowObj))
                                    return value;
                                var rowId = rowObj[$self.igGrid("option", "primaryKey")];
                                // Update
                                var update = function (val) {
                                    if (!uk.util.isNullOrUndefined($self.data("igGrid"))) {
                                        updating.updateCell($self, rowId, column.key, column.dataType !== 'string' ? val : val.toString());
                                        if (options.autoCommit === undefined || options.autoCommit === false) {
                                            var updatedRow = $self.igGrid("rowById", rowId, false);
                                            $self.igGrid("commit");
                                            if (updatedRow !== undefined)
                                                $self.igGrid("virtualScrollTo", $(updatedRow).data("row-idx"));
                                        }
                                    }
                                };
                                // Delete row
                                var deleteRow = function () {
                                    if ($self.data("igGrid") !== null)
                                        $self.data("igGridUpdating").deleteRow(rowId);
                                };
                                // Get control
                                var ntsControl = ntsControls.getControl(controlDef.controlType);
                                var cell = $self.igGrid("cellById", rowId, column.key);
                                var isEnable = $(cell).find("." + ntsControl.containerClass()).data("enable");
                                isEnable = isEnable !== undefined ? isEnable : controlDef.enable === undefined ? true : controlDef.enable;
                                var data = {
                                    rowId: rowId,
                                    columnKey: column.key,
                                    controlDef: controlDef,
                                    update: update,
                                    deleteRow: deleteRow,
                                    initValue: value,
                                    rowObj: rowObj,
                                    showHeaderCheckbox: column.showHeaderCheckbox,
                                    enable: isEnable
                                };
                                var back;
                                if (back = bounceCombos[column.key]) {
                                    data.bounce = back;
                                }
                                var controlCls = "nts-grid-control-" + column.key + "-" + rowId;
                                var $container = $("<div/>").append($("<div/>").addClass(controlCls).css("height", ntsControls.HEIGHT_CONTROL));
                                var $_self = $self;
                                setTimeout(function () {
                                    var $self = $_self;
                                    var rowId = rowObj[$self.igGrid("option", "primaryKey")];
                                    var $gridCell = $self.igGrid("cellById", rowId, column.key);
                                    if (!$gridCell)
                                        return;
                                    if ($($gridCell.children()[0]).children().length === 0) {
                                        var $control = ntsControl.draw(data);
                                        $("." + controlCls).append($control);
                                        if (controlDef.controlType === ntsControls.CHECKBOX && column.showHeaderCheckbox) {
                                            var cbSelectCols = $self.data(internal.CB_SELECTED) || {};
                                            var cbColConf_1 = cbSelectCols[column.key];
                                            if (cbColConf_1) {
                                                $control.on("change", function () {
                                                    cbColConf_1.onSelect($(this).find("input[type='checkbox']").is(":checked"));
                                                });
                                            }
                                        }
                                    }
                                    ntsControl.$containedGrid = $self;
                                    // Cell state color
                                    var c = {
                                        id: rowId,
                                        columnKey: column.key,
                                        element: $gridCell[0]
                                    };
                                    // Format cell
                                    cellFormatter.style($self, c);
                                    color.rememberDisabled($self, c);
                                }, 0);
                                return $container.html();
                            };
                            return column;
                        };
                        var columns = _.map(options.columns, formatColumn);
                        options.columns = columns;
                        updating.addFeature(options);
                        options.autoCommit = true;
                        dist.query(options.ntsFeatures);
                        // Decorate editor border
                        events.onCellClick($(self));
                        // Copy&Paste
                        copyPaste.ifOn($(self), options);
                        events.afterRendered(options, cbSelectionColumns);
                        columnSize.init($(self), options.columns);
                        ntsControls.bindCbHeaderColumns(options, cbHeaderColumns, cbSelectionColumns);
                        // Group column key and its control type 
                        $(this).data(internal.CONTROL_TYPES, columnControlTypes);
                        // Group column key and its special type
                        $(this).data(internal.SPECIAL_COL_TYPES, columnSpecialTypes);
                        // Sheet
                        sheet.load.setup($(self), options);
                        // Common settings
                        settings.build($(self), options);
                        if (!onDemand.initial($(self), options)) {
                            $(this).igGrid(options);
                        }
                        // Window resize
                        $(window).resize(function () {
                            if (options.autoFitWindow) {
                                settings.setGridSize($(self));
                            }
                            columnSize.load($(self));
                        });
                    };
                    var feature;
                    (function (feature_1) {
                        feature_1.UPDATING = "Updating";
                        feature_1.SELECTION = "Selection";
                        feature_1.RESIZING = "Resizing";
                        feature_1.COLUMN_FIX = "ColumnFixing";
                        feature_1.PAGING = "Paging";
                        feature_1.COPY_PASTE = "CopyPaste";
                        feature_1.CELL_EDIT = "CellEdit";
                        feature_1.CELL_COLOR = "CellColor";
                        feature_1.CELL_STATE = "CellState";
                        feature_1.ROW_STATE = "RowState";
                        feature_1.TEXT_COLOR = "TextColor";
                        feature_1.HEADER_STYLES = "HeaderStyles";
                        feature_1.HIDING = "Hiding";
                        feature_1.SHEET = "Sheet";
                        feature_1.DEMAND_LOAD = "LoadOnDemand";
                        feature_1.STORAGE = "Storage";
                        /**
                         * Replace feature
                         */
                        function replaceBy(options, featureName, newFeature) {
                            var replaceId;
                            _.forEach(options.features, function (feature, id) {
                                if (feature.name === featureName) {
                                    replaceId = id;
                                    return false;
                                }
                            });
                            options.features.splice(replaceId, 1, newFeature);
                        }
                        feature_1.replaceBy = replaceBy;
                        /**
                         * Check enable
                         */
                        function isEnable(features, name) {
                            return _.find(features, function (feature) {
                                return feature.name === name;
                            }) !== undefined;
                        }
                        feature_1.isEnable = isEnable;
                        /**
                         * Find feature
                         */
                        function find(features, name) {
                            return _.find(features, function (feature) {
                                return feature.name === name;
                            });
                        }
                        feature_1.find = find;
                    })(feature || (feature = {}));
                    var updating;
                    (function (updating) {
                        /**
                         * Add feature
                         */
                        function addFeature(options) {
                            var updateFeature = createUpdateOptions(options);
                            if (!feature.isEnable(options.features, feature.UPDATING)) {
                                options.features.push(updateFeature);
                            }
                            else {
                                feature.replaceBy(options, feature.UPDATING, createUpdateOptions(options));
                            }
                        }
                        updating.addFeature = addFeature;
                        /**
                         * Create update options
                         */
                        function createUpdateOptions(options) {
                            var updateFeature = { name: feature.UPDATING, enableAddRow: false, enableDeleteRow: false, editMode: 'none' };
                            if (feature.isEnable(options.ntsFeatures, feature.CELL_EDIT)) {
                                updateFeature.editMode = "cell";
                                updateFeature.editCellStarting = startEditCell;
                                updateFeature.editCellStarted = editStarted;
                                updateFeature.editCellEnding = beforeFinishEditCell;
                            }
                            return updateFeature;
                        }
                        /**
                         * Check control
                         */
                        function containsNtsControl($target) {
                            var td = $target;
                            if (!$target.prev().is("td"))
                                td = $target.closest("td");
                            return td.find("div[class*='nts-grid-control']").length > 0;
                        }
                        updating.containsNtsControl = containsNtsControl;
                        /**
                         * Edit cell
                         */
                        function startEditCell(evt, ui) {
                            var selectedCell = selection.getSelectedCell($(evt.target));
                            if (containsNtsControl($(evt.currentTarget)) || utils.isEnterKey(evt) || utils.isTabKey(evt)) {
                                if ($(evt.currentTarget).find("div[class*='nts-editor-container']").length > 0)
                                    return false;
                                if (uk.util.isNullOrUndefined(selectedCell) || !utils.selectable($(evt.target)))
                                    return;
                                $(evt.target).igGridSelection("selectCell", selectedCell.rowIndex, selectedCell.index, utils.isFixedColumnCell(selectedCell, utils.getVisibleColumnsMap($(evt.target))));
                                return false;
                            }
                            else if (utils.disabled($(evt.currentTarget)))
                                return false;
                            if (uk.util.isNullOrUndefined(selectedCell) || !utils.selectable($(evt.target)))
                                return;
                            var $cell = $(selectedCell.element);
                            if ($cell.hasClass("currency-symbol"))
                                $cell.removeClass("currency-symbol");
                            return true;
                        }
                        /**
                         * Edit started.
                         */
                        function editStarted(evt, ui) {
                            var $grid = $(ui.owner.element);
                            var valueType = validation.getValueType($grid, ui.columnKey);
                            if (valueType === "TimeWithDay") {
                                var timeWithDayAttr_1 = uk.time.minutesBased.clock.dayattr.create(uk.time.minutesBased.clock.dayattr.parseString(ui.value).asMinutes);
                                setTimeout(function () {
                                    var $editor = $(ui.editor.find("input")[0]);
                                    $editor.val(timeWithDayAttr_1.shortText).select();
                                }, 140);
                            }
                            else if (valueType === "Currency") {
                                var groupSeparator = validation.getGroupSeparator($grid, ui.columnKey) || ",";
                                var value_1 = uk.text.replaceAll(ui.value, groupSeparator, "");
                                setTimeout(function () {
                                    ui.editor.addClass("input-currency-symbol");
                                    var $editor = $(ui.editor.find("input")[0]);
                                    var numb = Number(value_1);
                                    $editor.val(isNaN(numb) ? value_1 : numb).css("text-align", "right").select();
                                }, 140);
                            }
                        }
                        /**
                         * Validate
                         */
                        function onEditCell(evt, cell) {
                            var $grid = fixedColumns.realGridOf($(evt.currentTarget));
                            if (!utils.isEditMode($grid))
                                return;
                            var validators = $grid.data(validation.VALIDATORS);
                            var fieldValidator = validators[cell.columnKey];
                            if (uk.util.isNullOrUndefined(fieldValidator))
                                return;
                            var cellValue = $(cell.element).find("input:first").val();
                            var result = fieldValidator.probe(cellValue);
                            var $cellContainer = $(cell.element);
                            errors.clear($grid, cell);
                            if (!result.isValid) {
                                errors.set($grid, cell, result.errorMessage);
                            }
                        }
                        updating.onEditCell = onEditCell;
                        /**
                         * Trigger update
                         */
                        function triggerCellUpdate(evt, cell) {
                            var grid = evt.currentTarget;
                            var $targetGrid = fixedColumns.realGridOf($(grid));
                            if (utils.isEditMode($targetGrid) || utils.disabled($(cell.element)))
                                return;
                            if (utils.isAlphaNumeric(evt)) {
                                startEdit(evt, cell);
                            }
                            if (utils.isDeleteKey(evt)) {
                                $targetGrid.one(events.Handler.GRID_EDIT_CELL_STARTED, function (evt, ui) {
                                    $(ui.editor).find("input").val("");
                                });
                                startEdit(evt, cell);
                            }
                        }
                        updating.triggerCellUpdate = triggerCellUpdate;
                        /**
                         * Start edit
                         */
                        function startEdit(evt, cell) {
                            var $targetGrid = fixedColumns.realGridOf($(evt.currentTarget));
                            if (!utils.updatable($targetGrid))
                                return;
                            var $cell = $(cell.element);
                            if ($cell.hasClass("currency-symbol"))
                                $cell.removeClass("currency-symbol");
                            utils.startEdit($targetGrid, cell);
                            // Keep text contents if any, otherwise set input value
                            //                if ($(cell.element).text().trim() !== "") evt.preventDefault();
                            if (!utils.isDeleteKey(evt)) {
                                setTimeout(function () {
                                    var cellValue;
                                    var $editor = $targetGrid.igGridUpdating("editorForCell", $(cell.element));
                                    if (!uk.util.isNullOrUndefined($editor.data("igTextEditor"))) {
                                        var newText = $editor.igTextEditor("value");
                                        newText = newText.substr(newText.length - 1);
                                        $editor.igTextEditor("value", newText.trim());
                                        cellValue = newText;
                                    }
                                    else if (!uk.util.isNullOrUndefined($editor.data("igNumericEditor"))) {
                                        var newValue = $editor.igNumericEditor("value");
                                        var numericStr = String(newValue);
                                        numericStr = numericStr.substr(numericStr.length - 1);
                                        $editor.igNumericEditor("value", parseInt(numericStr));
                                        setTimeout(function () {
                                            var length = String($editor.igNumericEditor("value")).length;
                                            $editor.igNumericEditor("select", length, length);
                                        }, 100);
                                        cellValue = numericStr;
                                    }
                                    // Validate
                                    var validators = $targetGrid.data(validation.VALIDATORS);
                                    var fieldValidator = validators[cell.columnKey];
                                    if (uk.util.isNullOrUndefined(fieldValidator))
                                        return;
                                    var result = fieldValidator.probe(cellValue);
                                    var $cellContainer = $(cell.element);
                                    errors.clear($targetGrid, cell);
                                    if (!result.isValid) {
                                        errors.set($targetGrid, cell, result.errorMessage);
                                    }
                                }, 100);
                            }
                            evt.stopImmediatePropagation();
                        }
                        /**
                         * Interrupt manipulations (e.g. cell navigation) on grid if errors occurred (setting needed).
                         */
                        function beforeFinishEditCell(evt, ui) {
                            var $grid = $(evt.target);
                            var selectedCell = selection.getSelectedCell($grid);
                            var settings = $grid.data(internal.SETTINGS);
                            if (settings.preventEditInError
                                && utils.isEditMode($grid) && errors.any(selectedCell)) {
                                return false;
                            }
                            if (utils.isEditMode($grid) && (utils.isTabKey(evt) || utils.isEnterKey(evt) || evt.keyCode === undefined)) {
                                var gridUpdate_1 = $grid.data("igGridUpdating");
                                var origValues = gridUpdate_1._originalValues;
                                if (!uk.util.isNullOrUndefined(origValues)) {
                                    _.forEach(Object.keys(origValues), function (colKey, idx) {
                                        if (idx === 0) {
                                            // Skip default update
                                            gridUpdate_1._originalValues[colKey] = ui.value;
                                            return false;
                                        }
                                    });
                                    _.defer(function () {
                                        updating.updateCell($grid, selectedCell.id, selectedCell.columnKey, ui.value);
                                    });
                                }
                            }
                            // Remove border color of editor
                            var $editorContainer = $(selectedCell.element).find(errors.EDITOR_SELECTOR);
                            if ($editorContainer.length > 0)
                                $editorContainer.css(errors.NO_ERROR_STL);
                            specialColumn.tryDo($grid, selectedCell, ui.value);
                            if (ui.editor.hasClass("input-currency-symbol")) {
                                $(selectedCell.element).addClass("currency-symbol");
                            }
                            return true;
                        }
                        /**
                         * Update row and re-render all controls.
                         * @Obsolete
                         */
                        function _updateRow($grid, rowId, visibleColumnsMap, updatedRowData) {
                            if (uk.util.isNullOrUndefined(updatedRowData) || Object.keys(updatedRowData).length === 0)
                                return;
                            $grid.igGridUpdating("updateRow", utils.parseIntIfNumber(rowId, $grid, visibleColumnsMap), updatedRowData);
                        }
                        updating._updateRow = _updateRow;
                        /**
                         * Update cell.
                         */
                        function updateCell($grid, rowId, columnKey, cellValue, allColumnsMap, forceRender) {
                            var grid = $grid.data("igGrid");
                            if (!utils.updatable($grid))
                                return;
                            var gridUpdate = $grid.data("igGridUpdating");
                            var autoCommit = grid.options.autoCommit;
                            var columnsMap = allColumnsMap || utils.getColumnsMap($grid);
                            var rId = utils.parseIntIfNumber(rowId, $grid, columnsMap);
                            var validators = $grid.data(validation.VALIDATORS);
                            var fieldValidator = validators[columnKey];
                            if (fieldValidator) {
                                var result = fieldValidator.probe(String(cellValue));
                                if (result.isValid) {
                                    cellValue = result.parsedValue;
                                }
                            }
                            grid.dataSource.setCellValue(rId, columnKey, cellValue, autoCommit);
                            var isControl = utils.isNtsControl($grid, columnKey);
                            if (!isControl || forceRender)
                                renderCell($grid, rId, columnKey);
                            if (isControl) {
                                $grid.trigger(events.Handler.CONTROL_CHANGE, [{ columnKey: columnKey, value: cellValue }]);
                            }
                            gridUpdate._notifyCellUpdated(rId);
                            notifyUpdate($grid, rowId, columnKey, cellValue);
                        }
                        updating.updateCell = updateCell;
                        /**
                         * Update row.
                         */
                        function updateRow($grid, rowId, updatedRowData, allColumnsMap, forceRender) {
                            var grid = $grid.data("igGrid");
                            if (!utils.updatable($grid))
                                return;
                            var gridUpdate = $grid.data("igGridUpdating");
                            var autoCommit = grid.options.autoCommit;
                            var columnsMap = allColumnsMap || utils.getColumnsMap($grid);
                            var rId = utils.parseIntIfNumber(rowId, $grid, columnsMap);
                            var origData = gridUpdate._getLatestValues(rId);
                            grid.dataSource.updateRow(rId, $.extend({}, origData, updatedRowData), autoCommit);
                            _.forEach(Object.keys(updatedRowData), function (key) {
                                notifyUpdate($grid, rowId, key, updatedRowData[key]);
                                var isControl = utils.isNtsControl($grid, key);
                                if (isControl) {
                                    $grid.trigger(events.Handler.CONTROL_CHANGE, [{ columnKey: key, value: updatedRowData[key] }]);
                                }
                                if (isControl && !forceRender)
                                    return;
                                var $vCell = renderCell($grid, rId, key, origData);
                                // Validate
                                var validators = $grid.data(validation.VALIDATORS);
                                var fieldValidator = validators[key];
                                if (uk.util.isNullOrUndefined(fieldValidator))
                                    return;
                                var cellValue = updatedRowData[key];
                                var result = fieldValidator.probe(String(cellValue));
                                var cell = {
                                    id: rowId,
                                    columnKey: key,
                                    element: $vCell
                                };
                                errors.clear($grid, cell);
                                if (!result.isValid) {
                                    errors.set($grid, cell, result.errorMessage);
                                }
                            });
                            gridUpdate._notifyRowUpdated(rId, null);
                        }
                        updating.updateRow = updateRow;
                        /**
                         * Notify update.
                         */
                        function notifyUpdate($grid, rowId, columnKey, value) {
                            var updatedCells = $grid.data(internal.UPDATED_CELLS);
                            if (!updatedCells) {
                                $grid.data(internal.UPDATED_CELLS, []);
                                updatedCells = $grid.data(internal.UPDATED_CELLS);
                            }
                            var index = -1;
                            var tCell = _.find(updatedCells, function (c, i) {
                                if (c.rowId === rowId && c.columnKey === columnKey) {
                                    index = i;
                                    return true;
                                }
                            });
                            if (tCell)
                                updatedCells[index].value = value;
                            else
                                updatedCells.push({ rowId: rowId, columnKey: columnKey, value: value });
                        }
                        /**
                         * Render cell
                         */
                        function renderCell($grid, rowId, columnKey, latestValues) {
                            var grid = $grid.data("igGrid");
                            if (!utils.updatable($grid))
                                return;
                            var gridUpdate = $grid.data("igGridUpdating");
                            var rowData = gridUpdate._getLatestValues(rowId);
                            var column = _.find(utils.getVisibleColumns($grid), function (col) {
                                return col.key === columnKey;
                            });
                            var $cell = $grid.igGrid("cellById", rowId, columnKey);
                            $cell.html(String(grid._renderCell(rowData[columnKey], column, rowData)));
                            return $cell;
                        }
                        updating.renderCell = renderCell;
                    })(updating || (updating = {}));
                    var selection;
                    (function (selection_1) {
                        /**
                         * Add feature
                         */
                        function addFeature(options) {
                            var selection = { name: feature.SELECTION, mode: "cell", multipleSelection: true, wrapAround: false, cellSelectionChanged: selectCellChange };
                            if (!feature.isEnable(options.features, feature.SELECTION)) {
                                options.features.push(selection);
                            }
                            else {
                                feature.replaceBy(options, feature.SELECTION, selection);
                            }
                        }
                        selection_1.addFeature = addFeature;
                        /**
                         * Select before
                         */
                        function selectBefore($grid, enterDirection) {
                            var enter = enterDirection || "right";
                            if (enter === "right")
                                selectPrev($grid);
                            else
                                selectAbove($grid);
                        }
                        selection_1.selectBefore = selectBefore;
                        /**
                         * Select previous
                         */
                        function selectPrev($grid) {
                            var selectedCell = getSelectedCell($grid);
                            if (uk.util.isNullOrUndefined(selectedCell))
                                return;
                            clearSelection($grid);
                            var visibleColumnsMap = utils.getVisibleColumnsMap($grid);
                            var isFixed = utils.isFixedColumnCell(selectedCell, visibleColumnsMap);
                            if (selectedCell.index > 0) {
                                selectCell($grid, selectedCell.rowIndex, selectedCell.index - 1, isFixed);
                                var afterSelect = getSelectedCell($grid);
                                if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                    selectPrev($grid);
                                }
                            }
                            else if (selectedCell.index === 0) {
                                var columnsGroup = utils.columnsGroupOfCell(selectedCell, visibleColumnsMap);
                                if (uk.util.isNullOrUndefined(columnsGroup) || columnsGroup.length === 0)
                                    return;
                                var fixedColumns_1 = utils.getFixedColumns(visibleColumnsMap);
                                var unfixedColumns_1 = utils.getUnfixedColumns(visibleColumnsMap);
                                if (isFixed || !utils.fixable($grid)) {
                                    if (selectedCell.rowIndex > 0) {
                                        selectCell($grid, selectedCell.rowIndex - 1, unfixedColumns_1.length - 1);
                                    }
                                    else {
                                        var dataSource = $grid.igGrid("option", "dataSource");
                                        var sourceSize_1 = dataSource.length;
                                        $grid.igGrid("virtualScrollTo", sourceSize_1);
                                        setTimeout(function () {
                                            if (utils.pageable($grid)) {
                                                var pageSize = $grid.igGridPaging("pageSize");
                                                var pageIndex = $grid.igGridPaging("pageIndex");
                                                if (pageSize * (pageIndex + 1) > sourceSize_1) {
                                                    selectCell($grid, sourceSize_1 - pageSize * pageIndex - 1, unfixedColumns_1.length - 1);
                                                }
                                                else {
                                                    selectCell($grid, pageSize - 1, unfixedColumns_1.length - 1);
                                                }
                                                return;
                                            }
                                            selectCell($grid, sourceSize_1 - 1, unfixedColumns_1.length - 1);
                                        }, 1);
                                    }
                                }
                                else if (utils.fixable($grid) && !isFixed) {
                                    selectCell($grid, selectedCell.rowIndex, fixedColumns_1.length - 1, true);
                                }
                            }
                        }
                        selection_1.selectPrev = selectPrev;
                        /**
                         * Select above
                         */
                        function selectAbove($grid) {
                            var selectedCell = getSelectedCell($grid);
                            if (uk.util.isNullOrUndefined(selectedCell))
                                return;
                            clearSelection($grid);
                            var isFixed = utils.isFixedColumnCell(selectedCell, utils.getVisibleColumnsMap($grid));
                            var dataSource = $grid.igGrid("option", "dataSource");
                            var sourceSize = dataSource.length;
                            if (selectedCell.rowIndex > 0) {
                                selectCell($grid, selectedCell.rowIndex - 1, selectedCell.index, isFixed);
                            }
                            else if (selectedCell.rowIndex === 0) {
                                var visibleColumnsMap_1 = utils.getVisibleColumnsMap($grid);
                                var columnsGroup_1 = utils.columnsGroupOfCell(selectedCell, visibleColumnsMap_1);
                                if (uk.util.isNullOrUndefined(columnsGroup_1) || columnsGroup_1.length === 0)
                                    return;
                                $grid.igGrid("virtualScrollTo", sourceSize);
                                if (utils.pageable($grid)) {
                                    var pageSize = $grid.igGridPaging("pageSize");
                                    var pageIndex = $grid.igGridPaging("pageIndex");
                                    var lastIndex_1 = pageSize - 1;
                                    if (pageSize * (pageIndex + 1) > sourceSize) {
                                        lastIndex_1 = sourceSize - pageSize * pageIndex - 1;
                                    }
                                    setTimeout(function () {
                                        if (selectedCell.index > 0) {
                                            selectCell($grid, lastIndex_1, selectedCell.index - 1, columnsGroup_1[0].fixed);
                                        }
                                        else if (selectedCell.index === 0) {
                                            if (columnsGroup_1[0].fixed) {
                                                selectCell($grid, lastIndex_1, visibleColumnsMap_1["undefined"].length - 1);
                                                return;
                                            }
                                            var noOfColTypes = Object.keys(visibleColumnsMap_1).length;
                                            if (noOfColTypes === 2) {
                                                selectCell($grid, lastIndex_1, visibleColumnsMap_1["true"].length - 1, true);
                                            }
                                            else {
                                                selectCell($grid, lastIndex_1, visibleColumnsMap_1["undefined"].length - 1);
                                            }
                                        }
                                        var afterSelect = getSelectedCell($grid);
                                        if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                            selectPrev($grid);
                                            selectBelow($grid);
                                        }
                                    }, 1);
                                    return;
                                }
                                setTimeout(function () {
                                    if (selectedCell.index > 0) {
                                        selectCell($grid, sourceSize - 1, selectedCell.index - 1, columnsGroup_1[0].fixed);
                                    }
                                    else if (selectedCell.index === 0) {
                                        if (columnsGroup_1[0].fixed) {
                                            selectCell($grid, sourceSize - 1, visibleColumnsMap_1["undefined"].length - 1);
                                            return;
                                        }
                                        var noOfColTypes = Object.keys(visibleColumnsMap_1).length;
                                        if (noOfColTypes === 2) {
                                            selectCell($grid, sourceSize - 1, visibleColumnsMap_1["true"].length - 1, true);
                                        }
                                        else {
                                            selectCell($grid, sourceSize - 1, visibleColumnsMap_1["undefined"].length - 1);
                                        }
                                    }
                                    var afterSelect = getSelectedCell($grid);
                                    if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                        selectPrev($grid);
                                        selectBelow($grid);
                                    }
                                }, 1);
                            }
                        }
                        selection_1.selectAbove = selectAbove;
                        /**
                         * Select follow
                         */
                        function selectFollow($grid, enterDirection) {
                            var enter = enterDirection || "right";
                            if (enter === "right")
                                selectNext($grid);
                            else
                                selectBelow($grid);
                        }
                        selection_1.selectFollow = selectFollow;
                        /**
                         * Select next
                         */
                        function selectNext($grid) {
                            var selectedCell = getSelectedCell($grid);
                            if (uk.util.isNullOrUndefined(selectedCell))
                                return;
                            clearSelection($grid);
                            var visibleColumnsMap = utils.getVisibleColumnsMap($grid);
                            var dataSource = $grid.igGrid("option", "dataSource");
                            var columnsGroup = utils.columnsGroupOfCell(selectedCell, visibleColumnsMap);
                            if (uk.util.isNullOrUndefined(columnsGroup) || columnsGroup.length === 0)
                                return;
                            if (selectedCell.index < columnsGroup.length - 1) {
                                selectCell($grid, selectedCell.rowIndex, selectedCell.index + 1, columnsGroup[0].fixed);
                            }
                            else if (selectedCell.index === columnsGroup.length - 1) {
                                if (columnsGroup[0].fixed) {
                                    selectCell($grid, selectedCell.rowIndex, 0);
                                }
                                else if (utils.pageable($grid)) {
                                    var pageSize = $grid.igGridPaging("pageSize");
                                    var pageIndex = $grid.igGridPaging("pageIndex");
                                    if ((dataSource.length < pageSize * (pageIndex + 1)
                                        && selectedCell.rowIndex < (dataSource.length - pageSize * pageIndex - 1))
                                        || selectedCell.rowIndex < (pageSize - 1)) {
                                        selectCell($grid, selectedCell.rowIndex + 1, 0, true);
                                        var afterSelect = getSelectedCell($grid);
                                        if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                            selectNext($grid);
                                        }
                                    }
                                    else {
                                        $grid.igGrid("virtualScrollTo", "0px");
                                        setTimeout(function () {
                                            selectCell($grid, 0, 0, utils.fixable($grid) ? true : false);
                                            var afterSelect = getSelectedCell($grid);
                                            if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                                selectNext($grid);
                                            }
                                        }, 1);
                                    }
                                }
                                else if (selectedCell.rowIndex < dataSource.length - 1) {
                                    selectCell($grid, selectedCell.rowIndex + 1, 0, true);
                                    var afterSelect = getSelectedCell($grid);
                                    if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                        selectNext($grid);
                                    }
                                }
                                else {
                                    $grid.igGrid("virtualScrollTo", "0px");
                                    setTimeout(function () {
                                        selectCell($grid, 0, 0, utils.fixable($grid) ? true : false);
                                        var afterSelect = getSelectedCell($grid);
                                        if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                            selectNext($grid);
                                        }
                                    }, 1);
                                }
                            }
                        }
                        /**
                         * Select below
                         */
                        function selectBelow($grid) {
                            var selectedCell = getSelectedCell($grid);
                            if (uk.util.isNullOrUndefined(selectedCell))
                                return;
                            clearSelection($grid);
                            var isFixed = utils.isFixedColumnCell(selectedCell, utils.getVisibleColumnsMap($grid));
                            var dataSource = $grid.igGrid("option", "dataSource");
                            var sourceSize = dataSource.length;
                            if (utils.pageable($grid)) {
                                var pageSize = $grid.igGridPaging("pageSize");
                                var pageIndex = $grid.igGridPaging("pageIndex");
                                if ((pageSize * (pageIndex + 1) > sourceSize
                                    && selectedCell.rowIndex < (sourceSize - pageSize * pageIndex - 1))
                                    || selectedCell.rowIndex < (pageSize - 1)) {
                                    selectCell($grid, selectedCell.rowIndex + 1, selectedCell.index, isFixed);
                                }
                                else {
                                    var visibleColumnsMap_2 = utils.getVisibleColumnsMap($grid);
                                    var columnsGroup_2 = utils.columnsGroupOfCell(selectedCell, visibleColumnsMap_2);
                                    if (uk.util.isNullOrUndefined(columnsGroup_2) || columnsGroup_2.length === 0)
                                        return;
                                    $grid.igGrid("virtualScrollTo", "0px");
                                    setTimeout(function () {
                                        if (selectedCell.index < columnsGroup_2.length - 1) {
                                            selectCell($grid, 0, selectedCell.index + 1, columnsGroup_2[0].fixed);
                                        }
                                        else if (selectedCell.index === columnsGroup_2.length - 1) {
                                            if (columnsGroup_2[0].fixed) {
                                                selectCell($grid, 0, 0);
                                            }
                                            else {
                                                selectCell($grid, 0, 0, Object.keys(visibleColumnsMap_2).length === 2 ? true : undefined);
                                            }
                                        }
                                        var afterSelect = getSelectedCell($grid);
                                        if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                            selectNext($grid);
                                        }
                                    }, 1);
                                }
                                return;
                            }
                            if (selectedCell.rowIndex < sourceSize - 1) {
                                selectCell($grid, selectedCell.rowIndex + 1, selectedCell.index, isFixed);
                            }
                            else if (selectedCell.rowIndex === sourceSize - 1) {
                                var visibleColumnsMap_3 = utils.getVisibleColumnsMap($grid);
                                var columnsGroup_3 = utils.columnsGroupOfCell(selectedCell, visibleColumnsMap_3);
                                if (uk.util.isNullOrUndefined(columnsGroup_3) || columnsGroup_3.length === 0)
                                    return;
                                $grid.igGrid("virtualScrollTo", "0px");
                                setTimeout(function () {
                                    if (selectedCell.index < columnsGroup_3.length - 1) {
                                        selectCell($grid, 0, selectedCell.index + 1, columnsGroup_3[0].fixed);
                                    }
                                    else if (selectedCell.index === columnsGroup_3.length - 1) {
                                        if (columnsGroup_3[0].fixed) {
                                            selectCell($grid, 0, 0);
                                        }
                                        else {
                                            selectCell($grid, 0, 0, Object.keys(visibleColumnsMap_3).length === 2 ? true : undefined);
                                        }
                                    }
                                    var afterSelect = getSelectedCell($grid);
                                    if (afterSelect && $(afterSelect.element).outerWidth() === 1) {
                                        selectNext($grid);
                                    }
                                }, 1);
                            }
                        }
                        /**
                         * Get selected cell
                         */
                        function getSelectedCell($grid) {
                            if (!utils.selectable($grid)) {
                                var $targetGrid = fixedColumns.realGridOf($grid);
                                if (!uk.util.isNullOrUndefined($targetGrid)) {
                                    return $targetGrid.igGridSelection("selectedCells")[0] || $targetGrid.data(internal.SELECTED_CELL);
                                }
                            }
                            return $grid.igGridSelection("selectedCells")[0] || $grid.data(internal.SELECTED_CELL);
                        }
                        selection_1.getSelectedCell = getSelectedCell;
                        /**
                         * Get selected cells
                         */
                        function getSelectedCells($grid) {
                            return utils.selectable($grid) ? $grid.igGridSelection("selectedCells") : undefined;
                        }
                        selection_1.getSelectedCells = getSelectedCells;
                        /**
                         * Select cell
                         */
                        function selectCell($grid, rowIndex, columnIndex, isFixed) {
                            if (!utils.selectable($grid))
                                return;
                            $grid.igGridSelection("selectCell", rowIndex, columnIndex, utils.fixable($grid) ? isFixed : undefined);
                            // Fire cell selection change
                            var ui = { owner: $grid.data("igGridSelection"),
                                selectedCells: $grid.igGridSelection("selectedCells") };
                            var selectedCells = $grid.igGridSelection("selectedCells");
                            if (selectedCells.length > 0)
                                ui.cell = selectedCells[0];
                            selectCellChange({ target: $grid[0] }, ui);
                            var selectedCell = getSelectedCell($grid);
                            var $element = $(selectedCell.element);
                            var ntsCombo = $element.find(".nts-combo-container");
                            if (ntsCombo.length > 0) {
                                ntsCombo.find("input").select();
                            }
                            var ntsSwitchs = $element.find(".nts-switch-container");
                            if (ntsSwitchs.length > 0) {
                                ntsSwitchs.find("button").filter(function (i, b) { return $(b).hasClass("selected"); }).focus();
                            }
                        }
                        selection_1.selectCell = selectCell;
                        function selectCellById($grid, rowId, columnKey) {
                            return;
                        }
                        selection_1.selectCellById = selectCellById;
                        function selectCellChange(evt, ui) {
                            if (uk.util.isNullOrUndefined(ui.cell))
                                return;
                            $(evt.target).data(internal.SELECTED_CELL, ui.cell);
                        }
                        function onCellNavigate(evt, enterDirection) {
                            var grid = evt.currentTarget;
                            var $targetGrid = fixedColumns.realGridOf($(grid));
                            if (utils.isTabKey(evt)) {
                                if (utils.isEditMode($targetGrid))
                                    $targetGrid.igGridUpdating("endEdit");
                                if (evt.shiftKey) {
                                    selection.selectPrev($targetGrid);
                                }
                                else {
                                    selection.selectFollow($targetGrid);
                                }
                                evt.preventDefault();
                                return;
                            }
                            if (utils.isEnterKey(evt)) {
                                if (evt.shiftKey) {
                                    selection.selectBefore($targetGrid, enterDirection);
                                }
                                else {
                                    selection.selectFollow($targetGrid, enterDirection);
                                }
                                evt.stopImmediatePropagation();
                                return;
                            }
                        }
                        selection_1.onCellNavigate = onCellNavigate;
                        /**
                         * Clear selection
                         */
                        function clearSelection($grid) {
                            if (utils.selectable($grid)) {
                                $grid.igGridSelection("clearSelection");
                                return;
                            }
                            var $targetGrid = fixedColumns.realGridOf($grid);
                            if (!uk.util.isNullOrUndefined($targetGrid) && utils.selectable($targetGrid))
                                $targetGrid.igGridSelection("clearSelection");
                        }
                        var Direction = (function () {
                            function Direction() {
                            }
                            Direction.prototype.bind = function (evt) {
                                onCellNavigate(evt, this.to);
                            };
                            return Direction;
                        }());
                        selection_1.Direction = Direction;
                    })(selection || (selection = {}));
                    var columnSize;
                    (function (columnSize) {
                        /**
                         * Initialize
                         */
                        function init($grid, columns) {
                            initValueExists($grid).done(function (res) {
                                if (res)
                                    return;
                                var columnWidths = {};
                                _.forEach(columns, function (col, index) {
                                    flat(col, columnWidths);
                                });
                                saveAll($grid, columnWidths);
                            });
                        }
                        columnSize.init = init;
                        /**
                         * Flat.
                         */
                        function flat(col, columnWidths) {
                            if (col.group) {
                                _.forEach(col.group, function (sCol) {
                                    flat(sCol, columnWidths);
                                });
                                return;
                            }
                            columnWidths[col.key] = parseInt(col.width);
                        }
                        /**
                         * Load data
                         */
                        function load($grid) {
                            var storeKey = getStorageKey($grid);
                            storage.getItem(storeKey).done(function (widths) {
                                widths.ifPresent(function (columns) {
                                    var widthColumns;
                                    try {
                                        widthColumns = JSON.parse(columns);
                                    }
                                    catch (e) {
                                        widthColumns = columns;
                                    }
                                    setWidths($grid, widthColumns);
                                    return null;
                                });
                            });
                        }
                        columnSize.load = load;
                        /**
                         * Save data
                         */
                        function save($grid, columnKey, columnWidth) {
                            var storeKey = getStorageKey($grid);
                            if (storage instanceof dist.Local) {
                                var columnsWidth = uk.localStorage.getItem(storeKey);
                                var widths = {};
                                if (columnsWidth.isPresent()) {
                                    widths = JSON.parse(columnsWidth.get());
                                    widths[columnKey] = columnWidth;
                                }
                                else {
                                    widths[columnKey] = columnWidth;
                                }
                                uk.localStorage.setItemAsJson(storeKey, widths);
                            }
                            else if (storage instanceof dist.Remote) {
                                var width = {};
                                width[columnKey] = columnWidth;
                                storage.setItemAsJson(storeKey, width);
                            }
                        }
                        columnSize.save = save;
                        /**
                         * Save all data
                         */
                        function saveAll($grid, widths) {
                            var storeKey = getStorageKey($grid);
                            storage.getItem(storeKey).done(function (columnWidths) {
                                if (!columnWidths.isPresent()) {
                                    storage.setItemAsJson(storeKey, widths);
                                }
                            });
                        }
                        function initValueExists($grid) {
                            var dfd = $.Deferred();
                            var storeKey = getStorageKey($grid);
                            storage.getItem(storeKey).done(function (columnWidths) {
                                dfd.resolve(columnWidths.isPresent());
                            });
                            return dfd.promise();
                        }
                        function getStorageKey($grid) {
                            return uk.request.location.current.rawUrl + "/" + $grid.attr("id");
                        }
                        /**
                         * Load column
                         */
                        function loadOne($grid, columnKey) {
                            var storeKey = getStorageKey($grid);
                            storage.getItem(storeKey).done(function (widths) {
                                widths.ifPresent(function (columns) {
                                    var widthColumns = JSON.parse(columns);
                                    setWidth($grid, columnKey, widthColumns[columnKey]);
                                    return null;
                                });
                            });
                        }
                        columnSize.loadOne = loadOne;
                        /**
                         * Load fixed columns
                         */
                        function loadFixedColumns($grid) {
                            var storeKey = getStorageKey($grid);
                            uk.localStorage.getItem(storeKey).ifPresent(function (columns) {
                                var fixedColumns = utils.getVisibleFixedColumns($grid);
                                if (uk.util.isNullOrUndefined(fixedColumns) || fixedColumns.length === 0)
                                    return;
                                var widthColumns = JSON.parse(columns);
                                _.forEach(fixedColumns, function (fixedCol) {
                                    setWidth($grid, fixedCol.key, widthColumns[fixedCol.key]);
                                });
                                return null;
                            });
                        }
                        columnSize.loadFixedColumns = loadFixedColumns;
                        /**
                         * Set width
                         */
                        function setWidth($grid, columnKey, width, noCheck) {
                            if (noCheck !== true && uk.util.isNullOrUndefined($grid.data("igGridResizing")))
                                return;
                            try {
                                $grid.igGridResizing("resize", columnKey, width);
                            }
                            catch (e) { }
                        }
                        /**
                         * Set widths
                         */
                        function setWidths($grid, columns) {
                            if (uk.util.isNullOrUndefined($grid.data("igGridResizing"))
                                || uk.util.isNullOrUndefined(columns))
                                return;
                            var columnKeys = Object.keys(columns);
                            _.forEach(columnKeys, function (key, index) {
                                setWidth($grid, key, columns[key], true);
                            });
                        }
                    })(columnSize || (columnSize = {}));
                    var functions;
                    (function (functions) {
                        functions.UPDATE_ROW = "updateRow";
                        functions.UPDATED_CELLS = "updatedCells";
                        functions.ENABLE_CONTROL = "enableNtsControlAt";
                        functions.ENABLE_ALL_CONTROLS = "enableNtsControls";
                        functions.DISABLE_CONTROL = "disableNtsControlAt";
                        functions.DISABLE_ALL_CONTROLS = "disableNtsControls";
                        functions.DIRECT_ENTER = "directEnter";
                        functions.CHECK_ALL = "checkAll";
                        functions.UNCHECK_ALL = "uncheckAll";
                        functions.DESTROY = "destroy";
                        /**
                         * Actions
                         */
                        function ntsAction($grid, method, params) {
                            switch (method) {
                                case functions.UPDATE_ROW:
                                    var autoCommit = $grid.data("igGrid") !== null && $grid.igGrid("option", "autoCommit") ? true : false;
                                    updateRow($grid, params[0], params[1], autoCommit);
                                    break;
                                case functions.ENABLE_CONTROL:
                                    enableNtsControlAt($grid, params[0], params[1], params[2]);
                                    break;
                                case functions.ENABLE_ALL_CONTROLS:
                                    enableNtsControls($grid, params[0], params[1]);
                                    break;
                                case functions.DISABLE_CONTROL:
                                    disableNtsControlAt($grid, params[0], params[1], params[2]);
                                    break;
                                case functions.DISABLE_ALL_CONTROLS:
                                    disableNtsControls($grid, params[0], params[1]);
                                    break;
                                case functions.DIRECT_ENTER:
                                    var direction = $grid.data(internal.ENTER_DIRECT);
                                    direction.to = params[0];
                                    if (utils.fixable($grid)) {
                                        var fixedTable = fixedColumns.getFixedTable($grid);
                                        if (!uk.util.isNullOrUndefined(fixedTable)) {
                                            fixedTable.data(internal.ENTER_DIRECT).to = params[0];
                                        }
                                    }
                                    break;
                                case functions.CHECK_ALL:
                                    checkAll($grid, params[0]);
                                    break;
                                case functions.UNCHECK_ALL:
                                    uncheckAll($grid, params[0]);
                                    break;
                                case functions.DESTROY:
                                    destroy($grid);
                                    break;
                                case functions.UPDATED_CELLS:
                                    return $grid.data(internal.UPDATED_CELLS);
                            }
                        }
                        functions.ntsAction = ntsAction;
                        /**
                         * Update row
                         */
                        function updateRow($grid, rowId, object, autoCommit) {
                            updating.updateRow($grid, rowId, object, undefined, true);
                            if (!autoCommit) {
                                var updatedRow = $grid.igGrid("rowById", rowId, false);
                                $grid.igGrid("commit");
                                if (updatedRow !== undefined)
                                    $grid.igGrid("virtualScrollTo", $(updatedRow).data("row-idx"));
                            }
                        }
                        /**
                         * Disable controls
                         */
                        function disableNtsControls($grid, columnKey, controlType) {
                            var ds = $grid.igGrid("option", "dataSource");
                            var primaryKey = $grid.igGrid("option", "primaryKey");
                            for (var i = 0; i < ds.length; i++) {
                                var id = ds[i][primaryKey];
                                disableNtsControlAt($grid, id, columnKey, controlType);
                                color.pushDisable($grid, { id: id, columnKey: columnKey });
                            }
                        }
                        /**
                         * Enable controls
                         */
                        function enableNtsControls($grid, columnKey, controlType) {
                            var ds = $grid.igGrid("option", "dataSource");
                            var primaryKey = $grid.igGrid("option", "primaryKey");
                            for (var i = 0; i < ds.length; i++) {
                                var id = ds[i][primaryKey];
                                enableNtsControlAt($grid, id, columnKey, controlType);
                                color.popDisable($grid, { id: id, columnKey: columnKey });
                            }
                        }
                        /**
                         * Disable control
                         */
                        function disableNtsControlAt($grid, rowId, columnKey, controlType) {
                            var cellContainer = $grid.igGrid("cellById", rowId, columnKey);
                            var control = ntsControls.getControl(controlType);
                            if (uk.util.isNullOrUndefined(control))
                                return;
                            control.disable($(cellContainer));
                            if (!$(cellContainer).hasClass(color.Disable))
                                $(cellContainer).addClass(color.Disable);
                            color.pushDisable($grid, { id: rowId, columnKey: columnKey });
                        }
                        /**
                         * Enable control
                         */
                        function enableNtsControlAt($grid, rowId, columnKey, controlType) {
                            var cellContainer = $grid.igGrid("cellById", rowId, columnKey);
                            var control = ntsControls.getControl(controlType);
                            if (uk.util.isNullOrUndefined(control))
                                return;
                            control.enable($(cellContainer));
                            $(cellContainer).removeClass(color.Disable);
                            color.popDisable($grid, { id: rowId, columnKey: columnKey });
                        }
                        /**
                         * Check all
                         */
                        function checkAll($grid, key) {
                            var ds = $grid.igGrid("option", "dataSource");
                            var primaryKey = $grid.igGrid("option", "primaryKey");
                            if (utils.getControlType($grid, key) !== ntsControls.CHECKBOX)
                                return;
                            for (var i = 0; i < ds.length; i++) {
                                var id = ds[i][primaryKey];
                                updating.updateCell($grid, id, key, true, undefined, true);
                            }
                        }
                        /**
                         * Uncheck all
                         */
                        function uncheckAll($grid, key) {
                            var ds = $grid.igGrid("option", "dataSource");
                            var primaryKey = $grid.igGrid("option", "primaryKey");
                            if (utils.getControlType($grid, key) !== ntsControls.CHECKBOX)
                                return;
                            for (var i = 0; i < ds.length; i++) {
                                var id = ds[i][primaryKey];
                                updating.updateCell($grid, id, key, false, undefined, true);
                            }
                        }
                        /**
                         * Destroy
                         */
                        function destroy($grid) {
                            var $container = $grid.closest(".nts-grid-container");
                            if ($container.length === 0) {
                                $grid.igGrid("destroy");
                                return;
                            }
                            $container.find(".nts-grid-sheet-buttons").remove();
                            $($grid.igGrid("container")).unwrap().unwrap();
                            $grid.igGrid("destroy");
                        }
                    })(functions || (functions = {}));
                    var ntsControls;
                    (function (ntsControls) {
                        ntsControls.LABEL = 'Label';
                        ntsControls.LINK_LABEL = 'LinkLabel';
                        ntsControls.CHECKBOX = 'CheckBox';
                        ntsControls.SWITCH_BUTTONS = 'SwitchButtons';
                        ntsControls.COMBOBOX = 'ComboBox';
                        ntsControls.BUTTON = 'Button';
                        ntsControls.DELETE_BUTTON = 'DeleteButton';
                        ntsControls.TEXTBOX = 'TextBox';
                        ntsControls.TEXT_EDITOR = 'TextEditor';
                        ntsControls.FLEX_IMAGE = 'FlexImage';
                        ntsControls.IMAGE = 'Image';
                        ntsControls.HEIGHT_CONTROL = "27px";
                        ntsControls.COMBO_CLASS = "nts-combo-container";
                        /**
                         * Get control
                         */
                        function getControl(name) {
                            switch (name) {
                                case ntsControls.CHECKBOX:
                                    return new CheckBox();
                                case ntsControls.SWITCH_BUTTONS:
                                    return new SwitchButtons();
                                case ntsControls.COMBOBOX:
                                    return new ComboBox();
                                case ntsControls.BUTTON:
                                    return new Button();
                                case ntsControls.DELETE_BUTTON:
                                    return new DeleteButton();
                                case ntsControls.TEXT_EDITOR:
                                    return new TextEditor();
                                case ntsControls.LINK_LABEL:
                                    return new LinkLabel();
                                case ntsControls.FLEX_IMAGE:
                                    return new FlexImage();
                                case ntsControls.IMAGE:
                                    return new Image();
                            }
                        }
                        ntsControls.getControl = getControl;
                        /**
                         * Draw label
                         */
                        function drawLabel($grid, column, cellFormatter) {
                            column.formatter = function (value, rowObj) {
                                if (uk.util.isNullOrUndefined(rowObj))
                                    return value;
                                var $self = this;
                                var rowId = rowObj[$grid.igGrid("option", "primaryKey")];
                                var controlCls = "nts-grid-control-" + column.key + "-" + rowId;
                                var $container = $("<div/>").append($("<div/>").addClass(controlCls).css("height", ntsControls.HEIGHT_CONTROL));
                                setTimeout(function () {
                                    var rId = rowObj[$grid.igGrid("option", "primaryKey")];
                                    var $gridCell = $grid.igGrid("cellById", rId, column.key);
                                    if ($gridCell && $($gridCell.children()[0]).children().length === 0) {
                                        var action = void 0;
                                        if (column.click && _.isFunction(column.click)) {
                                            action = function () { return column.click(rowId, column.key); };
                                        }
                                        $("." + controlCls).append(new Label(action).draw({ text: value }));
                                        var cellElement = {
                                            id: rId,
                                            columnKey: column.key,
                                            element: $gridCell[0]
                                        };
                                        cellFormatter.style($grid, cellElement);
                                        cellFormatter.setTextColor($grid, cellElement);
                                    }
                                }, 0);
                                return $container.html();
                            };
                        }
                        ntsControls.drawLabel = drawLabel;
                        /**
                         * Create header checkbox.
                         */
                        function createHeaderCheckbox(data, key) {
                            var defaultOptions = {
                                update: $.noop,
                                initValue: false,
                                enable: true
                            };
                            var options = $.extend({}, defaultOptions, data);
                            return new CheckBox().draw(options).addClass("nts-grid-header-control-" + key).prop("outerHTML");
                        }
                        ntsControls.createHeaderCheckbox = createHeaderCheckbox;
                        /**
                         * Bind cb header columns.
                         */
                        function bindCbHeaderColumns(options, columns, selectionColumns) {
                            options.headerCellRendered = function (evt, ui) {
                                var $grid = $(ui.owner.element);
                                var column = _.remove(columns, function (c) { return c === ui.columnKey; });
                                if (!column || column.length === 0)
                                    return;
                                var columnConf = selectionColumns[column[0]];
                                if (columnConf) {
                                    selectionColumns[column[0]].th = ui.th;
                                }
                                $(ui.th).find(".nts-grid-header-control-" + column[0]).find("input[type='checkbox']")
                                    .on("change", function () {
                                    var $cb = $(this);
                                    var selected = $cb.is(":checked");
                                    _.forEach(options.dataSource, function (r) {
                                        if (!r)
                                            return;
                                        updating.updateCell($grid, r[options.primaryKey], ui.columnKey, selected, undefined, true);
                                    });
                                    var cbSelectCols = $grid.data(internal.CB_SELECTED);
                                    var cbSelectConf = cbSelectCols[column[0]];
                                    if (!cbSelectConf)
                                        return;
                                    cbSelectConf.selectAll = selected;
                                    if (selected) {
                                        cbSelectConf.quantity = options.dataSource.length;
                                        return;
                                    }
                                    cbSelectConf.quantity = 0;
                                });
                            };
                        }
                        ntsControls.bindCbHeaderColumns = bindCbHeaderColumns;
                        var NtsControlBase = (function () {
                            function NtsControlBase() {
                                this.readOnly = false;
                            }
                            return NtsControlBase;
                        }());
                        var CheckBox = (function (_super) {
                            __extends(CheckBox, _super);
                            function CheckBox() {
                                _super.apply(this, arguments);
                            }
                            CheckBox.prototype.containerClass = function () {
                                return "nts-checkbox-container";
                            };
                            CheckBox.prototype.draw = function (data) {
                                var checkBoxText;
                                var setChecked = data.update;
                                var initValue = data.initValue;
                                var $wrapper = $("<div/>").addClass(this.containerClass()).data("enable", data.enable);
                                $wrapper.addClass("ntsControl").on("click", function (e) {
                                    if ($wrapper.data("readonly") === true)
                                        e.preventDefault();
                                });
                                var text = data.controlDef.options[data.controlDef.optionsText];
                                if (text) {
                                    checkBoxText = text;
                                }
                                else {
                                    checkBoxText = $wrapper.text();
                                    $wrapper.text('');
                                }
                                var $checkBoxLabel = $("<label class='ntsCheckBox'></label>");
                                var $checkBox = $('<input type="checkbox">').on("change", function () {
                                    setChecked($(this).is(":checked"));
                                }).appendTo($checkBoxLabel);
                                var $box = $("<span class='box'></span>").appendTo($checkBoxLabel);
                                if (checkBoxText && checkBoxText.length > 0)
                                    var label = $("<span class='label'></span>").html(checkBoxText).appendTo($checkBoxLabel);
                                $checkBoxLabel.appendTo($wrapper);
                                var checked = initValue !== undefined ? initValue : true;
                                $wrapper.data("readonly", this.readOnly);
                                var $checkBox = $wrapper.find("input[type='checkbox']");
                                if (checked === true)
                                    $checkBox.attr("checked", "checked");
                                else
                                    $checkBox.removeAttr("checked");
                                if (data.enable === true)
                                    $checkBox.removeAttr("disabled");
                                else
                                    $checkBox.attr("disabled", "disabled");
                                return $wrapper;
                            };
                            CheckBox.prototype.disable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", false);
                                $wrapper.find("input[type='checkbox']").attr("disabled", "disabled");
                            };
                            CheckBox.prototype.enable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", true);
                                $wrapper.find("input[type='checkbox']").removeAttr("disabled");
                            };
                            return CheckBox;
                        }(NtsControlBase));
                        var SwitchButtons = (function (_super) {
                            __extends(SwitchButtons, _super);
                            function SwitchButtons() {
                                _super.apply(this, arguments);
                            }
                            SwitchButtons.prototype.containerClass = function () {
                                return "nts-switch-container";
                            };
                            SwitchButtons.prototype.draw = function (data) {
                                var selectedCssClass = 'selected';
                                var options = data.controlDef.options;
                                var optionsValue = data.controlDef.optionsValue;
                                var optionsText = data.controlDef.optionsText;
                                var selectedValue = data.initValue;
                                var container = $("<div/>").addClass(this.containerClass()).data("enable", data.enable);
                                container.on(events.Handler.KEY_UP, function (evt) {
                                    var $buttons = container.find("button");
                                    var index;
                                    $buttons.each(function (i, elm) {
                                        if (elm === document.activeElement) {
                                            index = i;
                                            return false;
                                        }
                                    });
                                    if (!uk.util.isNullOrUndefined(index)) {
                                        var arrowNav = false;
                                        if (utils.isArrowLeft(evt)) {
                                            index = index === 0 ? ($buttons.length - 1) : --index;
                                            arrowNav = true;
                                        }
                                        if (utils.isArrowRight(evt)) {
                                            index = index === $buttons.length - 1 ? 0 : ++index;
                                            arrowNav = true;
                                        }
                                        var $targetButton = $buttons.eq(index);
                                        $targetButton.focus();
                                        if (arrowNav) {
                                            var selectedValue = $targetButton.data('swbtn');
                                            $('button', container).removeClass(selectedCssClass);
                                            $targetButton.addClass(selectedCssClass);
                                            data.update(selectedValue);
                                        }
                                    }
                                });
                                _.forEach(options, function (opt) {
                                    var value = opt[optionsValue];
                                    var text = opt[optionsText];
                                    var btn = $('<button>').text(text).css("height", "26px")
                                        .addClass('nts-switch-button')
                                        .attr('data-swbtn', value)
                                        .attr('tabindex', -1)
                                        .on('click', function () {
                                        var selectedValue = $(this).data('swbtn');
                                        $('button', container).removeClass(selectedCssClass);
                                        $(this).addClass(selectedCssClass);
                                        data.update(selectedValue);
                                    });
                                    if (value === selectedValue) {
                                        btn.addClass(selectedCssClass);
                                    }
                                    container.append(btn);
                                });
                                (data.enable === true) ? $('button', container).prop("disabled", false)
                                    : $('button', container).prop("disabled", true);
                                return container;
                            };
                            SwitchButtons.prototype.enable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", true);
                                $('button', $wrapper).prop("disabled", false);
                            };
                            SwitchButtons.prototype.disable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", false);
                                $('button', $wrapper).prop("disabled", true);
                            };
                            return SwitchButtons;
                        }(NtsControlBase));
                        var ComboBox = (function (_super) {
                            __extends(ComboBox, _super);
                            function ComboBox() {
                                _super.apply(this, arguments);
                            }
                            ComboBox.prototype.containerClass = function () {
                                return "nts-combo-container";
                            };
                            ComboBox.prototype.draw = function (data) {
                                var self = this;
                                // Default values.
                                var distanceColumns = '     ';
                                // Character used fill to the columns.
                                var fillCharacter = ' ';
                                var maxWidthCharacter = 15;
                                var container = $("<div/>").addClass(this.containerClass()).data("enable", data.enable);
                                var columns = data.controlDef.columns;
                                // Set attribute for multi column.
                                var itemTemplate = undefined;
                                var haveColumn = columns && columns.length > 0;
                                if (haveColumn) {
                                    itemTemplate = '<div class="nts-combo-item">';
                                    _.forEach(columns, function (item, i) {
                                        // Set item template.
                                        itemTemplate += '<div class="nts-column nts-combo-column-' + i + '">${' + item.prop + '}</div>';
                                    });
                                    itemTemplate += '</div>';
                                }
                                // Display full code name
                                if (data.controlDef.displayMode === "codeName") {
                                    data.controlDef.options = data.controlDef.options.map(function (option) {
                                        var newOptionText = '';
                                        if (haveColumn) {
                                            _.forEach(columns, function (item, i) {
                                                var prop = option[item.prop];
                                                var length = item.length;
                                                if (i === columns.length - 1) {
                                                    newOptionText += prop;
                                                }
                                                else {
                                                    newOptionText += uk.text.padRight(prop, fillCharacter, length) + distanceColumns;
                                                }
                                            });
                                        }
                                        else {
                                            newOptionText = option[data.controlDef.optionsText];
                                        }
                                        option['nts-combo-label'] = newOptionText;
                                        return option;
                                    });
                                }
                                var comboMode = data.controlDef.editable ? 'editable' : 'dropdown';
                                container.igCombo({
                                    dataSource: data.controlDef.options,
                                    valueKey: data.controlDef.optionsValue,
                                    textKey: data.controlDef.displayMode === 'codeName'
                                        ? 'nts-combo-label' : data.controlDef.optionsText,
                                    mode: comboMode,
                                    disabled: !data.enable,
                                    placeHolder: '',
                                    enableClearButton: false,
                                    initialSelectedItems: [
                                        { value: data.initValue }
                                    ],
                                    itemTemplate: itemTemplate,
                                    selectionChanging: function (evt, ui) {
                                        var __self = self;
                                        var $gridControl = $(evt.target).closest("div[class*=nts-grid-control]");
                                        if (uk.util.isNullOrUndefined($gridControl))
                                            return;
                                        var cls = $gridControl.attr("class");
                                        var classNameParts = cls.split("-");
                                        var rowId = classNameParts.pop();
                                        var columnKey = classNameParts.pop();
                                        var targetCell = __self.$containedGrid.igGrid("cellById", rowId, columnKey);
                                        var $comboContainer = $(targetCell).find("." + __self.containerClass());
                                        // Clear error if any
                                        var comboInput = $($comboContainer.find("input")[1]);
                                        comboInput.ntsError("clear");
                                        nts.uk.ui.errors.removeByElement(comboInput);
                                        comboInput.parent().removeClass("error");
                                    },
                                    selectionChanged: function (evt, ui) {
                                        var _self = self;
                                        if (ui.items.length > 0) {
                                            var selectedValue_1 = ui.items[0].data[data.controlDef.optionsValue];
                                            data.update(selectedValue_1);
                                            setTimeout(function () {
                                                var __self = _self;
                                                var $gridControl = $(evt.target).closest("div[class*=nts-grid-control]");
                                                if (uk.util.isNullOrUndefined($gridControl))
                                                    return;
                                                var cls = $gridControl.attr("class");
                                                var classNameParts = cls.split("-");
                                                var rowId = classNameParts.pop();
                                                var columnKey = classNameParts.pop();
                                                var targetCell = __self.$containedGrid.igGrid("cellById", rowId, columnKey);
                                                var $comboContainer = $(targetCell).find("." + __self.containerClass());
                                                // Save selected item
                                                $comboContainer.data(internal.COMBO_SELECTED, selectedValue_1);
                                                if (data.bounce) {
                                                    updating.updateCell(__self.$containedGrid, rowId, data.bounce, selectedValue_1);
                                                }
                                            }, 0);
                                        }
                                    },
                                    rendered: function () {
                                        container.igCombo("option", "tabIndex", -1);
                                    }
                                });
                                // Save init value
                                container.data(internal.COMBO_SELECTED, data.initValue);
                                // Set width for multi columns.
                                if (haveColumn) {
                                    var totalWidth = 0;
                                    var $dropDownOptions = $(container.igCombo("dropDown"));
                                    _.forEach(columns, function (item, i) {
                                        var charLength = item.length;
                                        var width = charLength * maxWidthCharacter + 10;
                                        $dropDownOptions.find('.nts-combo-column-' + i).width(width);
                                        if (i !== columns.length - 1) {
                                            $dropDownOptions.find('.nts-combo-column-' + i).css({ 'float': 'left' });
                                        }
                                        totalWidth += width + 10;
                                    });
                                    $dropDownOptions.find('.nts-combo-item').css({ 'min-width': totalWidth });
                                    container.css({ 'min-width': totalWidth });
                                }
                                container.data("columns", columns);
                                container.data("comboMode", comboMode);
                                return container;
                            };
                            ComboBox.prototype.enable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass());
                                $wrapper.data("enable", true);
                                $wrapper.igCombo("option", "disabled", false);
                            };
                            ComboBox.prototype.disable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass());
                                $wrapper.data("enable", false);
                                $wrapper.igCombo("option", "disabled", true);
                            };
                            return ComboBox;
                        }(NtsControlBase));
                        var Button = (function (_super) {
                            __extends(Button, _super);
                            function Button() {
                                _super.apply(this, arguments);
                            }
                            Button.prototype.containerClass = function () {
                                return "nts-button-container";
                            };
                            Button.prototype.draw = function (data) {
                                var $container = $("<div/>").addClass(this.containerClass());
                                var $button = $("<button/>").addClass("ntsButton").css("height", "25px").appendTo($container)
                                    .text(data.controlDef.text || data.initValue).attr("tabindex", -1)
                                    .data("enable", data.enable).on("click", $.proxy(data.controlDef.click, null, data.rowObj));
                                $button.prop("disabled", !data.enable);
                                return $container;
                            };
                            Button.prototype.enable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", true);
                                $wrapper.find(".ntsButton").prop("disabled", false);
                            };
                            Button.prototype.disable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", false);
                                $wrapper.find(".ntsButton").prop("disabled", true);
                            };
                            return Button;
                        }(NtsControlBase));
                        var DeleteButton = (function (_super) {
                            __extends(DeleteButton, _super);
                            function DeleteButton() {
                                _super.apply(this, arguments);
                            }
                            DeleteButton.prototype.draw = function (data) {
                                var btnContainer = _super.prototype.draw.call(this, data);
                                var btn = btnContainer.find("button");
                                btn.off("click", data.controlDef.click);
                                btn.on("click", data.deleteRow);
                                return btn;
                            };
                            return DeleteButton;
                        }(Button));
                        var TextEditor = (function (_super) {
                            __extends(TextEditor, _super);
                            function TextEditor() {
                                _super.apply(this, arguments);
                            }
                            TextEditor.prototype.containerClass = function () {
                                return "nts-editor-container";
                            };
                            TextEditor.prototype.draw = function (data) {
                                var self = this;
                                var constraint = data.controlDef.constraint;
                                var $container = $("<div/>").addClass(this.containerClass());
                                var $input = $("<input/>").addClass("nts-editor nts-input").css({ padding: "2px", width: "96%" })
                                    .attr("tabindex", -1).val(data.initValue);
                                if (constraint.valueType === "Time")
                                    $input.css("text-align", "right");
                                var $editor = $("<span/>").addClass("nts-editor-wrapper ntsControl").css("width", "100%").append($input).appendTo($container);
                                var cell;
                                self.validate(data.controlDef, data.initValue).success(function (t) {
                                    $input.val(t);
                                    $input.data(internal.TXT_RAW, data.initValue);
                                }).terminate();
                                var valueToDs = function (valueType, before, after) {
                                    switch (valueType) {
                                        case "Integer":
                                        case "HalfInt":
                                        case "String":
                                            return before;
                                        case "Time":
                                            return after;
                                    }
                                };
                                $input.on(events.Handler.KEY_DOWN, function (evt) {
                                    // TODO: Add check if error not occurred on this cell,
                                    // depends on which border to set red.
                                    if (utils.isEnterKey(evt)) {
                                        var value_2 = $input.val();
                                        self.validate(data.controlDef, value_2).success(function (t) {
                                            cell = self.cellBelongTo($input);
                                            errors.clear(self.$containedGrid, cell);
                                            var val = valueToDs(constraint.valueType, value_2, t);
                                            $input.data(internal.TXT_RAW, val);
                                            data.update(val);
                                        }).fail(function (errId) {
                                            cell = self.cellBelongTo($input);
                                            errors.set(self.$containedGrid, cell, uk.resource.getMessage(errId));
                                        }).terminate;
                                    }
                                });
                                $input.on(events.Handler.KEY_UP, function (evt) {
                                    self.validate(data.controlDef, $input.val()).success(function (t) {
                                        cell = self.cellBelongTo($input);
                                        errors.clear(self.$containedGrid, cell);
                                    }).fail(function (errId) {
                                        cell = self.cellBelongTo($input);
                                        errors.set(self.$containedGrid, cell, nts.uk.resource.getMessage(errId));
                                    }).terminate();
                                });
                                $input.on(events.Handler.BLUR, function (evt) {
                                    self.validate(data.controlDef, $input.val()).success(function (t) {
                                        var value = $input.val();
                                        cell = self.cellBelongTo($input);
                                        errors.clear(self.$containedGrid, cell);
                                        var val = valueToDs(constraint.valueType, value, t);
                                        data.update(val);
                                        $input.data(internal.TXT_RAW, val);
                                        $input.val(t);
                                    }).fail(function (errId) {
                                        cell = self.cellBelongTo($input);
                                        errors.set(self.$containedGrid, cell, nts.uk.resource.getMessage(errId));
                                    }).terminate();
                                });
                                $input.on(events.Handler.CLICK, function (evt) {
                                    var rawValue = $input.data(internal.TXT_RAW);
                                    if (!errors.any({ element: $input.closest("td")[0] })
                                        && !uk.util.isNullOrUndefined(rawValue))
                                        $input.val(rawValue);
                                });
                                return $container;
                            };
                            TextEditor.prototype.cellBelongTo = function ($input) {
                                var self = this;
                                var cell = {};
                                cell.element = $input.closest("td")[0];
                                var $gridControl = $input.closest("div[class*='nts-grid-control']");
                                if ($gridControl.length === 0)
                                    return;
                                var clazz = $gridControl.attr("class").split(" ")[0];
                                var pos = clazz.split("-");
                                cell.id = utils.parseIntIfNumber(pos.pop(), self.$containedGrid, utils.getColumnsMap(self.$containedGrid));
                                cell.columnKey = pos.pop();
                                return cell;
                            };
                            TextEditor.prototype.validate = function (controlDef, value) {
                                var constraint = controlDef.constraint;
                                if (constraint.required && (_.isEmpty(value) || _.isNull(value)))
                                    return validation.Result.invalid("FND_E_REQ_INPUT");
                                switch (constraint.valueType) {
                                    case "Integer":
                                        var valid = uk.ntsNumber.isNumber(value, false);
                                        if (!valid)
                                            return validation.Result.invalid("FND_E_INTEGER");
                                        var formatted = value;
                                        if (constraint.format === "Number_Separated") {
                                            formatted = uk.ntsNumber.formatNumber(value, { formatId: constraint.format });
                                        }
                                        return validation.Result.OK(formatted);
                                    case "Time":
                                        return validation.parseTime(value, constraint.format);
                                    case "HalfInt":
                                        if (uk.ntsNumber.isHalfInt(value)) {
                                            return new validation.Result.OK(value);
                                        }
                                        return new validation.Result.invalid("FND_E_HALFINT");
                                    case "String":
                                        return validation.Result.OK(value);
                                }
                            };
                            TextEditor.prototype.enable = function ($container) {
                                var self = this;
                                var $wrapper = $container.find("." + self.containerClass());
                                $wrapper.find("input").prop("disabled", false);
                            };
                            TextEditor.prototype.disable = function ($container) {
                                var self = this;
                                var $wrapper = $container.find("." + self.containerClass());
                                $wrapper.find("input").prop("disabled", true);
                            };
                            return TextEditor;
                        }(NtsControlBase));
                        var Label = (function (_super) {
                            __extends(Label, _super);
                            function Label(action) {
                                this.action = action;
                            }
                            Label.prototype.containerClass = function () {
                                return "nts-label-container";
                            };
                            Label.prototype.draw = function (data) {
                                var self = this;
                                var $container = $("<div/>").addClass(this.containerClass());
                                var $label = $("<label/>").addClass("ntsLabel").css({ padding: "3px 0px", display: "inline-block", width: "100%" }).text(data.text).appendTo($container);
                                if (self.action && _.isFunction(self.action)) {
                                    $container.on(events.Handler.CLICK, function (evt) {
                                        self.action();
                                    });
                                    $label.css({ cursor: "pointer" });
                                }
                                return $container;
                            };
                            Label.prototype.enable = function ($container) {
                                return;
                            };
                            Label.prototype.disable = function ($container) {
                                return;
                            };
                            return Label;
                        }(NtsControlBase));
                        var LinkLabel = (function (_super) {
                            __extends(LinkLabel, _super);
                            function LinkLabel() {
                                _super.apply(this, arguments);
                            }
                            LinkLabel.prototype.containerClass = function () {
                                return "nts-link-container";
                            };
                            LinkLabel.prototype.draw = function (data) {
                                return $('<div/>').addClass(this.containerClass()).append($("<a/>")
                                    .addClass("link-button").css({ backgroundColor: "inherit", color: "deepskyblue" })
                                    .text(data.initValue).on("click", $.proxy(data.controlDef.click, null, data.rowId, data.columnKey)))
                                    .data("click", data.controlDef.click);
                            };
                            LinkLabel.prototype.enable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", true);
                                $wrapper.find("a").css("color", "deepskyblue").on("click", $wrapper.data("click"));
                            };
                            LinkLabel.prototype.disable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", false);
                                $wrapper.find("a").css("color", "#AAA").off("click");
                            };
                            return LinkLabel;
                        }(NtsControlBase));
                        var FlexImage = (function (_super) {
                            __extends(FlexImage, _super);
                            function FlexImage() {
                                _super.apply(this, arguments);
                            }
                            FlexImage.prototype.containerClass = function () {
                                return "nts-fleximage-container";
                            };
                            FlexImage.prototype.draw = function (data) {
                                var $container = $("<div/>").addClass(this.containerClass());
                                if (uk.util.isNullOrUndefined(data.initValue) || _.isEmpty(data.initValue))
                                    return $container;
                                var $image = $("<span/>").addClass(data.controlDef.source);
                                if (data.controlDef.click && _.isFunction(data.controlDef.click)) {
                                    $container.on(events.Handler.CLICK, $.proxy(data.controlDef.click, null, data.columnKey, data.rowId))
                                        .css({ cursor: "pointer" }).data(events.Handler.CLICK, data.controlDef.click);
                                }
                                return $container.append($image);
                            };
                            FlexImage.prototype.enable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", true);
                                $wrapper.on(events.Handler.CLICK, $wrapper.data(events.Handler.CLICK));
                            };
                            FlexImage.prototype.disable = function ($container) {
                                var $wrapper = $container.find("." + this.containerClass()).data("enable", false);
                                $wrapper.off(events.Handler.CLICK);
                            };
                            return FlexImage;
                        }(NtsControlBase));
                        var Image = (function (_super) {
                            __extends(Image, _super);
                            function Image() {
                                _super.apply(this, arguments);
                            }
                            Image.prototype.containerClass = function () {
                                return "nts-image-container";
                            };
                            Image.prototype.draw = function (data) {
                                return $("<div/>").addClass(this.containerClass()).append($("<span/>").addClass(data.controlDef.source));
                            };
                            Image.prototype.enable = function ($container) {
                            };
                            Image.prototype.disable = function ($container) {
                            };
                            return Image;
                        }(NtsControlBase));
                        var comboBox;
                        (function (comboBox) {
                            function getCopiedValue(cell, copiedText) {
                                var copiedValue;
                                var $comboBox = utils.comboBoxOfCell(cell);
                                if ($comboBox.length > 0) {
                                    var items = $comboBox.igCombo("items");
                                    var textKey_1 = $comboBox.igCombo("option", "textKey");
                                    var valueKey_1 = $comboBox.igCombo("option", "valueKey");
                                    _.forEach(items, function (item) {
                                        if (item.data[textKey_1] === copiedText.trim()) {
                                            copiedValue = item.data[valueKey_1];
                                            return false;
                                        }
                                    });
                                }
                                return copiedValue;
                            }
                            comboBox.getCopiedValue = getCopiedValue;
                        })(comboBox = ntsControls.comboBox || (ntsControls.comboBox = {}));
                    })(ntsControls || (ntsControls = {}));
                    var specialColumn;
                    (function (specialColumn_1) {
                        specialColumn_1.CODE = "code";
                        specialColumn_1.COMBO_CODE = "comboCode";
                        function ifTrue(columnSpecialTypes, column, bounceCombos, flatCols) {
                            if (uk.util.isNullOrUndefined(column.ntsType))
                                return;
                            if (column.ntsType === specialColumn_1.CODE) {
                                columnSpecialTypes[column.key] = { type: column.ntsType,
                                    onChange: column.onChange };
                            }
                            else if (column.ntsType === specialColumn_1.COMBO_CODE) {
                                columnSpecialTypes[column.key] = { type: column.ntsType,
                                    onChange: identity };
                                var index = _.findIndex(flatCols, function (o) {
                                    return o.key === column.key;
                                });
                                var b = void 0;
                                if (index + 1 < flatCols.length && (b = flatCols[index + 1]) !== undefined) {
                                    bounceCombos[b.key] = column.key;
                                }
                            }
                        }
                        specialColumn_1.ifTrue = ifTrue;
                        /**
                         * Try column
                         */
                        function tryDo($grid, cell, pastedText, visibleColumnsMap) {
                            var columnTypes = $grid.data(internal.SPECIAL_COL_TYPES);
                            var specialColumn;
                            var columnKey = cell.columnKey;
                            for (var key in columnTypes) {
                                if (key === columnKey) {
                                    specialColumn = columnTypes[key];
                                    break;
                                }
                            }
                            if (uk.util.isNullOrUndefined(specialColumn))
                                return;
                            visibleColumnsMap = !uk.util.isNullOrUndefined(visibleColumnsMap) ? visibleColumnsMap : utils.getVisibleColumnsMap($grid);
                            var isFixedColumn = utils.isFixedColumn(columnKey, visibleColumnsMap);
                            var nextColumn = utils.nextColumnByKey(visibleColumnsMap, columnKey, isFixedColumn);
                            if (uk.util.isNullOrUndefined(nextColumn) || nextColumn.index === 0)
                                return;
                            specialColumn.onChange(columnKey, cell.id, pastedText).done(function (res) {
                                var updatedRow = {};
                                var $gridRow = utils.rowAt(cell);
                                if (specialColumn.type === specialColumn_1.COMBO_CODE) {
                                    var $nextCell = $grid.igGrid("cellById", $gridRow.data("id"), nextColumn.options.key);
                                    var $comboContainer = $nextCell.find("." + ntsControls.COMBO_CLASS);
                                    var ds = $comboContainer.igCombo("option", "dataSource");
                                    var vKey_1 = $comboContainer.igCombo("option", "valueKey");
                                    if (uk.util.isNullOrUndefined(ds))
                                        return;
                                    var valueExists_1;
                                    _.forEach(ds._data, function (item) {
                                        if (item[vKey_1].toString() === String(res.toString().trim())) {
                                            valueExists_1 = true;
                                            return false;
                                        }
                                    });
                                    if (!valueExists_1)
                                        return;
                                }
                                if (nextColumn.options.dataType === "number") {
                                    updatedRow[nextColumn.options.key] = parseInt(res.toString().trim());
                                }
                                else {
                                    updatedRow[nextColumn.options.key] = String(res.toString().trim());
                                }
                                updating.updateRow($grid, $gridRow.data("id"), updatedRow, undefined, true);
                            }).fail(function (res) {
                            });
                            return true;
                        }
                        specialColumn_1.tryDo = tryDo;
                        function identity(key, id, value) {
                            var dfd = $.Deferred();
                            dfd.resolve(value);
                            return dfd.promise();
                        }
                    })(specialColumn || (specialColumn = {}));
                    var copyPaste;
                    (function (copyPaste) {
                        var CopyMode;
                        (function (CopyMode) {
                            CopyMode[CopyMode["SINGLE"] = 0] = "SINGLE";
                            CopyMode[CopyMode["MULTIPLE"] = 1] = "MULTIPLE";
                        })(CopyMode || (CopyMode = {}));
                        var PasteMode;
                        (function (PasteMode) {
                            PasteMode[PasteMode["NEW"] = 0] = "NEW";
                            PasteMode[PasteMode["UPDATE"] = 1] = "UPDATE";
                        })(PasteMode || (PasteMode = {}));
                        var Processor = (function () {
                            function Processor(options) {
                                this.pasteInMode = PasteMode.UPDATE;
                                this.options = options;
                            }
                            Processor.addFeatures = function (options) {
                                selection.addFeature(options);
                                return new Processor(options);
                            };
                            /**
                             * $grid to handle copy paste
                             * $target to bind events to
                             */
                            Processor.prototype.chainEvents = function ($grid, $target) {
                                var self = this;
                                self.$grid = $grid;
                                var target = !uk.util.isNullOrUndefined($target) ? $target : $grid;
                                events.Handler.pull(target).focusInWith(self).ctrlCxpWith(self);
                            };
                            /**
                             * Copy
                             */
                            Processor.prototype.copyHandler = function (cut) {
                                var selectedCells = selection.getSelectedCells(this.$grid);
                                var copiedData;
                                var checker = cut ? utils.isCuttableControls : utils.isCopiableControls;
                                if (selectedCells.length === 1) {
                                    this.copyMode = CopyMode.SINGLE;
                                    if (!checker(this.$grid, selectedCells[0].columnKey))
                                        return;
                                    if (utils.isComboBox(this.$grid, selectedCells[0].columnKey)) {
                                        var $comboBox = utils.comboBoxOfCell(selectedCells[0]);
                                        if ($comboBox.length > 0) {
                                            copiedData = $comboBox.igCombo("text");
                                        }
                                    }
                                    else {
                                        copiedData = selectedCells[0].element.text();
                                    }
                                }
                                else {
                                    this.copyMode = CopyMode.MULTIPLE;
                                    copiedData = this.converseStructure(selectedCells, cut);
                                }
                                $("#copyHelper").val(copiedData).select();
                                document.execCommand("copy");
                                return selectedCells;
                            };
                            /**
                             * Converse structure
                             */
                            Processor.prototype.converseStructure = function (cells, cut) {
                                var self = this;
                                var maxRow = 0;
                                var minRow = 0;
                                var maxColumn = 0;
                                var minColumn = 0;
                                var structure = [];
                                var structData = "";
                                var checker = cut ? utils.isCuttableControls : utils.isCopiableControls;
                                _.forEach(cells, function (cell, index) {
                                    var rowIndex = cell.rowIndex;
                                    var columnIndex = utils.getDisplayColumnIndex(self.$grid, cell);
                                    if (index === 0) {
                                        minRow = maxRow = rowIndex;
                                        minColumn = maxColumn = columnIndex;
                                    }
                                    if (rowIndex < minRow)
                                        minRow = rowIndex;
                                    if (rowIndex > maxRow)
                                        maxRow = rowIndex;
                                    if (columnIndex < minColumn)
                                        minColumn = columnIndex;
                                    if (columnIndex > maxColumn)
                                        maxColumn = columnIndex;
                                    if (uk.util.isNullOrUndefined(structure[rowIndex])) {
                                        structure[rowIndex] = {};
                                    }
                                    if (!checker(self.$grid, cell.columnKey))
                                        return;
                                    if (utils.isComboBox(self.$grid, cell.columnKey)) {
                                        var $comboBox = utils.comboBoxOfCell(cell);
                                        if ($comboBox.length > 0) {
                                            structure[rowIndex][columnIndex] = $comboBox.igCombo("text");
                                        }
                                    }
                                    else {
                                        structure[rowIndex][columnIndex] = cell.element.text();
                                    }
                                });
                                for (var i = minRow; i <= maxRow; i++) {
                                    for (var j = minColumn; j <= maxColumn; j++) {
                                        if (uk.util.isNullOrUndefined(structure[i]) || uk.util.isNullOrUndefined(structure[i][j])) {
                                            structData += "null";
                                        }
                                        else {
                                            structData += structure[i][j];
                                        }
                                        if (j === maxColumn)
                                            structData += "\n";
                                        else
                                            structData += "\t";
                                    }
                                }
                                return structData;
                            };
                            /**
                             * Cut
                             */
                            Processor.prototype.cutHandler = function () {
                                var self = this;
                                var selectedCells = this.copyHandler(true);
                                var cellsGroup = _.groupBy(selectedCells, "rowIndex");
                                _.forEach(Object.keys(cellsGroup), function (rowIdx) {
                                    var $row = utils.rowAt(cellsGroup[rowIdx][0]);
                                    var updatedRowData = {};
                                    _.forEach(cellsGroup[rowIdx], function (cell) {
                                        if (!utils.isCuttableControls(self.$grid, cell.columnKey))
                                            return;
                                        updatedRowData[cell.columnKey] = "";
                                    });
                                    updating.updateRow(self.$grid, $row.data("id"), updatedRowData);
                                });
                            };
                            /**
                             * Paste
                             */
                            Processor.prototype.pasteHandler = function (evt) {
                                if (this.copyMode === CopyMode.SINGLE) {
                                    this.pasteSingleCellHandler(evt);
                                }
                                else {
                                    this.pasteRangeHandler(evt);
                                }
                            };
                            /**
                             * Paste single cell
                             */
                            Processor.prototype.pasteSingleCellHandler = function (evt) {
                                var self = this;
                                var cbData = this.getClipboardContent(evt);
                                var selectedCells = selection.getSelectedCells(this.$grid);
                                var visibleColumnsMap = utils.getVisibleColumnsMap(self.$grid);
                                _.forEach(selectedCells, function (cell, index) {
                                    if (!utils.isPastableControls(self.$grid, cell.columnKey)
                                        || utils.isDisabled($(cell.element)))
                                        return;
                                    var rowIndex = cell.rowIndex;
                                    var columnIndex = cell.index;
                                    var $gridRow = utils.rowAt(cell);
                                    var updatedRow = {};
                                    var columnsGroup = utils.columnsGroupOfCell(cell, visibleColumnsMap);
                                    var columnKey = columnsGroup[columnIndex].key;
                                    // When pasted cell is combox
                                    if (utils.isComboBox(self.$grid, cell.columnKey)) {
                                        var copiedValue = ntsControls.comboBox.getCopiedValue(cell, cbData);
                                        if (!uk.util.isNullOrUndefined(copiedValue)) {
                                            updatedRow[columnKey] = columnsGroup[columnIndex].dataType === "number"
                                                ? parseInt(copiedValue) : copiedValue;
                                        }
                                        else {
                                            // TODO: Handle if texts in item list not map pasted text.
                                            var $combo = cell.element.find(".nts-combo-container");
                                            var $comboInput = $($combo.find("input")[1]);
                                            $comboInput.ntsError("set", "Pasted text not valid");
                                            $combo.igCombo("text", "");
                                            return;
                                        }
                                    }
                                    else {
                                        specialColumn.tryDo(self.$grid, cell, cbData, visibleColumnsMap);
                                        if (columnsGroup[columnIndex].dataType === "number") {
                                            updatedRow[columnKey] = parseInt(cbData);
                                        }
                                        else {
                                            updatedRow[columnKey] = cbData;
                                        }
                                    }
                                    updating.updateRow(self.$grid, $gridRow.data("id"), updatedRow);
                                });
                            };
                            /**
                             * Paste range
                             */
                            Processor.prototype.pasteRangeHandler = function (evt) {
                                var cbData = this.getClipboardContent(evt);
                                if (utils.isEditMode(this.$grid)) {
                                    cbData = this.processInEditMode(cbData);
                                    this.updateInEditMode(cbData);
                                }
                                else {
                                    cbData = this.process(cbData);
                                    this.pasteInMode === PasteMode.UPDATE ? this.updateWith(cbData) : this.addNew(cbData);
                                }
                            };
                            /**
                             * Get clipboard content
                             */
                            Processor.prototype.getClipboardContent = function (evt) {
                                if (window.clipboardData) {
                                    window.event.returnValue = false;
                                    return window.clipboardData.getData("text");
                                }
                                else {
                                    return evt.originalEvent.clipboardData.getData("text/plain");
                                }
                            };
                            /**
                             * Process in edit mode
                             */
                            Processor.prototype.processInEditMode = function (data) {
                                if (uk.util.isNullOrUndefined(data))
                                    return;
                                return data.split("\n")[0];
                            };
                            /**
                             * Update in edit mode
                             */
                            Processor.prototype.updateInEditMode = function (data) {
                                var selectedCell = selection.getSelectedCell(this.$grid);
                                var rowIndex = selectedCell.rowIndex;
                                var columnIndex = selectedCell.index;
                                var visibleColumnsMap = utils.getVisibleColumnsMap(this.$grid);
                                var updateRow = {};
                                var columnsGroup = utils.columnsGroupOfCell(selectedCell, visibleColumnsMap);
                                var columnKey = columnsGroup[columnIndex].key;
                                updateRow[columnKey] = data;
                                var $gridRow = utils.rowAt(selectedCell);
                                updating.updateRow(this.$grid, $gridRow.data("id"), updateRow);
                            };
                            /**
                             * Process
                             */
                            Processor.prototype.process = function (data) {
                                var dataRows = _.map(data.split("\n"), function (row) {
                                    return row.split("\t");
                                });
                                var rowsCount = dataRows.length;
                                if ((dataRows[rowsCount - 1].length === 1 && dataRows[rowsCount - 1][0] === "")
                                    || dataRows.length === 1 && dataRows[0].length === 1
                                        && (dataRows[0][0] === "" || dataRows[0][0] === "\r")) {
                                    dataRows.pop();
                                }
                                return dataRows;
                            };
                            /**
                             * Update
                             */
                            Processor.prototype.updateWith = function (data) {
                                var self = this;
                                if (!utils.selectable(this.$grid) || !utils.updatable(this.$grid))
                                    return;
                                var selectedCell = selection.getSelectedCell(this.$grid);
                                if (selectedCell === undefined)
                                    return;
                                selectedCell.element.focus();
                                var visibleColumnsMap = utils.getVisibleColumnsMap(self.$grid);
                                var visibleColumns = utils.visibleColumnsFromMap(visibleColumnsMap);
                                var columnIndex = selectedCell.index;
                                var rowIndex = selectedCell.rowIndex;
                                //                    if (!this.pasteable(columnIndex + data[0].length - visibleColumns.length)) return;
                                var targetCol = _.find(visibleColumns, function (column) {
                                    return column.key === selectedCell.columnKey;
                                });
                                if (uk.util.isNullOrUndefined(targetCol))
                                    return;
                                _.forEach(data, function (row, idx) {
                                    var $gridRow;
                                    if (idx === 0)
                                        $gridRow = utils.rowAt(selectedCell);
                                    else
                                        $gridRow = utils.nextNRow(selectedCell, idx);
                                    if (uk.util.isNullOrUndefined($gridRow))
                                        return;
                                    var rowData = {};
                                    var targetIndex = columnIndex;
                                    var targetCell = selectedCell;
                                    var targetColumn = targetCol;
                                    // Errors
                                    var comboErrors = [];
                                    for (var i = 0; i < row.length; i++) {
                                        var nextColumn = void 0;
                                        var columnKey = targetColumn.key;
                                        var cellElement = self.$grid.igGrid("cellById", $gridRow.data("id"), columnKey);
                                        if ((!uk.util.isNullOrUndefined(row[i]) && row[i].trim() === "null")
                                            || !utils.isPastableControls(self.$grid, columnKey)
                                            || utils.isDisabled(cellElement)) {
                                            // Go to next column
                                            nextColumn = utils.nextColumn(visibleColumnsMap, targetIndex, targetColumn.fixed);
                                            targetColumn = nextColumn.options;
                                            targetIndex = nextColumn.index;
                                            continue;
                                        }
                                        var columnsGroup = utils.columnsGroupOfColumn(targetColumn, visibleColumnsMap);
                                        if (targetIndex > columnsGroup.length - 1)
                                            break;
                                        if (utils.isComboBox(self.$grid, columnKey)) {
                                            var cellContent = row[i].trim();
                                            var copiedValue = ntsControls.comboBox.getCopiedValue({ element: cellElement[0] }, cellContent);
                                            if (!uk.util.isNullOrUndefined(copiedValue)) {
                                                rowData[columnKey] = targetColumn.dataType === "number" ? parseInt(copiedValue) : copiedValue;
                                            }
                                            else {
                                                // TODO: Handle if copied text not match any item in combobox list
                                                comboErrors.push({ cell: cellElement, content: cellContent });
                                                // Go to next column
                                                nextColumn = utils.nextColumn(visibleColumnsMap, targetIndex, targetColumn.fixed);
                                                targetColumn = nextColumn.options;
                                                targetIndex = nextColumn.index;
                                                continue;
                                            }
                                        }
                                        else {
                                            var cell = {};
                                            cell.columnKey = columnKey;
                                            cell.element = cellElement;
                                            cell.id = $gridRow.data("id");
                                            cell.index = targetIndex;
                                            cell.row = $gridRow;
                                            cell.rowIndex = $gridRow.data("rowIdx");
                                            specialColumn.tryDo(self.$grid, cell, row[i].trim(), visibleColumnsMap);
                                            if (targetColumn.dataType === "number") {
                                                rowData[columnKey] = parseInt(row[i]);
                                            }
                                            else {
                                                rowData[columnKey] = row[i];
                                            }
                                        }
                                        // Go to next column
                                        nextColumn = utils.nextColumn(visibleColumnsMap, targetIndex, targetColumn.fixed);
                                        targetColumn = nextColumn.options;
                                        targetIndex = nextColumn.index;
                                    }
                                    updating.updateRow(self.$grid, $gridRow.data("id"), rowData);
                                    _.forEach(comboErrors, function (combo) {
                                        setTimeout(function () {
                                            var $container = combo.cell.find(".nts-combo-container");
                                            var $comboInput = $($container.find("input")[1]);
                                            $comboInput.ntsError("set", "Pasted text not valid");
                                            $container.igCombo("text", combo.content);
                                        }, 0);
                                    });
                                });
                            };
                            Processor.prototype.addNew = function (data) {
                                var self = this;
                                //                    var visibleColumns = this.getVisibleColumns();
                                var visibleColumns = null;
                                if (!this.pasteable(data[0].length - visibleColumns.length))
                                    return;
                                _.forEach(data, function (row, idx) {
                                    var rowData = {};
                                    for (var i = 0; i < visibleColumns.length; i++) {
                                        var columnKey = visibleColumns[i].key;
                                        if (visibleColumns[i].dataType === "number") {
                                            rowData[columnKey] = parseInt(row[i]);
                                        }
                                        else {
                                            rowData[columnKey] = row[i];
                                        }
                                    }
                                    self.$grid.igGridUpdating("addRow", rowData);
                                });
                            };
                            Processor.prototype.pasteable = function (excessColumns) {
                                if (excessColumns > 0) {
                                    nts.uk.ui.dialog.alert("Copied table structure doesn't match.");
                                    return false;
                                }
                                return true;
                            };
                            return Processor;
                        }());
                        copyPaste.Processor = Processor;
                        function ifOn($grid, options) {
                            if (options.ntsFeatures === undefined)
                                return;
                            _.forEach(options.ntsFeatures, function (f) {
                                if (f.name === feature.COPY_PASTE) {
                                    Processor.addFeatures(options).chainEvents($grid);
                                    return false;
                                }
                            });
                        }
                        copyPaste.ifOn = ifOn;
                    })(copyPaste || (copyPaste = {}));
                    var events;
                    (function (events) {
                        var Handler = (function () {
                            function Handler($grid, options) {
                                this.$grid = $grid;
                                this.options = options;
                                this.preventEditInError = !uk.util.isNullOrUndefined(options) ? options.preventEditInError : undefined;
                            }
                            Handler.pull = function ($grid, options) {
                                return new Handler($grid, options);
                            };
                            Handler.prototype.turnOn = function ($mainGrid) {
                                if (feature.isEnable(this.options.ntsFeatures, feature.CELL_EDIT)) {
                                    this.filter($mainGrid).onCellUpdate().onCellUpdateKeyUp();
                                }
                                if (!uk.util.isNullOrUndefined(this.options.enter)
                                    && (utils.selectable(this.$grid) || utils.selectable($mainGrid))) {
                                    this.onDirectEnter();
                                }
                                if (utils.selectable(this.$grid) || utils.selectable($mainGrid)) {
                                    this.onSpacePress();
                                }
                                if (feature.isEnable(this.options.features, feature.RESIZING)) {
                                    this.onColumnResizing();
                                }
                            };
                            /**
                             * Handle enter direction.
                             */
                            Handler.prototype.onDirectEnter = function () {
                                // Enter direction
                                var direction = new selection.Direction();
                                if (!direction.to)
                                    direction.to = this.options.enter;
                                this.$grid.on(Handler.KEY_DOWN, $.proxy(direction.bind, direction));
                                this.$grid.data(internal.ENTER_DIRECT, direction);
                                return this;
                            };
                            /**
                             * Handle cell edit.
                             */
                            Handler.prototype.onCellUpdate = function () {
                                var self = this;
                                this.$grid.on(Handler.KEY_DOWN, function (evt) {
                                    if (evt.ctrlKey)
                                        return;
                                    var selectedCell = selection.getSelectedCell(self.$grid);
                                    updating.triggerCellUpdate(evt, selectedCell);
                                });
                                return this;
                            };
                            /**
                             * Handle validation.
                             */
                            Handler.prototype.onCellUpdateKeyUp = function () {
                                var self = this;
                                this.$grid.on(Handler.KEY_UP, function (evt) {
                                    if (evt.ctrlKey)
                                        return;
                                    var selectedCell = selection.getSelectedCell(self.$grid);
                                    updating.onEditCell(evt, selectedCell);
                                });
                                return this;
                            };
                            /**
                             * Handle press space key on combobox.
                             */
                            Handler.prototype.onSpacePress = function () {
                                var self = this;
                                self.$grid.on(Handler.KEY_DOWN, function (evt) {
                                    if (!utils.isSpaceKey(evt))
                                        return;
                                    var selectedCell = selection.getSelectedCell(self.$grid);
                                    if (uk.util.isNullOrUndefined(selectedCell))
                                        return;
                                    var checkbox = $(selectedCell.element).find(".nts-checkbox-container");
                                    if (checkbox.length > 0) {
                                        checkbox.find("input[type='checkbox']").click();
                                    }
                                });
                                return this;
                            };
                            /**
                             * Support copy paste.
                             */
                            Handler.prototype.focusInWith = function (processor) {
                                this.$grid.on(Handler.FOCUS_IN, function (evt) {
                                    if ($("#pasteHelper").length > 0 && $("#copyHelper").length > 0)
                                        return;
                                    var pasteArea = $("<textarea id='pasteHelper'/>").css({ "opacity": 0, "overflow": "hidden" })
                                        .on("paste", $.proxy(processor.pasteHandler, processor));
                                    var copyArea = $("<textarea id='copyHelper'/>").css({ "opacity": 0, "overflow": "hidden" });
                                    $("<div/>").css({ "position": "fixed", "top": -10000, "left": -10000 })
                                        .appendTo($(document.body)).append(pasteArea).append(copyArea);
                                });
                                return this;
                            };
                            /**
                             * Copy, cut, paste events.
                             */
                            Handler.prototype.ctrlCxpWith = function (processor) {
                                this.$grid.on(Handler.KEY_DOWN, function (evt) {
                                    if (evt.ctrlKey && utils.isPasteKey(evt)) {
                                        $("#pasteHelper").focus();
                                    }
                                    else if (evt.ctrlKey && utils.isCopyKey(evt)) {
                                        processor.copyHandler();
                                    }
                                    else if (evt.ctrlKey && utils.isCutKey(evt)) {
                                        processor.cutHandler();
                                    }
                                });
                                return this;
                            };
                            /**
                             * Prevent forwarding events in particular cases.
                             */
                            Handler.prototype.filter = function ($target) {
                                var self = this;
                                var $mainGrid = !uk.util.isNullOrUndefined($target) ? $target : self.$grid;
                                self.$grid.on(Handler.KEY_DOWN, function (evt) {
                                    if (utils.isAlphaNumeric(evt) || utils.isDeleteKey(evt)) {
                                        var cell = selection.getSelectedCell($mainGrid);
                                        if (cell === undefined || updating.containsNtsControl($(evt.target)))
                                            evt.stopImmediatePropagation();
                                        return;
                                    }
                                    if (utils.isTabKey(evt) && utils.isErrorStatus($mainGrid)) {
                                        evt.preventDefault();
                                        evt.stopImmediatePropagation();
                                    }
                                });
                                if (this.preventEditInError) {
                                    self.$grid[0].addEventListener(Handler.MOUSE_DOWN, function (evt) {
                                        if (utils.isNotErrorCell($mainGrid, evt)) {
                                            evt.preventDefault();
                                            evt.stopImmediatePropagation();
                                        }
                                    }, true);
                                    self.$grid[0].addEventListener(Handler.CLICK, function (evt) {
                                        if (utils.isNotErrorCell($mainGrid, evt)) {
                                            evt.preventDefault();
                                            evt.stopImmediatePropagation();
                                        }
                                    }, true);
                                }
                                return this;
                            };
                            Handler.prototype.onColumnResizing = function () {
                                var self = this;
                                // Not fired on fixed table but main grid (table)
                                self.$grid.on(Handler.COLUMN_RESIZING, function (evt, args) {
                                    columnSize.save(self.$grid, args.columnKey, args.desiredWidth);
                                });
                                return this;
                            };
                            Handler.KEY_DOWN = "keydown";
                            Handler.KEY_UP = "keyup";
                            Handler.FOCUS_IN = "focusin";
                            Handler.BLUR = "blur";
                            Handler.CLICK = "click";
                            Handler.MOUSE_DOWN = "mousedown";
                            Handler.SCROLL = "scroll";
                            Handler.GRID_EDIT_CELL_STARTED = "iggridupdatingeditcellstarted";
                            Handler.COLUMN_RESIZING = "iggridresizingcolumnresizing";
                            Handler.CELL_CLICK = "iggridcellclick";
                            Handler.PAGE_INDEX_CHANGE = "iggridpagingpageindexchanging";
                            Handler.PAGE_SIZE_CHANGE = "iggridpagingpagesizechanging";
                            Handler.CONTROL_CHANGE = "ntsgridcontrolvaluechanged";
                            return Handler;
                        }());
                        events.Handler = Handler;
                        /**
                         * Post render process
                         */
                        function afterRendered(options, cbSelectionColumns) {
                            options.rendered = function (evt, ui) {
                                var $grid = $(evt.target);
                                events.Handler.pull($grid, options).turnOn();
                                $(this).data(internal.CB_SELECTED, cbSelectionColumns);
                                // Bind events for fixed table part
                                var $fixedTbl = fixedColumns.getFixedTable($grid);
                                if ($fixedTbl.length > 0) {
                                    if (feature.isEnable(options.ntsFeatures, feature.COPY_PASTE))
                                        new copyPaste.Processor().chainEvents($grid, $fixedTbl);
                                    events.Handler.pull($fixedTbl, options).turnOn($grid);
                                }
                                // Sheet scroll
                                var sheetConfig = $grid.data(internal.SHEETS);
                                sheet.onScroll($grid);
                                if (!uk.util.isNullOrUndefined(sheetConfig) && !uk.util.isNullOrUndefined(sheetConfig.currentPosition)) {
                                    //                        let displayPos = sheetConfig.displayScrollTop;
                                    $grid.igGrid("virtualScrollTo", sheetConfig.currentPosition);
                                }
                                // Set selected cell if any
                                var selectedCell = $grid.data(internal.SELECTED_CELL);
                                if (!uk.util.isNullOrUndefined(selectedCell)) {
                                    var fixedColumns_2 = utils.getVisibleFixedColumns($grid);
                                    if (_.find(fixedColumns_2, function (col) {
                                        return col.key === selectedCell.columnKey;
                                    }) !== undefined) {
                                        setTimeout(function () {
                                            selection.selectCell($grid, selectedCell.rowIndex, selectedCell.index, true);
                                        }, 1);
                                    }
                                }
                                // Mark errors
                                errors.mark($grid);
                                color.styleHeaders($grid, options);
                                if (options.autoFitWindow) {
                                    // Resize grid
                                    settings.setGridSize($grid);
                                }
                                // Load columns size
                                columnSize.load($grid);
                                utils.setChildrenTabIndex($grid, -1);
                            };
                        }
                        events.afterRendered = afterRendered;
                        /**
                         * Cell click
                         */
                        function onCellClick($grid) {
                            $grid.on(Handler.CELL_CLICK, function (evt, ui) {
                                if (!utils.isEditMode($grid) && errors.any({ element: ui.cellElement })) {
                                    _.defer(function () {
                                        var $editor = $(ui.cellElement).find(errors.EDITOR_SELECTOR);
                                        if ($editor.length === 0)
                                            return;
                                        $editor.css(errors.ERROR_STL);
                                    });
                                }
                            });
                        }
                        events.onCellClick = onCellClick;
                    })(events || (events = {}));
                    var validation;
                    (function (validation) {
                        validation.VALIDATORS = "ntsValidators";
                        var H_M_MAX = 60;
                        var ColumnFieldValidator = (function () {
                            function ColumnFieldValidator(name, primitiveValue, options) {
                                this.name = name;
                                this.primitiveValue = primitiveValue;
                                this.options = options;
                            }
                            ColumnFieldValidator.prototype.probe = function (value) {
                                var valueType = this.primitiveValue ? ui.validation.getConstraint(this.primitiveValue).valueType
                                    : this.options.cDisplayType;
                                switch (valueType) {
                                    case "String":
                                        return new nts.uk.ui.validation.StringValidator(this.name, this.primitiveValue, this.options)
                                            .validate(value, this.options);
                                    case "Integer":
                                    case "Decimal":
                                    case "HalfInt":
                                        return new NumberValidator(this.name, valueType, this.primitiveValue, this.options)
                                            .validate(value);
                                    case "Currency":
                                        var opts = new ui.option.CurrencyEditorOption();
                                        opts.grouplength = this.options.groupLength | 3;
                                        opts.decimallength = this.options.decimalLength | 2;
                                        opts.currencyformat = this.options.currencyFormat ? this.options.currencyFormat : "JPY";
                                        return new NumberValidator(this.name, valueType, this.primitiveValue, opts)
                                            .validate(value);
                                    case "Time":
                                        this.options.mode = "time";
                                        return new nts.uk.ui.validation.TimeValidator(this.name, this.primitiveValue, this.options)
                                            .validate(value);
                                    case "Clock":
                                        this.options.outputFormat = "time";
                                        return new nts.uk.ui.validation.TimeValidator(this.name, this.primitiveValue, this.options)
                                            .validate(value);
                                    case "TimeWithDay":
                                        this.options.timeWithDay = true;
                                        var result = new ui.validation.TimeWithDayValidator(this.name, this.primitiveValue, this.options)
                                            .validate(value);
                                        if (result.isValid) {
                                            var formatter = new uk.text.TimeWithDayFormatter(this.options);
                                            result.parsedValue = formatter.format(result.parsedValue);
                                        }
                                        return result;
                                }
                            };
                            return ColumnFieldValidator;
                        }());
                        validation.ColumnFieldValidator = ColumnFieldValidator;
                        var NumberValidator = (function () {
                            function NumberValidator(name, displayType, primitiveValue, options) {
                                this.name = name;
                                this.displayType = displayType;
                                this.primitiveValue = primitiveValue;
                                this.options = options;
                            }
                            NumberValidator.prototype.validate = function (text) {
                                var self = this;
                                if (self.primitiveValue) {
                                    return new nts.uk.ui.validation.NumberValidator(self.name, self.primitiveValue, self.options).validate(text);
                                }
                                if (self.displayType === "Currency") {
                                    text = uk.text.replaceAll(text, self.options.groupseperator, "");
                                }
                                var result = new ui.validation.ValidationResult();
                                if ((uk.util.isNullOrUndefined(text) || text.length === 0)) {
                                    if (self.options && self.options.required) {
                                        result.fail(nts.uk.resource.getMessage('FND_E_REQ_INPUT', [self.name]), 'FND_E_REQ_INPUT');
                                        return result;
                                    }
                                    if (!self.options || (self.options && !self.options.required)) {
                                        result.success(text);
                                        return result;
                                    }
                                }
                                var message = {};
                                var isValid;
                                if (self.displayType === "HalfInt") {
                                    isValid = uk.ntsNumber.isHalfInt(text, message);
                                }
                                else if (self.displayType === "Integer") {
                                    isValid = uk.ntsNumber.isNumber(text, false, self.options, message);
                                }
                                else if (self.displayType === "Decimal" || self.displayType === "Currency") {
                                    isValid = uk.ntsNumber.isNumber(text, true, self.options, message);
                                }
                                var min = 0, max = 999999999;
                                var value = parseFloat(text);
                                if (!uk.util.isNullOrUndefined(self.options.min)) {
                                    min = self.options.min;
                                    if (value < min)
                                        isValid = false;
                                }
                                if (!uk.util.isNullOrUndefined(self.options.max)) {
                                    max = self.options.max;
                                    if (value > max)
                                        isValid = false;
                                }
                                if (!isValid) {
                                    result.fail(uk.resource.getMessage(message.id, [self.name, min, max]), message.id);
                                    return result;
                                }
                                var formatter = new uk.text.NumberFormatter({ option: self.options });
                                var formatted = formatter.format(text);
                                result.success(self.displayType === "Currency" ? formatted : value + "");
                                return result;
                            };
                            return NumberValidator;
                        }());
                        var Result = (function () {
                            function Result(isValid, formatted, messageId) {
                                this.onSuccess = $.noop;
                                this.onFail = $.noop;
                                this.isValid = isValid;
                                this.formatted = formatted;
                                this.errorMessageId = messageId;
                            }
                            Result.OK = function (formatted) {
                                return new Result(true, formatted);
                            };
                            Result.invalid = function (msgId) {
                                return new Result(false, null, msgId);
                            };
                            Result.prototype.success = function (cnt) {
                                this.onSuccess = cnt;
                                return this;
                            };
                            Result.prototype.fail = function (cnt) {
                                this.onFail = cnt;
                                return this;
                            };
                            Result.prototype.terminate = function () {
                                var self = this;
                                if (self.isValid && self.onSuccess && _.isFunction(self.onSuccess)) {
                                    self.onSuccess(self.formatted);
                                }
                                else if (!self.isValid && self.onFail && _.isFunction(self.onFail)) {
                                    self.onFail(self.errorMessageId);
                                }
                            };
                            return Result;
                        }());
                        validation.Result = Result;
                        function getValidators(columnsDef) {
                            var validators = {};
                            _.forEach(columnsDef, function (def) {
                                if (def.constraint === undefined)
                                    return;
                                validators[def.key] = new ColumnFieldValidator(def.headerText, def.constraint.primitiveValue, def.constraint);
                            });
                            return validators;
                        }
                        function scanValidators($grid, columnsDef) {
                            var columns = utils.analyzeColumns(columnsDef);
                            $grid.data(validation.VALIDATORS, getValidators(columns));
                            return columns;
                        }
                        validation.scanValidators = scanValidators;
                        function parseTime(value, format) {
                            if (uk.ntsNumber.isNumber(value, false)) {
                                if (value <= H_M_MAX)
                                    return Result.OK(value);
                                var hh = Math.floor(value / 100);
                                var mm = value % 100;
                                if (mm >= H_M_MAX)
                                    return Result.invalid("NEED_MSG_INVALID_TIME_FORMAT");
                                return Result.OK(hh + ":" + mm.toLocaleString("en-US", { minimumIntegerDigits: 2, useGrouping: false }));
                            }
                            var formatRes = uk.time.applyFormat(format, value, undefined);
                            if (!formatRes)
                                return Result.invalid("NEED_MSG_INVALID_TIME_FORMAT");
                            return Result.OK(formatRes);
                        }
                        validation.parseTime = parseTime;
                        function getValueType($grid, columnKey) {
                            var validators = $grid.data(validation.VALIDATORS);
                            if (!validators || !validators[columnKey])
                                return;
                            var column = validators[columnKey];
                            return column.primitiveValue ? ui.validation.getConstraint(column.primitiveValue).valueType
                                : column.options.cDisplayType;
                        }
                        validation.getValueType = getValueType;
                        function getGroupSeparator($grid, columnKey) {
                            var validators = $grid.data(validation.VALIDATORS);
                            if (!validators || !validators[columnKey])
                                return;
                            return validators[columnKey].options.groupseperator;
                        }
                        validation.getGroupSeparator = getGroupSeparator;
                    })(validation || (validation = {}));
                    var errors;
                    (function (errors) {
                        errors.HAS_ERROR = "hasError";
                        errors.ERROR_STL = { "border-color": "#ff6666" };
                        errors.NO_ERROR_STL = { "border-color": "" };
                        errors.EDITOR_SELECTOR = "div.ui-igedit-container";
                        function mark($grid) {
                            var errorsLog = $grid.data(internal.ERRORS_LOG);
                            if (uk.util.isNullOrUndefined(errorsLog))
                                return;
                            var sheets = $grid.data(internal.SHEETS);
                            var sheetErrors = errorsLog[sheets.currentSheet];
                            if (uk.util.isNullOrUndefined(sheetErrors))
                                return;
                            _.forEach(sheetErrors, function (cell) {
                                var $cell = $grid.igGrid("cellById", cell.id, cell.columnKey);
                                decorate($cell);
                            });
                        }
                        errors.mark = mark;
                        function decorate($cell) {
                            $cell.addClass(errors.HAS_ERROR);
                            $cell.css(errors.ERROR_STL);
                            var $editor = $cell.find(errors.EDITOR_SELECTOR);
                            if ($editor.length > 0)
                                $editor.css(errors.ERROR_STL);
                        }
                        function set($grid, cell, message) {
                            if (!cell || !cell.element || any(cell))
                                return;
                            var $cell = $(cell.element);
                            decorate($cell);
                            var errorDetails = createErrorInfos($grid, cell, message);
                            ui.errors.addCell(errorDetails);
                            addErrorInSheet($grid, cell);
                        }
                        errors.set = set;
                        function createErrorInfos($grid, cell, message) {
                            var record = $grid.igGrid("findRecordByKey", cell.id);
                            var error = {
                                grid: $grid,
                                rowId: cell.id,
                                columnKey: cell.columnKey,
                                message: message
                            };
                            // Error column headers
                            var headers = ko.toJS(ui.errors.errorsViewModel().option.headers);
                            _.forEach(headers, function (header) {
                                if (uk.util.isNullOrUndefined(record[header.name])
                                    || !uk.util.isNullOrUndefined(error[header.name]))
                                    return;
                                error[header.name] = record[header.name];
                            });
                            return error;
                        }
                        function clear($grid, cell) {
                            if (!cell || !cell.element || !any(cell))
                                return;
                            var $cell = $(cell.element);
                            $cell.removeClass(errors.HAS_ERROR);
                            $cell.css(errors.NO_ERROR_STL);
                            var $editor = $cell.find(errors.EDITOR_SELECTOR);
                            if ($editor.length > 0)
                                $editor.css(errors.NO_ERROR_STL);
                            ui.errors.removeCell($grid, cell.id, cell.columnKey);
                            removeErrorFromSheet($grid, cell);
                        }
                        errors.clear = clear;
                        function any(cell) {
                            return cell.element && $(cell.element).hasClass(errors.HAS_ERROR);
                        }
                        errors.any = any;
                        function addErrorInSheet($grid, cell) {
                            var errorsLog = $grid.data(internal.ERRORS_LOG) || {};
                            var sheets = $grid.data(internal.SHEETS);
                            if (uk.util.isNullOrUndefined(errorsLog[sheets.currentSheet])) {
                                errorsLog[sheets.currentSheet] = [];
                            }
                            errorsLog[sheets.currentSheet].push(cell);
                            $grid.data(internal.ERRORS_LOG, errorsLog);
                        }
                        function removeErrorFromSheet($grid, cell) {
                            var errorsLog = $grid.data(internal.ERRORS_LOG);
                            if (uk.util.isNullOrUndefined(errorsLog))
                                return;
                            var sheets = $grid.data(internal.SHEETS);
                            var sheetErrors = errorsLog[sheets.currentSheet];
                            if (uk.util.isNullOrUndefined(sheetErrors))
                                return;
                            var cellErrorIdx;
                            _.forEach(sheetErrors, function (errorCell, i) {
                                if (cellEquals(errorCell, cell)) {
                                    cellErrorIdx = i;
                                    return false;
                                }
                            });
                            if (!uk.util.isNullOrUndefined(cellErrorIdx)) {
                                errorsLog[sheets.currentSheet].splice(cellErrorIdx, 1);
                            }
                        }
                        function markIfError($grid, cell) {
                            var errorsLog = $grid.data(internal.ERRORS_LOG);
                            if (uk.util.isNullOrUndefined(errorsLog))
                                return;
                            var sheets = $grid.data(internal.SHEETS);
                            var sheetErrors = errorsLog[sheets.currentSheet];
                            if (uk.util.isNullOrUndefined(sheetErrors))
                                return;
                            _.forEach(sheetErrors, function (c) {
                                if (cellEquals(c, cell)) {
                                    decorate($(cell.element));
                                    return false;
                                }
                            });
                        }
                        errors.markIfError = markIfError;
                        function cellEquals(one, other) {
                            if (one.columnKey !== other.columnKey)
                                return false;
                            if (one.id !== other.id)
                                return false;
                            //                if (one.rowIndex !== other.rowIndex) return false;
                            return true;
                        }
                    })(errors || (errors = {}));
                    var color;
                    (function (color) {
                        color.Error = "ntsgrid-error";
                        color.Alarm = "ntsgrid-alarm";
                        color.ManualEditTarget = "ntsgrid-manual-edit-target";
                        color.ManualEditOther = "ntsgrid-manual-edit-other";
                        color.Reflect = "ntsgrid-reflect";
                        color.Calculation = "ntsgrid-calc";
                        color.Disable = "ntsgrid-disable";
                        var CellFormatter = (function () {
                            function CellFormatter($grid, features) {
                                this.$grid = $grid;
                                // Cell
                                this.cellStateFeatureDef = feature.find(features, feature.CELL_STATE);
                                this.setStatesTable(features);
                                // Row
                                this.rowDisableFeatureDef = feature.find(features, feature.ROW_STATE);
                                if (!uk.util.isNullOrUndefined(this.rowDisableFeatureDef)
                                    && !uk.util.isNullOrUndefined(this.rowDisableFeatureDef.rows)) {
                                    this.disableRows = _.groupBy(this.rowDisableFeatureDef.rows, "rowId");
                                }
                                // Text color
                                this.textColorFeatureDef = feature.find(features, feature.TEXT_COLOR);
                                this.setTextColorsTableMap(features);
                            }
                            /**
                             * Set states table
                             */
                            CellFormatter.prototype.setStatesTable = function (features) {
                                var _this = this;
                                if (uk.util.isNullOrUndefined(this.cellStateFeatureDef))
                                    return;
                                var rowIdName = this.cellStateFeatureDef.rowId;
                                var columnKeyName = this.cellStateFeatureDef.columnKey;
                                var stateName = this.cellStateFeatureDef.state;
                                this.statesTable = this.cellStateFeatureDef.states;
                                this.rowStates = _.groupBy(this.statesTable, rowIdName);
                                _.forEach(this.rowStates, function (value, key) {
                                    _this.rowStates[key] = _.groupBy(_this.rowStates[key], function (item) {
                                        return item[columnKeyName];
                                    });
                                });
                            };
                            /**
                             * Set text colors
                             */
                            CellFormatter.prototype.setTextColorsTableMap = function (features) {
                                var _this = this;
                                if (uk.util.isNullOrUndefined(this.textColorFeatureDef))
                                    return;
                                var rowIdName = this.textColorFeatureDef.rowId;
                                var columnKeyName = this.textColorFeatureDef.columnKey;
                                var colorName = this.textColorFeatureDef.color;
                                var colorsTable = this.textColorFeatureDef.colorsTable;
                                this.textColorsTable = _.groupBy(colorsTable, rowIdName);
                                _.forEach(this.textColorsTable, function (value, key) {
                                    _this.textColorsTable[key] = _.groupBy(_this.textColorsTable[key], function (item) {
                                        return item[columnKeyName];
                                    });
                                });
                            };
                            /**
                             * Format textbox.
                             */
                            CellFormatter.prototype.format = function (column) {
                                var self = this;
                                if (uk.util.isNullOrUndefined(this.cellStateFeatureDef)
                                    || column.formatter !== undefined)
                                    return column;
                                var rowIdName = this.cellStateFeatureDef.rowId;
                                var columnKeyName = this.cellStateFeatureDef.columnKey;
                                var stateName = this.cellStateFeatureDef.state;
                                var statesTable = this.cellStateFeatureDef.states;
                                column.formatter = function (value, rowObj) {
                                    if (uk.util.isNullOrUndefined(rowObj))
                                        return value;
                                    var _self = self;
                                    setTimeout(function () {
                                        var $gridCell = self.$grid.igGrid("cellById", rowObj[self.$grid.igGrid("option", "primaryKey")], column.key);
                                        if (!$gridCell)
                                            return;
                                        var $tr = $gridCell.closest("tr");
                                        var cell = {
                                            columnKey: column.key,
                                            element: $gridCell[0],
                                            rowIndex: $tr.data("rowIdx"),
                                            id: $tr.data("id")
                                        };
                                        // If cell has error, mark it
                                        errors.markIfError(self.$grid, cell);
                                        //                            let aColumn = _.find(_self.colorFeatureDef, function(col: any) {
                                        //                                return col.key === column.key;
                                        //                            });
                                        //                            
                                        //                            if (util.isNullOrUndefined(aColumn)) return;
                                        //                            let cellColor = aColumn.map(aColumn.parse(value));
                                        //                            $gridCell.css("background-color", cellColor);
                                        // Disable row
                                        if (!uk.util.isNullOrUndefined(self.disableRows)) {
                                            var disableRow = self.disableRows[cell.id];
                                            if (!uk.util.isNullOrUndefined(disableRow) && disableRow.length > 0 && disableRow[0].disable)
                                                $gridCell.addClass(color.Disable);
                                        }
                                        // Set cell states
                                        if (!uk.util.isNullOrUndefined(statesTable) && !uk.util.isNullOrUndefined(rowIdName)
                                            && !uk.util.isNullOrUndefined(columnKeyName) && !uk.util.isNullOrUndefined(stateName)
                                            && !uk.util.isNullOrUndefined(self.rowStates[cell.id])) {
                                            var cellState = self.rowStates[cell.id][column.key];
                                            if (uk.util.isNullOrUndefined(cellState) || cellState.length === 0)
                                                return;
                                            _.forEach(cellState[0][stateName], function (stt) {
                                                $gridCell.addClass(stt);
                                            });
                                        }
                                    }, 0);
                                    return value;
                                };
                                return column;
                            };
                            /**
                             * Style common controls.
                             */
                            CellFormatter.prototype.style = function ($grid, cell) {
                                if (uk.util.isNullOrUndefined(this.cellStateFeatureDef))
                                    return;
                                var rowIdName = this.cellStateFeatureDef.rowId;
                                var columnKeyName = this.cellStateFeatureDef.columnKey;
                                var stateName = this.cellStateFeatureDef.state;
                                var statesTable = this.cellStateFeatureDef.states;
                                // Disable row
                                var controlType = utils.getControlType($grid, cell.columnKey);
                                if (!uk.util.isNullOrUndefined(this.disableRows)) {
                                    var disableRow = this.disableRows[cell.id];
                                    if (!uk.util.isNullOrUndefined(disableRow) && disableRow.length > 0 && disableRow[0].disable) {
                                        $(cell.element).addClass(color.Disable);
                                        $grid.ntsGrid(functions.DISABLE_CONTROL, cell.id, cell.columnKey, controlType);
                                    }
                                }
                                // Set cell states
                                if (!uk.util.isNullOrUndefined(statesTable) && !uk.util.isNullOrUndefined(rowIdName)
                                    && !uk.util.isNullOrUndefined(columnKeyName) && !uk.util.isNullOrUndefined(stateName)
                                    && !uk.util.isNullOrUndefined(this.rowStates[cell.id])) {
                                    var cellState = this.rowStates[cell.id][cell.columnKey];
                                    if (uk.util.isNullOrUndefined(cellState) || cellState.length === 0)
                                        return;
                                    _.forEach(cellState[0][stateName], function (stt) {
                                        if (stt === color.Disable && !$(cell.element).hasClass(color.Disable)) {
                                            $grid.ntsGrid(functions.DISABLE_CONTROL, cell.id, cell.columnKey, controlType);
                                        }
                                        $(cell.element).addClass(stt);
                                    });
                                }
                            };
                            /**
                             * Set text color
                             */
                            CellFormatter.prototype.setTextColor = function ($grid, cell) {
                                if (uk.util.isNullOrUndefined(this.textColorFeatureDef))
                                    return;
                                var rowIdName = this.textColorFeatureDef.rowId;
                                var columnKeyName = this.textColorFeatureDef.columnKey;
                                var colorName = this.textColorFeatureDef.color;
                                var colorsTable = this.textColorFeatureDef.colorsTable;
                                if (!uk.util.isNullOrUndefined(colorsTable) && !uk.util.isNullOrUndefined(rowIdName)
                                    && !uk.util.isNullOrUndefined(columnKeyName) && !uk.util.isNullOrUndefined(colorName)
                                    && !uk.util.isNullOrUndefined(this.textColorsTable[cell.id])) {
                                    var textColor = this.textColorsTable[cell.id][cell.columnKey];
                                    if (uk.util.isNullOrUndefined(textColor) || textColor.length === 0)
                                        return;
                                    var txtColor = textColor[0][colorName];
                                    if (txtColor.indexOf("#") === 0) {
                                        $(cell.element).css("color", txtColor);
                                        return;
                                    }
                                    $(cell.element).addClass(txtColor);
                                }
                            };
                            return CellFormatter;
                        }());
                        color.CellFormatter = CellFormatter;
                        /**
                         * Style headers
                         */
                        function styleHeaders($grid, options) {
                            var headerStyles = feature.find(options.ntsFeatures, feature.HEADER_STYLES);
                            if (uk.util.isNullOrUndefined(headerStyles))
                                return;
                            setHeadersColor($grid, headerStyles.columns);
                        }
                        color.styleHeaders = styleHeaders;
                        /**
                         * Set header color
                         */
                        function setHeadersColor($grid, columns) {
                            var headersTable = $grid.igGrid("headersTable");
                            var fixedHeadersTable = $grid.igGrid("fixedHeadersTable");
                            fixedHeadersTable.find("th").each(function () {
                                var columnId = $(this).attr("id");
                                if (uk.util.isNullOrUndefined(columnId))
                                    return;
                                var key = columnId.split("_")[1];
                                var targetColumn;
                                _.forEach(columns, function (col) {
                                    if (col.key === key) {
                                        targetColumn = col;
                                        return false;
                                    }
                                });
                                if (!uk.util.isNullOrUndefined(targetColumn)) {
                                    if (targetColumn.color.indexOf("#") === 0) {
                                        $(this).css("background-color", targetColumn.color);
                                        return;
                                    }
                                    $(this).addClass(targetColumn.color);
                                }
                            });
                            headersTable.find("th").each(function () {
                                var columnId = $(this).attr("id");
                                if (uk.util.isNullOrUndefined(columnId))
                                    return;
                                var key = columnId.split("_")[1];
                                var targetColumn;
                                _.forEach(columns, function (col) {
                                    if (col.key === key) {
                                        targetColumn = col;
                                        return false;
                                    }
                                });
                                if (!uk.util.isNullOrUndefined(targetColumn)) {
                                    if (targetColumn.color.indexOf("#") === 0) {
                                        $(this).css("background-color", targetColumn.color);
                                        return;
                                    }
                                    $(this).addClass(targetColumn.color);
                                }
                            });
                        }
                        /**
                         * Remember disable
                         */
                        function rememberDisabled($grid, cell) {
                            var settings = $grid.data(internal.SETTINGS);
                            if (!settings)
                                return;
                            var disables = settings.disables;
                            if (!disables)
                                return;
                            var controlType = utils.getControlType($grid, cell.columnKey);
                            var row = disables[cell.id];
                            if (!row)
                                return;
                            _.forEach(row, function (c, i) {
                                if (c === cell.columnKey) {
                                    $grid.ntsGrid(functions.DISABLE_CONTROL, cell.id, cell.columnKey, controlType);
                                    $(cell.element).addClass(color.Disable);
                                    return false;
                                }
                            });
                        }
                        color.rememberDisabled = rememberDisabled;
                        /**
                         * Push disable
                         */
                        function pushDisable($grid, cell) {
                            var settings = $grid.data(internal.SETTINGS);
                            if (!settings)
                                return;
                            var disables = settings.disables;
                            if (!disables) {
                                settings.disables = {};
                            }
                            if (!settings.disables[cell.id] || settings.disables[cell.id].length === 0) {
                                settings.disables[cell.id] = [cell.columnKey];
                                return;
                            }
                            var found = false;
                            _.forEach(settings.disables[cell.id], function (c, i) {
                                if (c === cell.columnKey) {
                                    found = true;
                                    return false;
                                }
                            });
                            if (!found)
                                settings.disables[cell.id].push(cell.columnKey);
                        }
                        color.pushDisable = pushDisable;
                        /**
                         * Pop disable
                         */
                        function popDisable($grid, cell) {
                            var settings = $grid.data(internal.SETTINGS);
                            if (!settings)
                                return;
                            var disables = settings.disables;
                            if (!disables || !disables[cell.id] || disables[cell.id].length === 0)
                                return;
                            var index = -1;
                            _.forEach(disables[cell.id], function (c, i) {
                                if (c === cell.columnKey) {
                                    index = i;
                                    return false;
                                }
                            });
                            if (index !== -1) {
                                disables[cell.id].splice(index, 1);
                            }
                        }
                        color.popDisable = popDisable;
                    })(color = ntsGrid.color || (ntsGrid.color = {}));
                    var fixedColumns;
                    (function (fixedColumns) {
                        /**
                         * Get fixed table
                         */
                        function getFixedTable($grid) {
                            return $("#" + $grid.attr("id") + "_fixed");
                        }
                        fixedColumns.getFixedTable = getFixedTable;
                        /**
                         * Get real grid
                         */
                        function realGridOf($grid) {
                            if (utils.isIgGrid($grid))
                                return $grid;
                            var gridId = $grid.attr("id");
                            if (uk.util.isNullOrUndefined(gridId))
                                return;
                            var endIdx = gridId.indexOf("_fixed");
                            if (endIdx !== -1) {
                                var referGrid = $("#" + gridId.substring(0, endIdx));
                                if (!uk.util.isNullOrUndefined(referGrid) && utils.fixable(referGrid))
                                    return referGrid;
                            }
                        }
                        fixedColumns.realGridOf = realGridOf;
                    })(fixedColumns || (fixedColumns = {}));
                    var sheet;
                    (function (sheet_1) {
                        var normalStyles = { backgroundColor: '', color: '' };
                        var selectedStyles = { backgroundColor: '#00B050', color: '#fff' };
                        var Configurator = (function () {
                            function Configurator(currentSheet, sheets) {
                                this.currentSheet = currentSheet;
                                this.sheets = sheets;
                            }
                            /**
                             * Load
                             */
                            Configurator.load = function ($grid, sheetFeature) {
                                var sheetConfig = $grid.data(internal.SHEETS);
                                if (uk.util.isNullOrUndefined(sheetConfig)) {
                                    var config = new Configurator(sheetFeature.initialDisplay, sheetFeature.sheets);
                                    $grid.data(internal.SHEETS, config);
                                }
                            };
                            return Configurator;
                        }());
                        sheet_1.Configurator = Configurator;
                        function onScroll($grid) {
                            var $scrollContainer = $("#" + $grid.attr("id") + "_scrollContainer");
                            var $displayContainer = $("#" + $grid.attr("id") + "_displayContainer");
                            if ($scrollContainer.length === 0 || $displayContainer.length === 0)
                                return;
                            var scrollListener = function (evt) {
                                var sheetConfig = $grid.data(internal.SHEETS);
                                if (uk.util.isNullOrUndefined(sheetConfig))
                                    return;
                                sheetConfig.currentPosition = $scrollContainer.scrollTop() + "px";
                                sheetConfig.displayScrollTop = $displayContainer.scrollTop();
                                sheetConfig.blockId = $grid.find("tbody tr:first").data("id");
                            };
                            $scrollContainer.on(events.Handler.SCROLL, scrollListener);
                        }
                        sheet_1.onScroll = onScroll;
                        /**
                         * Unused
                         */
                        function setup($grid, options) {
                            var sheetFeature = feature.find(options.ntsFeatures, feature.SHEET);
                            if (uk.util.isNullOrUndefined(sheetFeature))
                                return;
                            var hidingFeature = { name: 'Hiding' };
                            if (feature.isEnable(options.features, feature.HIDING)) {
                                feature.replaceBy(options, feature.HIDING, hidingFeature);
                            }
                            else {
                                options.features.push(hidingFeature);
                            }
                            Configurator.load($grid, sheetFeature);
                            configButtons($grid, sheetFeature.sheets);
                        }
                        sheet_1.setup = setup;
                        /**
                         * Unused
                         */
                        function configButtons($grid, sheets) {
                            var gridWrapper = $("<div class='nts-grid-wrapper'/>");
                            $grid.wrap($("<div class='nts-grid-container'/>")).wrap(gridWrapper);
                            var gridContainer = $grid.closest(".nts-grid-container");
                            var sheetButtonsWrapper = $("<div class='nts-grid-sheet-buttons'/>").appendTo(gridContainer);
                            var sheetMng = $grid.data(internal.SHEETS);
                            _.forEach(sheets, function (sheet) {
                                var btn = $("<button/>").addClass(sheet.name).text(sheet.text).appendTo(sheetButtonsWrapper);
                                if (sheetMng.currentSheet === sheet.name)
                                    btn.css(selectedStyles);
                                btn.on("click", function (evt) {
                                    if (!utils.hidable($grid) || utils.isErrorStatus($grid))
                                        return;
                                    updateCurrentSheet($grid, sheet.name);
                                    utils.showColumns($grid, sheet.columns);
                                    hideOthers($grid);
                                    // Styles
                                    sheetButtonsWrapper.find("button").css(normalStyles);
                                    $(this).css(selectedStyles);
                                });
                            });
                        }
                        function hideOthers($grid) {
                            var sheetMng = $grid.data(internal.SHEETS);
                            if (uk.util.isNullOrUndefined(sheetMng))
                                return;
                            var displayColumns;
                            _.forEach(sheetMng.sheets, function (sheet) {
                                if (sheet.name !== sheetMng.currentSheet) {
                                    utils.hideColumns($grid, sheet.columns);
                                }
                                else {
                                    displayColumns = sheet.columns;
                                }
                            });
                            // Resize displaying columns
                            setTimeout(function () {
                                _.forEach(displayColumns, function (column) {
                                    columnSize.loadOne($grid, column);
                                });
                            }, 0);
                        }
                        sheet_1.hideOthers = hideOthers;
                        /**
                         * Update current sheet
                         */
                        function updateCurrentSheet($grid, name) {
                            var sheetMng = $grid.data(internal.SHEETS);
                            if (uk.util.isNullOrUndefined(sheetMng))
                                return;
                            sheetMng.currentSheet = name;
                            $grid.data(internal.SHEETS, sheetMng);
                        }
                        var load;
                        (function (load) {
                            /**
                             * Setup
                             */
                            function setup($grid, options) {
                                var sheetFeature = feature.find(options.ntsFeatures, feature.SHEET);
                                if (uk.util.isNullOrUndefined(sheetFeature))
                                    return;
                                Configurator.load($grid, sheetFeature);
                                configButtons($grid, sheetFeature.sheets);
                                if (!uk.util.isNullOrUndefined($grid.data(internal.GRID_OPTIONS)))
                                    return;
                                $grid.data(internal.GRID_OPTIONS, _.cloneDeep(options));
                                // Initial sheet
                                var sheetMng = $grid.data(internal.SHEETS);
                                var sheet = _.filter(sheetMng.sheets, function (sheet) {
                                    return sheet.name === sheetMng.currentSheet;
                                });
                                var columns = getSheetColumns(options.columns, sheet[0], options.features);
                                options.columns = columns;
                            }
                            load.setup = setup;
                            /**
                             * Config buttons
                             */
                            function configButtons($grid, sheets) {
                                if ($grid.closest(".nts-grid-container").length > 0)
                                    return;
                                $grid.closest(".nts-grid-wrapper").wrap($("<div class='nts-grid-container'/>"));
                                var gridContainer = $grid.closest(".nts-grid-container");
                                var sheetButtonsWrapper = $("<div class='nts-grid-sheet-buttons'/>").appendTo(gridContainer);
                                var sheetMng = $grid.data(internal.SHEETS);
                                _.forEach(sheets, function (sheet) {
                                    var btn = $("<button/>").addClass(sheet.name).text(sheet.text).appendTo(sheetButtonsWrapper);
                                    if (sheetMng.currentSheet === sheet.name)
                                        btn.css(selectedStyles);
                                    btn.on("click", function (evt) {
                                        if (utils.isErrorStatus($grid))
                                            return;
                                        updateCurrentSheet($grid, sheet.name);
                                        var options = $grid.data(internal.GRID_OPTIONS);
                                        var columns = getSheetColumns(options.columns, sheet, options.features);
                                        var clonedOpts = _.cloneDeep(options);
                                        clonedOpts.columns = columns;
                                        clonedOpts.dataSource = $grid.igGrid("option", "dataSource");
                                        $grid.igGrid("destroy");
                                        $grid.off();
                                        var pagingFt = feature.find(clonedOpts.features, feature.PAGING);
                                        var loader = $grid.data(internal.LOADER);
                                        if (pagingFt && loader) {
                                            if (!uk.util.isNullOrUndefined(loader.pageIndex)) {
                                                pagingFt.currentPageIndex = loader.pageIndex;
                                            }
                                            if (!uk.util.isNullOrUndefined(loader.pageSize)) {
                                                pagingFt.pageSize = loader.pageSize;
                                            }
                                            feature.replaceBy(clonedOpts, feature.PAGING, pagingFt);
                                        }
                                        $grid.ntsGrid(clonedOpts);
                                        // Styles
                                        sheetButtonsWrapper.find("button").css(normalStyles);
                                        $(this).css(selectedStyles);
                                    });
                                });
                            }
                            /**
                             * Get sheet columns
                             */
                            function getSheetColumns(allColumns, displaySheet, features) {
                                return _.filter(allColumns, function (column) {
                                    if (column.group !== undefined && _.find(displaySheet.columns, function (col) {
                                        return col === column.group[0].key;
                                    }) !== undefined)
                                        return true;
                                    var belongToSheet = _.find(displaySheet.columns, function (col) {
                                        return col === column.key;
                                    }) !== undefined;
                                    var columnFixFeature = feature.find(features, feature.COLUMN_FIX);
                                    if (!uk.util.isNullOrUndefined(columnFixFeature)) {
                                        return _.find(columnFixFeature.columnSettings, function (s) {
                                            return s.columnKey === column.key;
                                        }) !== undefined || belongToSheet;
                                    }
                                    return belongToSheet;
                                });
                            }
                        })(load = sheet_1.load || (sheet_1.load = {}));
                    })(sheet || (sheet = {}));
                    var onDemand;
                    (function (onDemand) {
                        var Loader = (function () {
                            function Loader(allKeysPath, pageRecordsPath, pageSize) {
                                this.allKeysPath = allKeysPath;
                                this.pageRecordsPath = pageRecordsPath;
                                this.pageSize = pageSize;
                            }
                            return Loader;
                        }());
                        onDemand.Loader = Loader;
                        function hidePageSizeDD($grid, options) {
                            if (options && !feature.find(options.ntsFeatures, feature.DEMAND_LOAD))
                                return;
                            var $gridContainer = $($grid.igGrid("container"));
                            if ($gridContainer.length > 0) {
                                $gridContainer.find("div[class*='ui-iggrid-pagesizedropdowncontainer']").hide();
                            }
                        }
                        onDemand.hidePageSizeDD = hidePageSizeDD;
                        /**
                         * Load keys
                         */
                        function loadKeys($grid, path) {
                            var dfd = $.Deferred();
                            uk.request.ajax(path).done(function (keys) {
                                var loader = $grid.data(internal.LOADER);
                                if (!loader.keys || loader.keys.length === 0)
                                    loader.keys = keys;
                                dfd.resolve(loader.keys);
                            }).fail(function () {
                                dfd.reject();
                            });
                            return dfd.promise();
                        }
                        onDemand.loadKeys = loadKeys;
                        /**
                         * Load data
                         */
                        function loadLazy(path, keys, startIndex, endIndex, dataSource, primaryKey) {
                            var dfd = $.Deferred();
                            uk.request.ajax(path, keys).done(function (data) {
                                _.forEach(data, function (rData, index) {
                                    for (var i = startIndex; i < endIndex; i++) {
                                        if (dataSource[i] && dataSource[i][primaryKey] === rData[primaryKey]) {
                                            rData.loaded = true;
                                            dataSource.splice(i, 1, rData);
                                        }
                                    }
                                });
                                dfd.resolve(dataSource);
                            }).fail(function () {
                                ;
                                dfd.reject();
                            });
                            return dfd.promise();
                        }
                        onDemand.loadLazy = loadLazy;
                        /**
                         * Initialize
                         */
                        function initial($grid, options) {
                            if (!options)
                                return false;
                            var pagingFt = feature.find(options.features, feature.PAGING);
                            if (!pagingFt)
                                return false;
                            var demandLoadFt = feature.find(options.ntsFeatures, feature.DEMAND_LOAD);
                            if (!demandLoadFt)
                                return false;
                            var pageSize = pagingFt.pageSize;
                            var loader = $grid.data(internal.LOADER);
                            if (!loader) {
                                $grid.data(internal.LOADER, new Loader(demandLoadFt.allKeysPath, demandLoadFt.pageRecordsPath, pagingFt.pageSize));
                            }
                            else if (loader.keys) {
                                pageSize = loader.pageSize;
                                bindPageChange($grid);
                                return false;
                            }
                            loadKeys($grid, demandLoadFt.allKeysPath).done(function (keys) {
                                var primaryKey = options.primaryKey;
                                var ds = keys.map(function (key, index) {
                                    var obj = {};
                                    obj[primaryKey] = key;
                                    obj["loaded"] = false;
                                    return obj;
                                });
                                var firstRecordIndex = (pagingFt.currentPageIndex || 0) * pageSize;
                                var lastRecordIndex = firstRecordIndex + pageSize;
                                var firstPageItems = keys.slice(firstRecordIndex, lastRecordIndex);
                                loadLazy(demandLoadFt.pageRecordsPath, firstPageItems, firstRecordIndex, lastRecordIndex, ds, primaryKey).done(function (data) {
                                    options.dataSource = data;
                                    $grid.igGrid(options);
                                    bindPageChange($grid);
                                });
                            }).fail(function () {
                            });
                            return true;
                        }
                        onDemand.initial = initial;
                        /**
                         * Bind page change
                         */
                        function bindPageChange($grid) {
                            $grid.on(events.Handler.PAGE_INDEX_CHANGE, function (evt, ui) {
                                var newPageIndex = ui.newPageIndex;
                                var pageSize = ui.owner.pageSize();
                                var startIndex = newPageIndex * pageSize;
                                var endIndex = startIndex + pageSize;
                                var loader = $grid.data(internal.LOADER);
                                if (!loader || !loader.keys)
                                    return;
                                var dataSource = $grid.igGrid("option", "dataSource");
                                var primaryKey = $grid.igGrid("option", "primaryKey");
                                loader.pageIndex = ui.newPageIndex;
                                var newKeys = loader.keys.slice(startIndex, endIndex);
                                for (var i = endIndex - 1; i >= startIndex; i--) {
                                    if (dataSource[i] && dataSource[i].loaded) {
                                        newKeys.splice(i - startIndex, 1);
                                    }
                                }
                                if (newKeys.length === 0)
                                    return;
                                loadLazy(loader.pageRecordsPath, newKeys, startIndex, endIndex, dataSource, primaryKey).done(function (data) {
                                    $grid.igGrid("option", "dataSource", data);
                                    ui.owner.pageIndex(ui.newPageIndex);
                                });
                                return false;
                            });
                            $grid.on(events.Handler.PAGE_SIZE_CHANGE, function (evt, ui) {
                                var loader = $grid.data(internal.LOADER);
                                if (!loader)
                                    return;
                                loader.pageSize = ui.newPageSize;
                                loader.pageIndex = 0;
                                var currentPageIndex = 0;
                                var startIndex = currentPageIndex * ui.newPageSize;
                                var endIndex = startIndex + ui.newPageSize;
                                var newKeys = loader.keys.slice(startIndex, endIndex);
                                var dataSource = $grid.igGrid("option", "dataSource");
                                var primaryKey = $grid.igGrid("option", "primaryKey");
                                for (var i = endIndex - 1; i >= startIndex; i--) {
                                    if (dataSource[i] && dataSource[i].loaded) {
                                        newKeys.splice(i - startIndex, 1);
                                    }
                                }
                                if (newKeys.length === 0)
                                    return;
                                loadLazy(loader.pageRecordsPath, newKeys, startIndex, endIndex, dataSource, primaryKey).done(function (data) {
                                    $grid.igGrid("option", "dataSource", data);
                                    ui.owner.pageSize(ui.newPageSize);
                                });
                                return false;
                            });
                        }
                    })(onDemand || (onDemand = {}));
                    var settings;
                    (function (settings) {
                        /**
                         * Build settings
                         */
                        function build($grid, options) {
                            var data = {};
                            data.preventEditInError = options.preventEditInError;
                            $grid.data(internal.SETTINGS, data);
                        }
                        settings.build = build;
                        /**
                         * Set grid size
                         */
                        function setGridSize($grid) {
                            var height = window.innerHeight;
                            var width = window.innerWidth;
                            $grid.igGrid("option", "width", width - 240);
                            $grid.igGrid("option", "height", height - 90);
                        }
                        settings.setGridSize = setGridSize;
                    })(settings || (settings = {}));
                    var internal;
                    (function (internal) {
                        internal.CONTROL_TYPES = "ntsControlTypesGroup";
                        internal.COMBO_SELECTED = "ntsComboSelection";
                        internal.CB_SELECTED = "ntsCheckboxSelection";
                        internal.UPDATED_CELLS = "ntsUpdatedCells";
                        // Full columns options
                        internal.GRID_OPTIONS = "ntsGridOptions";
                        internal.SELECTED_CELL = "ntsSelectedCell";
                        internal.SHEETS = "ntsGridSheets";
                        internal.SPECIAL_COL_TYPES = "ntsSpecialColumnTypes";
                        internal.ENTER_DIRECT = "enter";
                        internal.SETTINGS = "ntsSettings";
                        internal.ERRORS_LOG = "ntsErrorsLog";
                        internal.LOADER = "ntsLoader";
                        internal.TXT_RAW = "rawText";
                    })(internal || (internal = {}));
                    var utils;
                    (function (utils) {
                        function isArrowKey(evt) {
                            return evt.keyCode >= 37 && evt.keyCode <= 40;
                        }
                        utils.isArrowKey = isArrowKey;
                        function isArrowLeft(evt) {
                            return evt.keyCode === 37;
                        }
                        utils.isArrowLeft = isArrowLeft;
                        function isArrowRight(evt) {
                            return evt.keyCode === 39;
                        }
                        utils.isArrowRight = isArrowRight;
                        function isAlphaNumeric(evt) {
                            return (evt.keyCode >= 48 && evt.keyCode <= 90)
                                || (evt.keyCode >= 96 && evt.keyCode <= 105);
                        }
                        utils.isAlphaNumeric = isAlphaNumeric;
                        function isTabKey(evt) {
                            return evt.keyCode === 9;
                        }
                        utils.isTabKey = isTabKey;
                        function isEnterKey(evt) {
                            return evt.keyCode === 13;
                        }
                        utils.isEnterKey = isEnterKey;
                        function isSpaceKey(evt) {
                            return evt.keyCode === 32;
                        }
                        utils.isSpaceKey = isSpaceKey;
                        function isDeleteKey(evt) {
                            return evt.keyCode === 46;
                        }
                        utils.isDeleteKey = isDeleteKey;
                        function isPasteKey(evt) {
                            return evt.keyCode === 86;
                        }
                        utils.isPasteKey = isPasteKey;
                        function isCopyKey(evt) {
                            return evt.keyCode === 67;
                        }
                        utils.isCopyKey = isCopyKey;
                        function isCutKey(evt) {
                            return evt.keyCode === 88;
                        }
                        utils.isCutKey = isCutKey;
                        /**
                         * Is error
                         */
                        function isErrorStatus($grid) {
                            var cell = selection.getSelectedCell($grid);
                            return isEditMode($grid) && errors.any(cell);
                        }
                        utils.isErrorStatus = isErrorStatus;
                        /**
                         * Only used in edit mode
                         */
                        function isNotErrorCell($grid, evt) {
                            var cell = selection.getSelectedCell($grid);
                            var $target = $(evt.target);
                            var td = $target;
                            if (!$target.prev().is("td"))
                                td = $target.closest("td");
                            return isEditMode($grid) && td.length > 0 && td[0] !== cell.element[0]
                                && errors.any(cell);
                        }
                        utils.isNotErrorCell = isNotErrorCell;
                        /**
                         * Is edit mode
                         */
                        function isEditMode($grid) {
                            return (updatable($grid) && $grid.igGridUpdating("isEditing"));
                        }
                        utils.isEditMode = isEditMode;
                        function isIgGrid($grid) {
                            return $grid && !uk.util.isNullOrUndefined($grid.data("igGrid"));
                        }
                        utils.isIgGrid = isIgGrid;
                        function selectable($grid) {
                            return $grid && !uk.util.isNullOrUndefined($grid.data("igGridSelection"));
                        }
                        utils.selectable = selectable;
                        function updatable($grid) {
                            return $grid && !uk.util.isNullOrUndefined($grid.data("igGridUpdating"));
                        }
                        utils.updatable = updatable;
                        function fixable($grid) {
                            return $grid && !uk.util.isNullOrUndefined($grid.data("igGridColumnFixing"));
                        }
                        utils.fixable = fixable;
                        function hidable($grid) {
                            return $grid && !uk.util.isNullOrUndefined($grid.data("igGridHiding"));
                        }
                        utils.hidable = hidable;
                        function pageable($grid) {
                            return $grid && !uk.util.isNullOrUndefined($grid.data("igGridPaging"));
                        }
                        utils.pageable = pageable;
                        function disabled($cell) {
                            return $cell.hasClass(color.Disable);
                        }
                        utils.disabled = disabled;
                        /**
                         * Data type of primary key
                         */
                        function dataTypeOfPrimaryKey($grid, columnsMap) {
                            if (uk.util.isNullOrUndefined(columnsMap))
                                return;
                            var columns = columnsMap["undefined"];
                            if (Object.keys(columnsMap).length > 1) {
                                columns = _.concat(columnsMap["true"], columnsMap["undefined"]);
                            }
                            var primaryKey = $grid.igGrid("option", "primaryKey");
                            var keyColumn = _.filter(columns, function (column) {
                                return column.key === primaryKey;
                            });
                            if (!uk.util.isNullOrUndefined(keyColumn) && keyColumn.length > 0)
                                return keyColumn[0].dataType;
                            return;
                        }
                        utils.dataTypeOfPrimaryKey = dataTypeOfPrimaryKey;
                        /**
                         * Parse number
                         */
                        function parseIntIfNumber(value, $grid, columnsMap) {
                            if (dataTypeOfPrimaryKey($grid, columnsMap) === "number") {
                                return parseInt(value);
                            }
                            return value;
                        }
                        utils.parseIntIfNumber = parseIntIfNumber;
                        function isCopiableControls($grid, columnKey) {
                            var columnControlTypes = $grid.data(internal.CONTROL_TYPES);
                            switch (columnControlTypes[columnKey]) {
                                case ntsControls.LINK_LABEL:
                                case ntsControls.TEXTBOX:
                                case ntsControls.LABEL:
                                    return true;
                            }
                            return false;
                        }
                        utils.isCopiableControls = isCopiableControls;
                        function isCuttableControls($grid, columnKey) {
                            var columnControlTypes = $grid.data(internal.CONTROL_TYPES);
                            switch (columnControlTypes[columnKey]) {
                                case ntsControls.TEXTBOX:
                                    return true;
                            }
                            return false;
                        }
                        utils.isCuttableControls = isCuttableControls;
                        function isPastableControls($grid, columnKey) {
                            var columnControlTypes = $grid.data(internal.CONTROL_TYPES);
                            switch (columnControlTypes[columnKey]) {
                                case ntsControls.LABEL:
                                case ntsControls.CHECKBOX:
                                case ntsControls.LINK_LABEL:
                                case ntsControls.COMBOBOX:
                                case ntsControls.FLEX_IMAGE:
                                case ntsControls.IMAGE:
                                    return false;
                            }
                            return true;
                        }
                        utils.isPastableControls = isPastableControls;
                        function isDisabled($cell) {
                            return $cell.hasClass(color.Disable);
                        }
                        utils.isDisabled = isDisabled;
                        function isComboBox($grid, columnKey) {
                            var columnControlTypes = $grid.data(internal.CONTROL_TYPES);
                            if (columnControlTypes[columnKey] === ntsControls.COMBOBOX)
                                return true;
                            return false;
                        }
                        utils.isComboBox = isComboBox;
                        function isNtsControl($grid, columnKey) {
                            var columnControlTypes = $grid.data(internal.CONTROL_TYPES);
                            switch (columnControlTypes[columnKey]) {
                                case ntsControls.LABEL:
                                case ntsControls.CHECKBOX:
                                case ntsControls.SWITCH_BUTTONS:
                                case ntsControls.COMBOBOX:
                                case ntsControls.BUTTON:
                                case ntsControls.DELETE_BUTTON:
                                case ntsControls.FLEX_IMAGE:
                                case ntsControls.IMAGE:
                                case ntsControls.TEXT_EDITOR:
                                    return true;
                            }
                            return false;
                        }
                        utils.isNtsControl = isNtsControl;
                        /**
                         * Get control type
                         */
                        function getControlType($grid, columnKey) {
                            var columnControlTypes = $grid.data(internal.CONTROL_TYPES);
                            if (uk.util.isNullOrUndefined(columnControlTypes))
                                return;
                            return columnControlTypes[columnKey];
                        }
                        utils.getControlType = getControlType;
                        function comboBoxOfCell(cell) {
                            return $(cell.element).find(".nts-combo-container");
                        }
                        utils.comboBoxOfCell = comboBoxOfCell;
                        function getColumns($grid) {
                            if (isIgGrid($grid)) {
                                return $grid.igGrid("option", "columns");
                            }
                            var referGrid = fixedColumns.realGridOf($grid);
                            if (!uk.util.isNullOrUndefined(referGrid))
                                return referGrid.igGrid("option", "columns");
                        }
                        utils.getColumns = getColumns;
                        function getColumnsMap($grid) {
                            var columns = getColumns($grid);
                            return _.groupBy(columns, "fixed");
                        }
                        utils.getColumnsMap = getColumnsMap;
                        function getVisibleColumns($grid) {
                            return _.filter(getColumns($grid), function (column) {
                                return column.hidden !== true;
                            });
                        }
                        utils.getVisibleColumns = getVisibleColumns;
                        function getVisibleColumnsMap($grid) {
                            var visibleColumns = getVisibleColumns($grid);
                            return _.groupBy(visibleColumns, "fixed");
                        }
                        utils.getVisibleColumnsMap = getVisibleColumnsMap;
                        function getVisibleFixedColumns($grid) {
                            return _.filter(getColumns($grid), function (column) {
                                return column.hidden !== true && column.fixed === true;
                            });
                        }
                        utils.getVisibleFixedColumns = getVisibleFixedColumns;
                        function isFixedColumn(columnKey, visibleColumnsMap) {
                            return _.find(visibleColumnsMap["true"], function (column) {
                                return column.key === columnKey;
                            }) !== undefined;
                        }
                        utils.isFixedColumn = isFixedColumn;
                        function isFixedColumnCell(cell, visibleColumnsMap) {
                            return _.find(visibleColumnsMap["true"], function (column) {
                                return column.key === cell.columnKey;
                            }) !== undefined;
                        }
                        utils.isFixedColumnCell = isFixedColumnCell;
                        function columnsGroupOfColumn(column, visibleColumnsMap) {
                            return visibleColumnsMap[column.fixed ? "true" : "undefined"];
                        }
                        utils.columnsGroupOfColumn = columnsGroupOfColumn;
                        function columnsGroupOfCell(cell, visibleColumnsMap) {
                            if (isFixedColumnCell(cell, visibleColumnsMap))
                                return visibleColumnsMap["true"];
                            return visibleColumnsMap["undefined"];
                        }
                        utils.columnsGroupOfCell = columnsGroupOfCell;
                        function visibleColumnsFromMap(visibleColumnsMap) {
                            return _.concat(visibleColumnsMap["true"], visibleColumnsMap["undefined"]);
                        }
                        utils.visibleColumnsFromMap = visibleColumnsFromMap;
                        function noOfVisibleColumns(visibleColumnsMap) {
                            return visibleColumnsMap["true"].length + visibleColumnsMap["undefined"].length;
                        }
                        utils.noOfVisibleColumns = noOfVisibleColumns;
                        function getFixedColumns(visibleColumnsMap) {
                            return visibleColumnsMap["true"];
                        }
                        utils.getFixedColumns = getFixedColumns;
                        function getUnfixedColumns(visibleColumnsMap) {
                            return visibleColumnsMap["undefined"];
                        }
                        utils.getUnfixedColumns = getUnfixedColumns;
                        /**
                         * Next column
                         */
                        function nextColumn(visibleColumnsMap, columnIndex, isFixed) {
                            if (uk.util.isNullOrUndefined(visibleColumnsMap))
                                return;
                            var nextCol = {};
                            var mapKeyName = isFixed ? "true" : "undefined";
                            var reverseKeyName = isFixed ? "undefined" : "true";
                            if (columnIndex < visibleColumnsMap[mapKeyName].length - 1) {
                                return {
                                    options: visibleColumnsMap[mapKeyName][columnIndex + 1],
                                    index: columnIndex + 1
                                };
                            }
                            else if (columnIndex === visibleColumnsMap[mapKeyName].length - 1) {
                                return {
                                    options: visibleColumnsMap[reverseKeyName][0],
                                    index: 0
                                };
                            }
                        }
                        utils.nextColumn = nextColumn;
                        /**
                         * Next column by key
                         */
                        function nextColumnByKey(visibleColumnsMap, columnKey, isFixed) {
                            if (uk.util.isNullOrUndefined(visibleColumnsMap))
                                return;
                            var currentColumnIndex;
                            var currentColumn;
                            var fixedColumns = visibleColumnsMap["true"];
                            var unfixedColumns = visibleColumnsMap["undefined"];
                            if (isFixed && fixedColumns.length > 0) {
                                _.forEach(fixedColumns, function (col, index) {
                                    if (col.key === columnKey) {
                                        currentColumnIndex = index;
                                        currentColumn = col;
                                        return false;
                                    }
                                });
                                if (uk.util.isNullOrUndefined(currentColumn) || uk.util.isNullOrUndefined(currentColumnIndex))
                                    return;
                                if (currentColumnIndex === fixedColumns.length - 1) {
                                    return {
                                        options: unfixedColumns[0],
                                        index: 0
                                    };
                                }
                                return {
                                    options: fixedColumns[currentColumnIndex + 1],
                                    index: currentColumnIndex + 1
                                };
                            }
                            if (!isFixed && unfixedColumns.length > 0) {
                                _.forEach(unfixedColumns, function (col, index) {
                                    if (col.key === columnKey) {
                                        currentColumnIndex = index;
                                        currentColumn = col;
                                        return false;
                                    }
                                });
                                if (uk.util.isNullOrUndefined(currentColumn) || uk.util.isNullOrUndefined(currentColumnIndex))
                                    return;
                                if (currentColumnIndex === unfixedColumns.length - 1) {
                                    return {
                                        options: fixedColumns.length > 0 ? fixedColumns[0] : unfixedColumns[0],
                                        index: 0
                                    };
                                }
                                return {
                                    options: unfixedColumns[currentColumnIndex + 1],
                                    index: currentColumnIndex + 1
                                };
                            }
                        }
                        utils.nextColumnByKey = nextColumnByKey;
                        function rowAt(cell) {
                            if (uk.util.isNullOrUndefined(cell))
                                return;
                            return $(cell.element).closest("tr");
                        }
                        utils.rowAt = rowAt;
                        function nextNRow(cell, noOfNext) {
                            return $(cell.element).closest("tr").nextAll("tr:eq(" + (noOfNext - 1) + ")");
                        }
                        utils.nextNRow = nextNRow;
                        function getDisplayColumnIndex($grid, cell) {
                            var columns = $grid.igGrid("option", "columns");
                            for (var i = 0; i < columns.length; i++) {
                                if (columns[i].key === cell.columnKey)
                                    return i;
                            }
                            return -1;
                        }
                        utils.getDisplayColumnIndex = getDisplayColumnIndex;
                        function getDisplayContainer($grid) {
                            return $("#" + $grid.attr("id") + "_displayContainer");
                        }
                        utils.getDisplayContainer = getDisplayContainer;
                        function getScrollContainer($grid) {
                            return $("#" + $grid.attr("id") + "_scrollContainer");
                        }
                        utils.getScrollContainer = getScrollContainer;
                        function startEdit($grid, cell) {
                            var visibleColumns = getVisibleColumns($grid);
                            for (var i = 0; i < visibleColumns.length; i++) {
                                if (visibleColumns[i].key === cell.columnKey) {
                                    $grid.igGridUpdating("startEdit", cell.id, i);
                                    break;
                                }
                            }
                        }
                        utils.startEdit = startEdit;
                        function hideColumns($grid, columns) {
                            $grid.igGridHiding("hideMultiColumns", columns);
                        }
                        utils.hideColumns = hideColumns;
                        function showColumns($grid, columns) {
                            $grid.igGridHiding("showMultiColumns", columns);
                        }
                        utils.showColumns = showColumns;
                        function analyzeColumns(columns) {
                            var flatCols = [];
                            flatColumns(columns, flatCols);
                            return flatCols;
                        }
                        utils.analyzeColumns = analyzeColumns;
                        function flatColumns(columns, flatCols) {
                            _.forEach(columns, function (column) {
                                if (uk.util.isNullOrUndefined(column.group)) {
                                    flatCols.push(column);
                                    return;
                                }
                                flatColumns(column.group, flatCols);
                            });
                        }
                        function setChildrenTabIndex($grid, index) {
                            var container = $grid.igGrid("container");
                            $(container).find("tr, th, td").attr("tabindex", index);
                        }
                        utils.setChildrenTabIndex = setChildrenTabIndex;
                    })(utils || (utils = {}));
                })(ntsGrid = jqueryExtentions.ntsGrid || (jqueryExtentions.ntsGrid = {}));
            })(jqueryExtentions = ui_22.jqueryExtentions || (ui_22.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsPopup;
                (function (ntsPopup) {
                    var DATA_INSTANCE_NAME = 'nts-popup-panel';
                    ;
                    $.fn.ntsPopup = handler;
                    function handler(action, option) {
                        var $control = $(this);
                        if (typeof action !== 'string') {
                            handler.call(this, "init", action);
                        }
                        switch (action) {
                            case 'init':
                                init($control, option);
                                break;
                            case 'show':
                                show($control);
                                break;
                            case 'hide':
                                hide($control);
                                break;
                            case 'destroy':
                                destroy($control);
                                break;
                            case 'toggle':
                                toggle($control);
                                break;
                        }
                    }
                    function init(control, option) {
                        control.addClass("popup-panel").css("z-index", 100).show();
                        // Default Setting
                        var defaultoption = {
                            trigger: "",
                            position: {
                                my: 'left top',
                                at: 'left bottom',
                                of: control.siblings('.show-popup')
                            },
                            showOnStart: false,
                            dismissible: true
                        };
                        var setting = $.extend({}, defaultoption, option);
                        control.data("option", setting);
                        // Trigger Element
                        $(setting.trigger).on("click.popup", function (e) {
                            show(control);
                        });
                        // Dismissible
                        if (setting.dismissible) {
                            $(window).on("mousedown.popup", function (e) {
                                if (!$(e.target).is(control) // Target isn't Popup
                                    && control.has(e.target).length === 0 // Target isn't Popup's children
                                    && !$(e.target).is(setting.trigger)) {
                                    hide(control);
                                }
                            });
                        }
                        // Show on Start
                        if (setting.showOnStart)
                            show(control);
                        else
                            hide(control);
                        return control;
                    }
                    function show(control) {
                        control.css({
                            visibility: 'visible',
                        });
                        control.position(control.data("option").position);
                        return control;
                    }
                    function hide(control) {
                        control.css({
                            visibility: 'hidden',
                            top: "-9999px",
                            left: "-9999px"
                        });
                        return control;
                    }
                    function destroy(control) {
                        hide(control);
                        $(control.data("option").trigger).off("click.popup");
                        $(window).off("click.popup");
                        return control;
                    }
                    function toggle(control) {
                        var isDisplaying = control.css("visibility");
                        if (isDisplaying === 'hidden') {
                            show(control);
                        }
                        else {
                            hide(control);
                        }
                        return control;
                    }
                    var NtsPopupPanel = (function () {
                        function NtsPopupPanel($panel, option) {
                            var parent = $panel.parent();
                            this.$panel = $panel
                                .data(DATA_INSTANCE_NAME, this)
                                .addClass('popup-panel')
                                .appendTo(parent);
                            this.$panel.css("z-index", 100);
                        }
                        return NtsPopupPanel;
                    }());
                })(ntsPopup = jqueryExtentions.ntsPopup || (jqueryExtentions.ntsPopup = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Accordion binding handler
                 */
                var NtsTableButtonBindingHandler = (function () {
                    function NtsTableButtonBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsTableButtonBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var source = ko.unwrap(data.source);
                        var mode = (data.mode !== undefined) ? ko.unwrap(data.mode) : "normal";
                        var row = (data.row !== undefined) ? ko.unwrap(data.row) : 1;
                        var column = (data.column !== undefined) ? ko.unwrap(data.column) : 1;
                        var contextMenu = (data.contextMenu !== undefined) ? ko.unwrap(data.contextMenu) : [];
                        var disableMenuOnDataNotSet = (data.disableMenuOnDataNotSet !== undefined) ? ko.unwrap(data.disableMenuOnDataNotSet) : [];
                        var selectedCell = ko.unwrap(data.selectedCell);
                        var width = (data.width !== undefined) ? ko.unwrap(data.width) : 400;
                        var clickAction = data.click;
                        var selectedCells = ko.unwrap(data.selectedCells);
                        $(element).ntsButtonTable("init", {
                            mode: mode,
                            click: clickAction,
                            row: row,
                            column: column,
                            source: source,
                            width: width,
                            disableMenuOnDataNotSet: disableMenuOnDataNotSet,
                            contextMenu: contextMenu
                        });
                        $(element).bind("cellselectedchanging", function (evt, value) {
                            if (!nts.uk.util.isNullOrUndefined(data.selectedCell)) {
                                $(element).data("o-selected", _.cloneDeep(value));
                                data.selectedCell(value);
                            }
                        });
                        $(element).bind("sourcechanging", function (evt, value) {
                            if (!nts.uk.util.isNullOrUndefined(data.source)) {
                                data.source(value.source);
                            }
                        });
                    };
                    /**
                     * Update
                     */
                    NtsTableButtonBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var source = ko.unwrap(data.source);
                        var row = (data.row !== undefined) ? ko.unwrap(data.row) : 1;
                        var column = (data.column !== undefined) ? ko.unwrap(data.column) : 1;
                        var selectedCell = ko.unwrap(data.selectedCell);
                        var container = $(element);
                        var oldSource = container.ntsButtonTable("dataSource");
                        if (!_.isEqual(oldSource, source)) {
                            container.ntsButtonTable("dataSource", source);
                        }
                        container.ntsButtonTable("row", row);
                        container.ntsButtonTable("column", column);
                        if (!nts.uk.util.isNullOrUndefined(selectedCell) && !nts.uk.util.isNullOrUndefined(selectedCell.column)
                            && !nts.uk.util.isNullOrUndefined(selectedCell.row) && !_.isEqual(container.data("o-selected"), selectedCell)) {
                            container.ntsButtonTable("setSelectedCell", selectedCell.row, selectedCell.column);
                        }
                        container.data("o-selected", _.cloneDeep(selectedCell));
                    };
                    return NtsTableButtonBindingHandler;
                }());
                ko.bindingHandlers['ntsTableButton'] = new NtsTableButtonBindingHandler();
            })(koExtentions = ui.koExtentions || (ui.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsUserGuide;
                (function (ntsUserGuide) {
                    $.fn.ntsUserGuide = function (action) {
                        var $controls = $(this);
                        if (nts.uk.util.isNullOrUndefined(action) || action === "init") {
                            return init($controls);
                        }
                        else if (action === "destroy") {
                            return destroy($controls);
                        }
                        else if (action === "show") {
                            return show($controls);
                        }
                        else if (action === "hide") {
                            return hide($controls);
                        }
                        else if (action === "toggle") {
                            return toggle($controls);
                        }
                        else if (action === "isShow") {
                            return isShow($controls);
                        }
                        else {
                            return $controls;
                        }
                        ;
                    };
                    function init(controls) {
                        controls.each(function () {
                            // UserGuide container
                            var $control = $(this);
                            $control.remove();
                            if (!$control.hasClass("ntsUserGuide"))
                                $control.addClass("ntsUserGuide");
                            $($control).appendTo($("body")).show();
                            var target = $control.data('target');
                            var direction = $control.data('direction');
                            // Userguide Information Box
                            $control.children().each(function () {
                                var $box = $(this);
                                var boxDirection = $box.data("direction");
                                $box.addClass("userguide-box caret-" + getReveseDirection(boxDirection) + " caret-overlay");
                            });
                            // Userguide Overlay
                            var $overlay = $("<div class='userguide-overlay'></div>")
                                .addClass("overlay-" + direction)
                                .appendTo($control);
                            $control.hide();
                        });
                        // Hiding when click outside
                        $("html").on("mouseup keypress", { controls: controls }, hideBinding);
                        return controls;
                    }
                    function destroy(controls) {
                        controls.each(function () {
                            $(this).remove();
                        });
                        // Unbind Hiding when click outside
                        $("html").off("mouseup keypress", hideBinding);
                        return controls;
                    }
                    function hideBinding(e) {
                        e.data.controls.each(function () {
                            $(this).hide();
                        });
                        return e.data.controls;
                    }
                    function show(controls) {
                        controls.each(function () {
                            var $control = $(this);
                            $control.show();
                            var target = $control.data('target');
                            var direction = $control.data('direction');
                            $control.find(".userguide-overlay").each(function (index, elem) {
                                calcOverlayPosition($(elem), target, direction);
                            });
                            $control.children().each(function () {
                                var $box = $(this);
                                var boxTarget = $box.data("target");
                                var boxDirection = $box.data("direction");
                                var boxMargin = ($box.data("margin")) ? $box.data("margin") : "20";
                                calcBoxPosition($box, boxTarget, boxDirection, boxMargin);
                            });
                        });
                        return controls;
                    }
                    function hide(controls) {
                        controls.each(function () {
                            $(this).hide();
                        });
                        return controls;
                    }
                    function toggle(controls) {
                        if (isShow(controls))
                            hide(controls);
                        else
                            show(controls);
                        return controls;
                    }
                    function isShow(controls) {
                        var result = true;
                        controls.each(function () {
                            if (!$(this).is(":visible"))
                                result = false;
                        });
                        return result;
                    }
                    function calcOverlayPosition(overlay, target, direction) {
                        if (direction === "left")
                            return overlay.css("right", "auto")
                                .css("width", $(target).offset().left);
                        else if (direction === "right")
                            return overlay.css("left", $(target).offset().left + $(target).outerWidth());
                        else if (direction === "top")
                            return overlay.css("position", "absolute")
                                .css("bottom", "auto")
                                .css("height", $(target).offset().top);
                        else if (direction === "bottom")
                            return overlay.css("position", "absolute")
                                .css("top", $(target).offset().top + $(target).outerHeight())
                                .css("height", $("body").height() - $(target).offset().top);
                    }
                    function calcBoxPosition(box, target, direction, margin) {
                        var operation = "+";
                        if (direction === "left" || direction === "top")
                            operation = "-";
                        return box.position({
                            my: getReveseDirection(direction) + operation + margin,
                            at: direction,
                            of: target,
                            collision: "none"
                        });
                    }
                    function getReveseDirection(direction) {
                        if (direction === "left")
                            return "right";
                        else if (direction === "right")
                            return "left";
                        else if (direction === "top")
                            return "bottom";
                        else if (direction === "bottom")
                            return "top";
                    }
                })(ntsUserGuide || (ntsUserGuide = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var NtsSortableBindingHandler = (function () {
    function NtsSortableBindingHandler() {
        var _this = this;
        this.ITEMKEY = "ko_sortItem";
        this.INDEXKEY = "ko_sourceIndex";
        this.LISTKEY = "ko_sortList";
        this.PARENTKEY = "ko_parentList";
        this.DRAGKEY = "ko_dragItem";
        this.dataSet = ko.utils.domData.set;
        this.dataGet = ko.utils.domData.get;
        this.version = $.ui && $.ui.version;
        this.hasNestedSortableFix = function () { return _this.version && _this.version.indexOf("1.6.") && _this.version.indexOf("1.7.") && (_this.version.indexOf("1.8.") || _this.version === "1.8.24"); };
        this.addMetaDataAfterRender = function (elements, data) {
            var self = _this;
            ko.utils.arrayForEach(elements, function (element) {
                if (element.nodeType === 1) {
                    self.dataSet(element, self.ITEMKEY, data);
                    self.dataSet(element, self.PARENTKEY, self.dataGet(element.parentNode, self.LISTKEY));
                }
            });
        };
        this.updateIndexFromDestroyedItems = function (index, items) {
            var self = _this, unwrapped = ko.unwrap(items);
            if (unwrapped) {
                for (var i = 0; i < index; i++) {
                    //add one for every destroyed item we find before the targetIndex in the target array
                    if (unwrapped[i] && ko.unwrap(unwrapped[i]._destroy)) {
                        index++;
                    }
                }
            }
            return index;
        };
        this.stripTemplateWhitespace = function (element, name) {
            var self = _this, templateSource, templateElement;
            //process named templates
            if (name) {
                templateElement = document.getElementById(name);
                if (templateElement) {
                    templateSource = new ko.templateSources.domElement(templateElement);
                    templateSource.text($.trim(templateSource.text()));
                }
            }
            else {
                //remove leading/trailing non-elements from anonymous templates
                $(element).contents().each(function () {
                    if (this && this.nodeType !== 1) {
                        element.removeChild(this);
                    }
                });
            }
        };
        this.prepareTemplateOptions = function (valueAccessor, dataName) {
            var self = _this, result = {}, options = ko.unwrap(valueAccessor()) || {}, actualAfterRender;
            //build our options to pass to the template engine
            if (options.data) {
                result[dataName] = options.data;
                result.name = options.template;
            }
            else {
                result[dataName] = valueAccessor();
            }
            ko.utils.arrayForEach(["afterAdd", "afterRender", "as", "beforeRemove", "includeDestroyed", "templateEngine", "templateOptions", "nodes"], function (option) {
                if (options.hasOwnProperty(option)) {
                    result[option] = options[option];
                }
                else if (ko.bindingHandlers['ntsSortable'].hasOwnProperty(option)) {
                    result[option] = ko.bindingHandlers['ntsSortable'][option];
                }
            });
            //use an afterRender function to add meta-data
            if (dataName === "foreach") {
                if (result.afterRender) {
                    //wrap the existing function, if it was passed
                    actualAfterRender = result.afterRender;
                    result.afterRender = function (element, data) {
                        self.addMetaDataAfterRender.call(data, element, data);
                        actualAfterRender.call(data, element, data);
                    };
                }
                else {
                    result.afterRender = self.addMetaDataAfterRender;
                }
            }
            //return options to pass to the template binding
            return result;
        };
        this.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var self = _this, $element = $(element), value = ko.unwrap(valueAccessor()) || {}, templateOptions = self.prepareTemplateOptions(valueAccessor, "foreach"), sortable = {}, startActual, updateActual;
            self.stripTemplateWhitespace(element, templateOptions.name);
            //build a new object that has the global options with overrides from the binding
            $.extend(true, sortable, ko.bindingHandlers['ntsSortable']);
            if (value.options && sortable.options) {
                ko.utils.extend(sortable.options, value.options);
                delete value.options;
            }
            else {
                sortable.options = sortable.options || {};
                ko.utils.extend(sortable.options, {
                    start: function () { },
                    update: function () { }
                });
            }
            ko.utils.extend(sortable, value);
            //if allowDrop is an observable or a function, then execute it in a computed observable
            if (sortable.connectClass && (ko.isObservable(sortable.allowDrop) || typeof sortable.allowDrop == "function")) {
                ko.computed({
                    read: function () {
                        var value = ko.unwrap(sortable.allowDrop), shouldAdd = typeof value == "function" ? value.call(this, templateOptions.foreach) : value;
                        ko.utils.toggleDomNodeCssClass(element, sortable.connectClass, shouldAdd);
                    },
                    disposeWhenNodeIsRemoved: element
                }, _this);
            }
            else {
                ko.utils.toggleDomNodeCssClass(element, sortable.connectClass, sortable.allowDrop);
            }
            //wrap the template binding
            ko.bindingHandlers.template.init(element, function () {
                return templateOptions;
            }, allBindingsAccessor, viewModel, bindingContext);
            //keep a reference to start/update functions that might have been passed in
            startActual = sortable.options.start;
            updateActual = sortable.options.update;
            //ensure draggable table row cells maintain their width while dragging (unless a helper is provided)
            if (!sortable.options.helper) {
                sortable.options.helper = function (e, ui) {
                    if (ui.is("tr")) {
                        ui.children().each(function () {
                            $(this).width($(this).width());
                        });
                    }
                    return ui;
                };
            }
            //initialize sortable binding after template binding has rendered in update function
            var createTimeout = setTimeout(function () {
                var dragItem;
                var originalReceive = sortable.options.receive;
                $element.sortable(ko.utils.extend(sortable.options, {
                    start: function (event, ui) {
                        //track original index
                        var el = ui.item[0];
                        self.dataSet(el, self.INDEXKEY, ko.utils.arrayIndexOf(ui.item.parent().children(), el));
                        //make sure that fields have a chance to update model
                        ui.item.find("input:focus").change();
                        if (startActual) {
                            startActual.apply(this, arguments);
                        }
                    },
                    receive: function (event, ui) {
                        //optionally apply an existing receive handler
                        if (typeof originalReceive === "function") {
                            originalReceive.call(this, event, ui);
                        }
                        dragItem = self.dataGet(ui.item[0], self.DRAGKEY);
                        if (dragItem) {
                            //copy the model item, if a clone option is provided
                            if (dragItem.clone) {
                                dragItem = dragItem.clone();
                            }
                            //configure a handler to potentially manipulate item before drop
                            if (sortable.dragged) {
                                dragItem = sortable.dragged.call(this, dragItem, event, ui) || dragItem;
                            }
                        }
                    },
                    update: function (event, ui) {
                        var sourceParent, targetParent, sourceIndex, targetIndex, arg, el = ui.item[0], parentEl = ui.item.parent()[0], item = self.dataGet(el, self.ITEMKEY) || dragItem;
                        if (!item) {
                            $(el).remove();
                        }
                        dragItem = null;
                        //make sure that moves only run once, as update fires on multiple containers
                        if (item && (this === parentEl) || (!self.hasNestedSortableFix && $.contains(this, parentEl))) {
                            //identify parents
                            sourceParent = self.dataGet(el, self.PARENTKEY);
                            sourceIndex = self.dataGet(el, self.INDEXKEY);
                            targetParent = self.dataGet(el.parentNode, self.LISTKEY);
                            targetIndex = ko.utils.arrayIndexOf(ui.item.parent().children(), el);
                            //take destroyed items into consideration
                            if (!templateOptions.includeDestroyed) {
                                sourceIndex = self.updateIndexFromDestroyedItems(sourceIndex, sourceParent);
                                targetIndex = self.updateIndexFromDestroyedItems(targetIndex, targetParent);
                            }
                            //build up args for the callbacks
                            if (sortable.beforeMove || sortable.afterMove) {
                                arg = {
                                    item: item,
                                    sourceParent: sourceParent,
                                    sourceParentNode: sourceParent && ui.sender || el.parentNode,
                                    sourceIndex: sourceIndex,
                                    targetParent: targetParent,
                                    targetIndex: targetIndex,
                                    cancelDrop: false
                                };
                                //execute the configured callback prior to actually moving items
                                if (sortable.beforeMove) {
                                    sortable.beforeMove.call(this, arg, event, ui);
                                }
                            }
                            //call cancel on the correct list, so KO can take care of DOM manipulation
                            if (sourceParent) {
                                $(sourceParent === targetParent ? this : ui.sender || this).sortable("cancel");
                            }
                            else {
                                $(el).remove();
                            }
                            //if beforeMove told us to cancel, then we are done
                            if (arg && arg.cancelDrop) {
                                return;
                            }
                            //if the strategy option is unset or false, employ the order strategy involving removal and insertion of items
                            if (!sortable.hasOwnProperty("strategyMove") || sortable.strategyMove === false) {
                                //do the actual move
                                if (targetIndex >= 0) {
                                    if (sourceParent) {
                                        sourceParent.splice(sourceIndex, 1);
                                        //if using deferred updates plugin, force updates
                                        if (ko['processAllDeferredBindingUpdates']) {
                                            ko['processAllDeferredBindingUpdates']();
                                        }
                                        //if using deferred updates on knockout 3.4, force updates
                                        if (ko.options && ko.options.deferUpdates) {
                                            ko.tasks.runEarly();
                                        }
                                    }
                                    targetParent.splice(targetIndex, 0, item);
                                }
                                //rendering is handled by manipulating the observableArray; ignore dropped element
                                self.dataSet(el, self.ITEMKEY, null);
                            }
                            else {
                                if (targetIndex >= 0) {
                                    if (sourceParent) {
                                        if (sourceParent !== targetParent) {
                                            // moving from one list to another
                                            sourceParent.splice(sourceIndex, 1);
                                            targetParent.splice(targetIndex, 0, item);
                                            //rendering is handled by manipulating the observableArray; ignore dropped element
                                            self.dataSet(el, self.ITEMKEY, null);
                                            ui.item.remove();
                                        }
                                        else {
                                            // moving within same list
                                            var underlyingList = ko.unwrap(sourceParent);
                                            // notify 'beforeChange' subscribers
                                            if (sourceParent.valueWillMutate) {
                                                sourceParent.valueWillMutate();
                                            }
                                            // move from source index ...
                                            underlyingList.splice(sourceIndex, 1);
                                            // ... to target index
                                            underlyingList.splice(targetIndex, 0, item);
                                            // notify subscribers
                                            if (sourceParent.valueHasMutated) {
                                                sourceParent.valueHasMutated();
                                            }
                                        }
                                    }
                                    else {
                                        // drop new element from outside
                                        targetParent.splice(targetIndex, 0, item);
                                        //rendering is handled by manipulating the observableArray; ignore dropped element
                                        self.dataSet(el, self.ITEMKEY, null);
                                        ui.item.remove();
                                    }
                                }
                            }
                            //if using deferred updates plugin, force updates
                            if (ko['processAllDeferredBindingUpdates']) {
                                ko['processAllDeferredBindingUpdates']();
                            }
                            //allow binding to accept a function to execute after moving the item
                            if (sortable.afterMove) {
                                sortable.afterMove.call(this, arg, event, ui);
                            }
                        }
                        if (updateActual) {
                            updateActual.apply(this, arguments);
                        }
                    },
                    connectWith: false
                }));
                //handle enabling/disabling sorting
                if (sortable.isEnabled !== undefined) {
                    ko.computed({
                        read: function () {
                            $element.sortable(ko.unwrap(sortable.isEnabled) ? "enable" : "disable");
                        },
                        disposeWhenNodeIsRemoved: element
                    });
                }
            }, 0);
            //handle disposal
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                //only call destroy if sortable has been created
                if ($element.data("ui-sortable") || $element.data("sortable")) {
                    $element.sortable("destroy");
                }
                ko.utils.toggleDomNodeCssClass(element, sortable.connectClass, false);
                //do not create the sortable if the element has been removed from DOM
                clearTimeout(createTimeout);
            });
            return {
                'controlsDescendantBindings': true
            };
        };
        this.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var self = _this, templateOptions = self.prepareTemplateOptions(valueAccessor, "foreach");
            //attach meta-data
            self.dataSet(element, self.LISTKEY, templateOptions.foreach);
            //call template binding's update with correct options
            ko.bindingHandlers['template'].update(element, function () { return templateOptions; }, allBindingsAccessor, viewModel, bindingContext);
        };
    }
    return NtsSortableBindingHandler;
}());
ko.bindingHandlers["ntsSortable"] = new NtsSortableBindingHandler();
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_23) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var isNull = nts.uk.util.isNullOrUndefined;
                var isEmpty = nts.uk.util.isNullOrEmpty;
                var ntsButtonTable;
                (function (ntsButtonTable) {
                    $.fn.ntsButtonTable = function (method, option, option2, option3) {
                        var $element = $(this);
                        var builder;
                        switch (method) {
                            case "init": {
                                builder = new TableBuildingConstructor($element, option);
                                builder.startBuildTable();
                                break;
                            }
                            case "dataSource": {
                                builder = $element.data("builder");
                                if (isNull(option) || !$.isArray(option)) {
                                    return builder.getDataSource();
                                }
                                builder.setDataSource(option);
                                builder.drawTable();
                                break;
                            }
                            case "column": {
                                builder = $element.data("builder");
                                if (isNull(option)) {
                                    return builder.column;
                                }
                                if (option !== builder.column) {
                                    builder.setColumn(option);
                                    builder.startBuildTable();
                                }
                                break;
                            }
                            case "row": {
                                builder = $element.data("builder");
                                if (isNull(option)) {
                                    return builder.row;
                                }
                                if (option !== builder.row) {
                                    builder.setRow(option);
                                    builder.drawTable();
                                }
                                break;
                            }
                            case "cellAt": {
                                builder = $element.data("builder");
                                var tbody = builder.container.find("tbody");
                                var rowAt = tbody.find("tr:nth-child(" + (option + 1) + ")");
                                var cellAt = rowAt.find("td:nth-child(" + (option2 + 1) + ")");
                                return {
                                    element: cellAt,
                                    data: cellAt.data("cell-data"),
                                    rowIdx: option,
                                    columnIdx: option2,
                                };
                            }
                            case "setCellValue": {
                                builder = $element.data("builder");
                                var tbody = builder.container.find("tbody");
                                var rowAt = tbody.find("tr:nth-child(" + (option + 1) + ")");
                                var cellAt = rowAt.find("td:nth-child(" + (option2 + 1) + ")");
                                builder.setCellValue(cellAt.find("button"), option3);
                                break;
                            }
                            case "getSelectedCells": {
                                builder = $element.data("builder");
                                var selectedButton = builder.container.find(".ntsButtonCellSelected");
                                return _.map(selectedButton, function (c) {
                                    var button = $(c);
                                    var cell = button.parent();
                                    var rowIdx = parseInt(cell.attr("row-idx"));
                                    var columnIdx = parseInt(cell.attr("column-idx"));
                                    return {
                                        element: cell,
                                        data: cell.data("cell-data"),
                                        rowIdx: rowIdx,
                                        columnIdx: columnIdx,
                                    };
                                });
                            }
                            case "setSelectedCell": {
                                builder = $element.data("builder");
                                var tbody = builder.container.find("tbody");
                                var rowAt = tbody.find("tr:nth-child(" + (option + 1) + ")");
                                var cellAt = rowAt.find("td:nth-child(" + (option2 + 1) + ")");
                                cellAt.find("button").trigger("cellselecting");
                                break;
                            }
                            case "clearSelectedCellAt": {
                                builder = $element.data("builder");
                                var tbody = builder.container.find("tbody");
                                var rowAt = tbody.find("tr:nth-child(" + (option + 1) + ")");
                                var cellAt = rowAt.find("td:nth-child(" + (option2 + 1) + ")");
                                cellAt.find("button").trigger("cellselecting");
                                break;
                            }
                            case "clearAllSelectedCells": {
                                builder = $element.data("builder");
                                this.container.find(".ntsButtonCellSelected").trigger("cellselecting");
                                ;
                                break;
                            }
                            case "getDataCells": {
                                builder = $element.data("builder");
                                var dataButton = builder.container.find(".ntsButtonCellData");
                                return _.map(dataButton, function (c) {
                                    var button = $(c);
                                    var cell = button.parent();
                                    var rowIdx = parseInt(cell.attr("row-idx"));
                                    var columnIdx = parseInt(cell.attr("column-idx"));
                                    return {
                                        element: cell,
                                        data: cell.data("cell-data"),
                                        rowIdx: rowIdx,
                                        columnIdx: columnIdx,
                                    };
                                });
                            }
                            default:
                                break;
                        }
                        $element.data("builder", builder);
                        return;
                    };
                    var TableBuildingConstructor = (function () {
                        function TableBuildingConstructor(container, option) {
                            this.container = container;
                            this.mode = option.mode;
                            this.clickOnAction = option.click;
                            this.row = option.row;
                            this.column = option.column;
                            this.originalSource = _.cloneDeep(option.source);
                            this.source = this.changeSource(option.source);
                            this.id = nts.uk.util.randomId();
                            this.width = option.width;
                            this.disableMenuOnDataNotSet = option.disableMenuOnDataNotSet;
                            this.cloneContextMenu(option.contextMenu);
                        }
                        TableBuildingConstructor.prototype.changeSource = function (origin) {
                            var result = [];
                            for (var rI = 0; rI < this.row; rI++) {
                                result[rI] = [];
                                for (var cI = 0; cI < this.column; cI++) {
                                    var cell = origin[(rI * this.column) + cI];
                                    result[rI][cI] = !isNull(cell) ? _.cloneDeep(cell) : undefined;
                                }
                            }
                            return result;
                        };
                        TableBuildingConstructor.prototype.setDataSource = function (source) {
                            this.originalSource = _.cloneDeep(source);
                            this.source = this.changeSource(source);
                        };
                        TableBuildingConstructor.prototype.getDataSource = function () {
                            return _.cloneDeep(this.originalSource);
                        };
                        TableBuildingConstructor.prototype.setColumn = function (columnSize) {
                            this.column = columnSize;
                        };
                        TableBuildingConstructor.prototype.setRow = function (rowSize) {
                            this.row = rowSize;
                        };
                        TableBuildingConstructor.prototype.cloneContextMenu = function (contextMenu) {
                            var self = this;
                            var menu = _.map(contextMenu, function (m) {
                                var action = function () {
                                    var element = self.container.data("context-opening");
                                    m.action(element, element.parent().data("cell-data")).done(function (result) {
                                        element.trigger("contextmenufinished", result);
                                    });
                                };
                                return new nts.uk.ui.contextmenu.ContextMenuItem(m.id, m.text, action, m.style);
                            });
                            this.contextMenu = new nts.uk.ui.contextmenu.ContextMenu(".menu" + this.id, menu);
                        };
                        TableBuildingConstructor.prototype.startBuildTable = function () {
                            var self = this;
                            self.container.empty();
                            var table = $("<table>", { "class": "ntsButtonTable ntsTable", id: this.id });
                            var tbody = $("<tbody>", { "class": "data-area" });
                            var colgroup = $("<colgroup>", { "class": "col-definition" });
                            for (var i = 0; i < this.column; i++) {
                                var col = $("<col>", { width: isNull(self.width) ? 100 : (self.width / self.column) });
                                col.appendTo(colgroup);
                            }
                            colgroup.appendTo(table);
                            tbody.appendTo(table);
                            table.appendTo(this.container);
                            this.drawTable();
                        };
                        TableBuildingConstructor.prototype.drawTable = function () {
                            var tbody = this.container.find("tbody");
                            tbody.empty();
                            for (var i = 0; i < this.row; i++) {
                                this.buildRow(tbody, i, this.id + "-row-" + i, this.source[i]);
                            }
                        };
                        TableBuildingConstructor.prototype.buildRow = function (container, dataIdx, id, rowData) {
                            var row = $("<tr>", { "class": "ntsRow ntsButtonTableRow", id: id, attr: { "data-idx": dataIdx, "data-id": id } });
                            for (var i = 0; i < this.column; i++) {
                                var idx = dataIdx * this.column + i;
                                this.buildCell(row, dataIdx, idx, id + "-cell-" + idx, isNull(rowData) || isNull(rowData[i]) ? {} : rowData[i], i);
                            }
                            row.appendTo(container);
                        };
                        TableBuildingConstructor.prototype.buildCell = function (container, rowIdx, dataIdx, id, data, columnIdx) {
                            var self = this;
                            var cell = $("<td>", { "class": "ntsCell ntsButtonTableCell", id: id, attr: { "row-idx": rowIdx, "data-idx": dataIdx, "data-id": id, "column-idx": columnIdx } });
                            var contextClass = "menu" + this.id;
                            var button = $("<button>", { "class": "ntsButtonCell ntsButtonTableButton " + contextClass, attr: { "data-idx": dataIdx, "data-id": id } });
                            button.text(isEmpty(data.text) ? "+" : data.text);
                            button.width(isNull(self.width) ? 90 : (self.width / self.column - 10));
                            if (!isEmpty(data.text)) {
                                button.addClass("ntsButtonCellData");
                                button.attr("title", data.tooltip);
                                button.data("empty-cell", false);
                                cell.data("cell-data", _.cloneDeep(data));
                            }
                            else {
                                button.data("empty-cell", true);
                            }
                            button.click(function (evt, ui) {
                                var c = $(this);
                                if (self.mode === "master") {
                                    if (_.isFunction(self.clickOnAction)) {
                                        self.clickOnAction(evt, c.parent().data("cell-data")).done(function (result) {
                                            self.setCellValue(c, result);
                                        });
                                    }
                                }
                                else {
                                    c.trigger("cellselecting");
                                }
                            });
                            button.bind("cellselecting", function (evt, data) {
                                var c = $(this);
                                if (!c.data("empty-cell")) {
                                    if (c.hasClass("ntsButtonCellSelected")) {
                                        c.removeClass("ntsButtonCellSelected");
                                        self.container.trigger("cellselectedchanging", { column: -1, row: -1, data: c.parent().data("cell-data") });
                                    }
                                    else {
                                        self.container.find(".ntsButtonCellSelected").removeClass("ntsButtonCellSelected");
                                        c.addClass("ntsButtonCellSelected");
                                        var oCell = c.parent();
                                        self.container.trigger("cellselectedchanging", { column: parseInt(oCell.attr("column-idx")), row: parseInt(oCell.attr("row-idx")), data: oCell.data("cell-data") });
                                    }
                                }
                                else {
                                    var oldSelected = self.container.find(".ntsButtonCellSelected");
                                    if (!nts.uk.util.isNullOrEmpty(oldSelected)) {
                                        var oCell = oldSelected.parent();
                                        self.container.trigger("cellselectedchanging", { column: parseInt(oCell.attr("column-idx")), row: parseInt(oCell.attr("row-idx")), data: oCell.data("cell-data") });
                                    }
                                    else {
                                        self.container.trigger("cellselectedchanging", { column: -1, row: -1, data: null });
                                    }
                                }
                            });
                            button.contextmenu(function () {
                                var c = $(this);
                                var enable = c.data("empty-cell");
                                if (self.mode === "master") {
                                    self.contextMenu.setEnable(!enable);
                                    if (enable) {
                                        return false;
                                    }
                                }
                                else {
                                    if (!isEmpty(self.disableMenuOnDataNotSet)) {
                                        _.forEach(self.disableMenuOnDataNotSet, function (target) {
                                            self.contextMenu.setEnableItem(!enable, target);
                                        });
                                    }
                                }
                                self.container.data("context-opening", button);
                            });
                            button.bind("contextmenufinished", function (evt, result) {
                                var c = $(this);
                                self.setCellValue(c, result);
                            });
                            button.appendTo(cell);
                            cell.appendTo(container);
                        };
                        TableBuildingConstructor.prototype.setCellValue = function (button, data) {
                            var cell = button.parent();
                            if (!isNull(data) && !isEmpty(data.text)) {
                                cell.data("cell-data", _.cloneDeep(data));
                                button.text(data.text);
                                button.attr("title", data.tooltip);
                                button.addClass("ntsButtonCellData");
                                button.data("empty-cell", false);
                            }
                            else {
                                cell.data("cell-data", null);
                                button.text("+");
                                button.removeAttr("title");
                                button.removeClass("ntsButtonCellData");
                                button.data("empty-cell", true);
                                data = {};
                            }
                            var rowIdx = parseInt(cell.attr("row-idx"));
                            var columnIdx = parseInt(cell.attr("column-idx"));
                            if (nts.uk.util.isNullOrUndefined(this.source[rowIdx])) {
                                this.source[rowIdx] = [];
                            }
                            this.source[rowIdx][columnIdx] = data;
                            this.updateOriginalSource();
                        };
                        TableBuildingConstructor.prototype.updateOriginalSource = function () {
                            this.originalSource = this.toFlatSource();
                            this.container.trigger("sourcechanging", { source: this.cloneSource() });
                        };
                        TableBuildingConstructor.prototype.toFlatSource = function () {
                            var result = [];
                            _.forEach(this.source, function (row) {
                                _.forEach(row, function (cell) {
                                    result.push(_.cloneDeep(cell));
                                });
                            });
                            return result;
                        };
                        TableBuildingConstructor.prototype.cloneSource = function () {
                            return this.getDataSource();
                        };
                        return TableBuildingConstructor;
                    }());
                    var TableButtonEntity = (function () {
                        function TableButtonEntity(rowId, columnId, viewText, tooltipText) {
                            this.rowId = rowId;
                            this.columnId = columnId;
                            this.viewText = viewText;
                            this.tooltipText = tooltipText;
                        }
                        TableButtonEntity.prototype.setRowId = function (rowId) {
                            this.rowId = rowId;
                        };
                        TableButtonEntity.prototype.setColumnId = function (columnId) {
                            this.columnId = columnId;
                        };
                        TableButtonEntity.prototype.setViewText = function (viewText) {
                            this.viewText = viewText;
                        };
                        TableButtonEntity.prototype.setTooltipText = function (tooltipText) {
                            this.tooltipText = tooltipText;
                        };
                        TableButtonEntity.prototype.getRowId = function () {
                            return this.rowId;
                        };
                        TableButtonEntity.prototype.getColumnId = function () {
                            return this.columnId;
                        };
                        TableButtonEntity.prototype.getViewText = function (rowId) {
                            return this.viewText;
                        };
                        TableButtonEntity.prototype.getTooltipText = function () {
                            return this.tooltipText;
                        };
                        return TableButtonEntity;
                    }());
                    ntsButtonTable.TableButtonEntity = TableButtonEntity;
                })(ntsButtonTable || (ntsButtonTable = {}));
            })(jqueryExtentions = ui_23.jqueryExtentions || (ui_23.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_24) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Tree binding handler
                 */
                var NtsTreeDragAndDropBindingHandler = (function () {
                    /**
                     * Constructor.
                     */
                    function NtsTreeDragAndDropBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsTreeDragAndDropBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var ROW_HEIGHT = 30;
                        var HEADER_HEIGHT = 24;
                        // Get data. 
                        var data = valueAccessor();
                        var options = ko.unwrap(data.dataSource !== undefined ? data.dataSource : data.options);
                        var optionsValue = ko.unwrap(data.primaryKey !== undefined ? data.primaryKey : data.optionsValue);
                        var optionsText = ko.unwrap(data.primaryText !== undefined ? data.primaryText : data.optionsText);
                        var optionsChild = ko.unwrap(data.childDataKey !== undefined ? data.childDataKey : data.optionsChild);
                        var multiple = data.multiple != undefined ? ko.unwrap(data.multiple) : false;
                        var selectedValues = ko.unwrap(data.selectedValues);
                        var singleValue = ko.unwrap(data.value);
                        var rows = ko.unwrap(data.rows);
                        var selectOnParent = data.selectOnParent != undefined ? ko.unwrap(data.selectOnParent) : false;
                        var allowOtherTreeNode = data.receiveOtherTreeNode !== undefined ? ko.unwrap(data.receiveOtherTreeNode) : false;
                        var enable = data.enable !== undefined ? ko.unwrap(data.enable) : true;
                        var height = ko.unwrap(data.height !== undefined ? data.height : 0);
                        var width = ko.unwrap(data.width !== undefined ? data.width : 0);
                        var maxDeepLeaf = ko.unwrap(data.maxDeepLeaf !== undefined ? data.maxDeepLeaf : 10);
                        var maxChildInNode = ko.unwrap(data.maxChildInNode !== undefined ? data.maxChildInNode : 999);
                        var customValidate = data.customValidate;
                        if (!nts.uk.util.isNullOrEmpty(rows)) {
                            height = rows * ROW_HEIGHT;
                        }
                        var $tree = $(element);
                        //            let template = "{{if ${"+optionsValue+"}.indexOf('1') >= 0}} <img src='http://igniteui.com/images/samples/tree/book.png'>" + 
                        //                " {{elseif ${"+optionsValue+"}.indexOf('2') >= 0}}<img src='http://igniteui.com/images/samples/tree/coins.png'>" +
                        //                "{{else}}<img src='http://igniteui.com/images/samples/tree/documents-folder.png'/>{{/if}}${"+optionsValue+"}"
                        // Init ig grid.
                        $tree.igTree({
                            width: width,
                            height: height,
                            dataSource: _.cloneDeep(options),
                            initialExpandDepth: 0,
                            tabIndex: -1,
                            checkboxMode: !multiple ? "off" : selectOnParent ? "triState" : "biState",
                            singleBranchExpand: false,
                            pathSeparator: '_',
                            bindings: {
                                textKey: optionsText,
                                valueKey: optionsValue,
                                childDataProperty: optionsChild
                            },
                            dragAndDrop: true,
                            dragAndDropSettings: {
                                allowDrop: allowOtherTreeNode,
                                customDropValidation: function (element) {
                                    var dragInfor = $tree.data("dragInfor");
                                    var mousePosition = $tree.data("mousePosition");
                                    // Validates the drop target
                                    var droppableNode = $(this);
                                    if (droppableNode.prop("tagName").toLowerCase() !== "li") {
                                        droppableNode = droppableNode.closest("li");
                                    }
                                    var isOutTarget = mousePosition.top < droppableNode.offset().top
                                        || mousePosition.top > droppableNode.offset().top + droppableNode.height();
                                    var dragParent = $tree.igTree("parentNode", element);
                                    var targetParent = $tree.igTree("parentNode", droppableNode);
                                    var targetNode = $tree.igTree("nodeFromElement", droppableNode);
                                    if (!isOutTarget) {
                                        if (!nts.uk.util.isNullOrEmpty(targetNode.path)) {
                                            var targetDeep = (targetNode.path.match(/_/g) || []).length;
                                            if (targetDeep + 1 >= maxDeepLeaf) {
                                                return false;
                                            }
                                        }
                                        else {
                                            return false;
                                        }
                                        var targetNodeChildren = $tree.igTree("children", droppableNode);
                                        if (targetNodeChildren.length >= maxChildInNode) {
                                            return false;
                                        }
                                    }
                                    else if (targetParent !== null && !targetParent.is(dragParent)) {
                                        targetNode = $tree.igTree("nodeFromElement", targetParent);
                                        if (!nts.uk.util.isNullOrEmpty(targetNode.path)) {
                                            var targetDeep = (targetNode.path.match(/_/g) || []).length;
                                            if (targetDeep + 1 >= maxDeepLeaf) {
                                                return false;
                                            }
                                        }
                                        else {
                                            return false;
                                        }
                                        var targetNodeChildren = $tree.igTree("children", targetParent);
                                        if (targetNodeChildren.length >= maxChildInNode) {
                                            return false;
                                        }
                                    }
                                    var customValidateResult = nts.uk.util.isNullOrUndefined(customValidate) ? true : customValidate();
                                    if (customValidateResult === false) {
                                        return false;
                                    }
                                    return true;
                                }
                            },
                            dragStart: function (evt, ui) {
                                $tree.data("dragInfor", {
                                    helper: ui.helper,
                                    targetNodePath: ui.path,
                                    mousePosition: ui.position
                                });
                            },
                            selectionChanged: function (evt, ui) {
                                if (ko.unwrap(data.multiple)) {
                                    if (ko.isObservable(data.selectedValues)) {
                                        var selectedNodes = $tree.igTree("checkedNodes");
                                        var checkedNodes = _.map(selectedNodes, function (s) {
                                            return s.data[optionsValue];
                                        });
                                        if (ui.selectedNodes.length > 0) {
                                            checkedNodes.push(ui.selectedNodes[0].data[optionsValue]);
                                        }
                                        data.selectedValues(_.uniq(checkedNodes));
                                    }
                                }
                                else {
                                    if (ko.isObservable(data.value)) {
                                        var selectedRows = ui.selectedNodes;
                                        data.value(selectedRows.length <= 0 ? undefined : selectedRows[0].data[optionsValue]);
                                    }
                                }
                            },
                            nodeCheckstateChanged: function (evt, ui) {
                                if (ko.isObservable(data.selectedValues)) {
                                    if (ko.isObservable(data.selectedValues)) {
                                        var selectedNodes = $tree.igTree("checkedNodes");
                                        data.selectedValues(_.map(selectedNodes, function (s) {
                                            return s.data[optionsValue];
                                        }));
                                    }
                                }
                            }
                        });
                        $tree.mousemove(function (event) {
                            var pageCoords = { top: event.pageY, left: event.pageX };
                            $tree.data("mousePosition", pageCoords);
                        });
                        $tree.setupSearchScroll("igTree");
                    };
                    /**
                     * Update
                     */
                    NtsTreeDragAndDropBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data.
                        var data = valueAccessor();
                        var options = ko.unwrap(data.dataSource !== undefined ? data.dataSource : data.options);
                        var selectedValues = ko.unwrap(data.selectedValues);
                        var singleValue = ko.unwrap(data.value);
                        var $tree = $(element);
                        var multiple = data.multiple != undefined ? ko.unwrap(data.multiple) : false;
                        // Update datasource.
                        var originalSource = $tree.igTree('option', 'dataSource').__ds;
                        if (!_.isEqual(originalSource, options)) {
                            $tree.igTree("option", "dataSource", _.cloneDeep(options));
                            $tree.igTree("dataBind");
                        }
                        // Clear selection.
                        if (nts.uk.util.isNullOrEmpty(selectedValues) && nts.uk.util.isNullOrUndefined(singleValue)) {
                            $tree.ntsTreeDrag("deselectAll");
                            $tree.find("a").removeClass("ui-state-active");
                        }
                        else {
                            if (multiple) {
                                $tree.find("a").removeClass("ui-state-active");
                                selectedValues.forEach(function (val) {
                                    var $node = $tree.igTree("nodesByValue", val);
                                    $node.find("a:first").addClass("ui-state-active");
                                    var $checkbox = $node.find("span[data-role=checkbox]:first").find(".ui-icon-check");
                                    if ($tree.igTree("checkState", $node) === "off") {
                                        $tree.igTree("toggleCheckstate", $node);
                                    }
                                });
                            }
                            else {
                                $tree.igTree("select", $tree.igTree("nodesByValue", singleValue));
                            }
                        }
                    };
                    return NtsTreeDragAndDropBindingHandler;
                }());
                ko.bindingHandlers['ntsTreeDragAndDrop'] = new NtsTreeDragAndDropBindingHandler();
            })(koExtentions = ui_24.koExtentions || (ui_24.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_25) {
            var exTable;
            (function (exTable_1) {
                var NAMESPACE = "extable";
                var DISTANCE = 3;
                var SPACE = 10;
                var HEADER = "xheader";
                var HEADER_PRF = "ex-header-";
                var BODY_PRF = "ex-body-";
                var HEADER_TBL_PRF = "extable-header-";
                var BODY_TBL_PRF = "extable-body-";
                var H_BTN_CLS = "ex-height-btn";
                var LEFTMOST = "leftmost";
                var MIDDLE = "middle";
                var DETAIL = "detail";
                var VERTICAL_SUM = "vert-sum";
                var HORIZONTAL_SUM = "horz-sum";
                var LEFT_HORZ_SUM = "left-horz-sum";
                var CRUD = "crud";
                var ADD_ROW = "add-row";
                var DEL_ROWS = "delete-rows";
                var H_BTN_HEIGHT = "24px";
                // Body height setting mode
                var DYNAMIC = "dynamic";
                var FIXED = "fixed";
                // Update mode
                var COPY_PASTE = "copyPaste";
                var EDIT = "edit";
                var STICK = "stick";
                var Connector = {};
                var ExTable = (function () {
                    function ExTable($container, options) {
                        // dynamic or fixed
                        this.bodyHeightSetMode = DYNAMIC;
                        this.windowXOccupation = 0;
                        this.windowYOccupation = 0;
                        this.updateMode = EDIT;
                        this.pasteOverWrite = true;
                        this.stickOverWrite = true;
                        this.$container = $container;
                        this.$commander = options.primaryTable;
                        this.$follower = options.secondaryTable;
                        this.bodyRowHeight = options.bodyRowHeight;
                        this.headerHeight = options.headerHeight;
                        this.bodyHeight = options.bodyHeight;
                        this.horzSumHeaderHeight = options.horizontalSumHeaderHeight;
                        this.horzSumBodyHeight = options.horizontalSumBodyHeight;
                        this.horzSumBodyRowHeight = options.horizontalSumBodyRowHeight;
                        this.areaResize = options.areaResize;
                        this.heightSetter = options.heightSetter;
                        this.bodyHeightSetMode = options.bodyHeightMode;
                        this.windowXOccupation = options.windowXOccupation;
                        this.windowYOccupation = options.windowYOccupation;
                        if (options.updateMode) {
                            this.updateMode = options.updateMode;
                        }
                        this.pasteOverWrite = options.pasteOverWrite;
                        this.stickOverWrite = options.stickOverWrite;
                        this.viewMode = options.viewMode;
                        this.determination = options.determination;
                        this.features = options.features;
                        this.$container.data(internal.X_OCCUPY, this.windowXOccupation);
                        this.$container.data(internal.Y_OCCUPY, this.windowYOccupation);
                        helper.makeConnector();
                    }
                    ExTable.prototype.setUpdateMode = function (updateMode) {
                        this.updateMode = updateMode;
                        this.detailContent.updateMode = updateMode;
                    };
                    ExTable.prototype.setViewMode = function (mode) {
                        this.viewMode = mode;
                        this.detailContent.viewMode = mode;
                    };
                    ExTable.prototype.LeftmostHeader = function (leftmostHeader) {
                        this.leftmostHeader = _.cloneDeep(leftmostHeader);
                        this.setHeaderClass(this.leftmostHeader, LEFTMOST);
                        return this;
                    };
                    ExTable.prototype.LeftmostContent = function (leftmostContent) {
                        this.leftmostContent = _.cloneDeep(leftmostContent);
                        this.setBodyClass(this.leftmostContent, LEFTMOST);
                        this.leftmostContent.updateMode = this.updateMode;
                        if (feature.isEnable(this.features, feature.UPDATING)) {
                            this.leftmostHeader.width = parseInt(this.leftmostHeader.width) + controls.CHECKBOX_COL_WIDTH + "px";
                            controls.addCheckBoxDef([this.leftmostHeader, this.leftmostContent]);
                        }
                        return this;
                    };
                    ExTable.prototype.MiddleHeader = function (middleHeader) {
                        this.middleHeader = _.cloneDeep(middleHeader);
                        this.setHeaderClass(this.middleHeader, MIDDLE);
                        this.middleHeader.updateMode = this.updateMode;
                        return this;
                    };
                    ExTable.prototype.MiddleContent = function (middleContent) {
                        this.middleContent = _.cloneDeep(middleContent);
                        this.setBodyClass(this.middleContent, MIDDLE);
                        return this;
                    };
                    ExTable.prototype.DetailHeader = function (detailHeader) {
                        this.detailHeader = _.cloneDeep(detailHeader);
                        this.setHeaderClass(this.detailHeader, DETAIL);
                        return this;
                    };
                    ExTable.prototype.DetailContent = function (detailContent) {
                        this.detailContent = _.cloneDeep(detailContent);
                        this.setBodyClass(this.detailContent, DETAIL);
                        this.detailContent.updateMode = this.updateMode;
                        this.detailContent.viewMode = this.viewMode;
                        return this;
                    };
                    ExTable.prototype.VerticalSumHeader = function (verticalSumHeader) {
                        this.verticalSumHeader = _.cloneDeep(verticalSumHeader);
                        this.setHeaderClass(this.verticalSumHeader, VERTICAL_SUM);
                        return this;
                    };
                    ExTable.prototype.VerticalSumContent = function (verticalSumContent) {
                        this.verticalSumContent = _.cloneDeep(verticalSumContent);
                        this.setBodyClass(this.verticalSumContent, VERTICAL_SUM);
                        return this;
                    };
                    ExTable.prototype.LeftHorzSumHeader = function (leftHorzSumHeader) {
                        this.leftHorzSumHeader = _.cloneDeep(leftHorzSumHeader);
                        this.setHeaderClass(this.leftHorzSumHeader, LEFT_HORZ_SUM);
                        return this;
                    };
                    ExTable.prototype.LeftHorzSumContent = function (leftHorzSumContent) {
                        this.leftHorzSumContent = _.cloneDeep(leftHorzSumContent);
                        this.setBodyClass(this.leftHorzSumContent, LEFT_HORZ_SUM);
                        return this;
                    };
                    ExTable.prototype.HorizontalSumHeader = function (horizontalSumHeader) {
                        this.horizontalSumHeader = _.cloneDeep(horizontalSumHeader);
                        this.setHeaderClass(this.horizontalSumHeader, HORIZONTAL_SUM);
                        return this;
                    };
                    ExTable.prototype.HorizontalSumContent = function (horizontalSumContent) {
                        this.horizontalSumContent = _.cloneDeep(horizontalSumContent);
                        this.setBodyClass(this.horizontalSumContent, HORIZONTAL_SUM);
                        return this;
                    };
                    ExTable.prototype.setHeaderClass = function (options, part) {
                        options.tableClass = HEADER_TBL_PRF + part;
                        options.containerClass = HEADER_PRF + part;
                    };
                    ExTable.prototype.setBodyClass = function (options, part) {
                        options.tableClass = BODY_TBL_PRF + part;
                        options.containerClass = BODY_PRF + part;
                    };
                    /**
                     * Create.
                     */
                    ExTable.prototype.create = function () {
                        var self = this;
                        var left = "0px";
                        var top = "0px";
                        if (!self.satisfyPrebuild())
                            return;
                        self.headers = _.filter([self.leftmostHeader, self.middleHeader, self.detailHeader, self.verticalSumHeader], function (h) {
                            return !uk.util.isNullOrUndefined(h);
                        });
                        self.bodies = _.filter([self.leftmostContent, self.middleContent, self.detailContent, self.verticalSumContent], function (b) {
                            return !uk.util.isNullOrUndefined(b);
                        });
                        // Get part widths
                        var widthParts, gridHeight;
                        storage.area.getPartWidths(self.$container).ifPresent(function (parts) {
                            widthParts = JSON.parse(parts);
                            return null;
                        });
                        // Get grid height
                        storage.tableHeight.get(self.$container).ifPresent(function (height) {
                            gridHeight = JSON.parse(height);
                            return null;
                        });
                        self.$container.addClass(NAMESPACE);
                        self.$container.data(NAMESPACE, self);
                        var headerWrappers = [], bodyWrappers = [];
                        for (var i = 0; i < self.headers.length; i++) {
                            if (!uk.util.isNullOrUndefined(self.headers[i])) {
                                self.headers[i].overflow = "hidden";
                                self.headers[i].height = self.headerHeight;
                                self.headers[i].isHeader = true;
                                self.setWrapperWidth(self.headers[i], widthParts);
                                var $headerWrapper = render.createWrapper("0px", left, self.headers[i]);
                                self.$container.append($headerWrapper.addClass(HEADER));
                                render.process($headerWrapper, self.headers[i]);
                                left = parseInt(left) + parseInt(self.headers[i].width) + DISTANCE + "px";
                                top = parseInt(self.headers[i].height) + DISTANCE + "px";
                                headerWrappers.push($headerWrapper);
                            }
                        }
                        left = "0px";
                        for (var i = 0; i < self.bodies.length; i++) {
                            var $bodyWrapper = void 0;
                            if (!uk.util.isNullOrUndefined(self.bodies[i])) {
                                self.bodies[i].rowHeight = self.bodyRowHeight;
                                self.bodies[i].height = gridHeight ? gridHeight : self.bodyHeight;
                                self.bodies[i].width = self.headers[i].width;
                                self.setWrapperWidth(self.bodies[i], widthParts);
                                $bodyWrapper = render.createWrapper(top, left, self.bodies[i]);
                                self.$container.append($bodyWrapper);
                                if (i === self.bodies.length - 1 && !uk.util.isNullOrUndefined($bodyWrapper)) {
                                    self.bodies[i].overflow = "scroll";
                                    self.bodies[i].width = $bodyWrapper.width() + helper.getScrollWidth();
                                    self.bodies[i].height = $bodyWrapper.height() + helper.getScrollWidth();
                                    scroll.syncDoubDirVerticalScrolls(_.concat(bodyWrappers, $bodyWrapper));
                                }
                                else if (i > 0 && i < self.bodies.length - 1) {
                                    self.bodies[i].overflowX = "scroll";
                                    self.bodies[i].overflowY = "hidden";
                                    self.bodies[i].height = $bodyWrapper.height() + helper.getScrollWidth();
                                    scroll.bindVertWheel($bodyWrapper);
                                }
                                else {
                                    scroll.bindVertWheel($bodyWrapper);
                                }
                                render.process($bodyWrapper, self.bodies[i]);
                                left = parseInt(left) + parseInt(self.bodies[i].width) + DISTANCE + "px";
                                if (self.bodies[i].containerClass !== BODY_PRF + DETAIL) {
                                    scroll.syncHorizontalScroll(headerWrappers[i], $bodyWrapper);
                                }
                                bodyWrappers.push($bodyWrapper);
                                if (feature.isEnable(self.headers[i].features, feature.COLUMN_RESIZE)) {
                                    new resize.ColumnAdjuster(headerWrappers[i].find("table"), $bodyWrapper.find("table")).handle();
                                }
                            }
                        }
                        self.createHorzSums();
                        self.setupCrudArea();
                        self.generalSettings(headerWrappers, bodyWrappers);
                    };
                    /**
                     * Create horizontal sums.
                     */
                    ExTable.prototype.createHorzSums = function () {
                        var self = this;
                        var $detailHeader = self.$container.find("." + HEADER_PRF + DETAIL);
                        var $detailContent = self.$container.find("." + BODY_PRF + DETAIL);
                        var headerTop = $detailHeader.height() + $detailContent.height() + DISTANCE + helper.getScrollWidth() + SPACE;
                        var bodyTop = headerTop + parseInt(self.horzSumHeaderHeight) + DISTANCE + "px";
                        var sumPosLeft = $detailHeader.css("left");
                        var leftHorzWidth = parseInt(sumPosLeft) - DISTANCE;
                        var $leftSumHeaderWrapper, $leftSumContentWrapper, $sumHeaderWrapper, $sumContentWrapper;
                        // Items summary
                        if (self.leftHorzSumHeader) {
                            self.leftHorzSumHeader.height = self.horzSumHeaderHeight;
                            self.leftHorzSumHeader.width = leftHorzWidth;
                            self.leftHorzSumHeader.overflow = "hidden";
                            self.leftHorzSumHeader.isHeader = true;
                            $leftSumHeaderWrapper = render.createWrapper(headerTop + "px", "0xp", self.leftHorzSumHeader);
                            self.$container.append($leftSumHeaderWrapper.addClass(HEADER));
                            render.process($leftSumHeaderWrapper, self.leftHorzSumHeader);
                        }
                        if (self.leftHorzSumContent) {
                            self.leftHorzSumContent.rowHeight = self.horzSumBodyRowHeight;
                            self.leftHorzSumContent.height = parseInt(self.horzSumBodyHeight) + helper.getScrollWidth() + "px";
                            self.leftHorzSumContent.width = leftHorzWidth;
                            $leftSumContentWrapper = render.createWrapper(bodyTop, "0px", self.leftHorzSumContent);
                            self.leftHorzSumContent.overflowX = "scroll";
                            self.leftHorzSumContent.overflowY = "hidden";
                            self.$container.append($leftSumContentWrapper);
                            render.process($leftSumContentWrapper, self.leftHorzSumContent);
                            scroll.bindVertWheel($leftSumContentWrapper);
                        }
                        // Main summary
                        if (self.horizontalSumHeader) {
                            self.horizontalSumHeader.height = self.horzSumHeaderHeight;
                            self.horizontalSumHeader.width = $detailHeader.width();
                            self.horizontalSumHeader.overflow = "hidden";
                            self.horizontalSumHeader.isHeader = true;
                            $sumHeaderWrapper = render.createWrapper(headerTop + "px", sumPosLeft, self.horizontalSumHeader);
                            self.$container.append($sumHeaderWrapper.addClass(HEADER));
                            render.process($sumHeaderWrapper, self.horizontalSumHeader);
                        }
                        if (self.horizontalSumContent) {
                            self.horizontalSumContent.rowHeight = self.horzSumBodyRowHeight;
                            self.horizontalSumContent.height = parseInt(self.horzSumBodyHeight) + helper.getScrollWidth() + "px";
                            self.horizontalSumContent.width = $detailContent.width();
                            $sumContentWrapper = render.createWrapper(bodyTop, sumPosLeft, self.horizontalSumContent);
                            self.horizontalSumContent.overflow = "scroll";
                            self.$container.append($sumContentWrapper);
                            render.process($sumContentWrapper, self.horizontalSumContent);
                            scroll.syncHorizontalScroll($leftSumHeaderWrapper, $leftSumContentWrapper);
                            scroll.syncDoubDirVerticalScrolls([$leftSumContentWrapper, $sumContentWrapper]);
                        }
                        if (self.$commander) {
                            self.$commander.on(events.MOUSEIN_COLUMN, function (evt, colIndex) {
                                helper.highlightColumn(self.$container, colIndex);
                            });
                            self.$commander.on(events.MOUSEOUT_COLUMN, function (evt, colIndex) {
                                helper.unHighlightColumn(self.$container, colIndex);
                            });
                            var pHorzHeader = self.$commander.find("." + HEADER_PRF + HORIZONTAL_SUM);
                            var pHorzBody = self.$commander.find("." + BODY_PRF + HORIZONTAL_SUM);
                            var stream = _.concat(self.$commander.find("div[class*='" + DETAIL + "']").toArray().map(function (val) {
                                return $(val);
                            }), pHorzHeader, pHorzBody, $detailHeader, $detailContent, $sumHeaderWrapper, $sumContentWrapper);
                            scroll.syncDoubDirHorizontalScrolls(stream);
                        }
                        else if (self.$follower) {
                        }
                        else {
                            scroll.syncDoubDirHorizontalScrolls([$detailHeader, $detailContent, $sumHeaderWrapper, $sumContentWrapper]);
                        }
                    };
                    /**
                     * Setup crud area.
                     */
                    ExTable.prototype.setupCrudArea = function () {
                        var self = this;
                        var updateF = feature.find(self.features, feature.UPDATING);
                        if (updateF) {
                            var $area = $("<div/>").addClass(NAMESPACE + "-" + CRUD);
                            var $rowAdd = $("<button/>").addClass(NAMESPACE + "-" + ADD_ROW).on(events.CLICK_EVT, function () {
                                update.insertNewRow(self.$container);
                            }).appendTo($area);
                            var $rowDel = $("<button/>").addClass(NAMESPACE + "-" + DEL_ROWS).on(events.CLICK_EVT, function () {
                                update.deleteRows(self.$container);
                            }).appendTo($area);
                            var dftRowAddTxt = "新規行の追加";
                            var dftRowDelTxt = "行の削除";
                            if (updateF.addNew) {
                                $rowAdd.addClass(updateF.addNew.buttonClass || "proceed").text(updateF.addNew.buttonText || dftRowAddTxt);
                            }
                            else {
                                $rowAdd.addClass("proceed").text(dftRowAddTxt);
                            }
                            if (updateF.delete) {
                                $rowDel.addClass(updateF.delete.buttonClass || "danger").text(updateF.delete.buttonText || dftRowDelTxt);
                            }
                            else {
                                $rowDel.addClass("danger").text(dftRowDelTxt);
                            }
                            self.$container.before($area);
                        }
                    };
                    /**
                     * General settings.
                     */
                    ExTable.prototype.generalSettings = function (headerWrappers, bodyWrappers) {
                        var self = this;
                        self.$container.on(events.BODY_HEIGHT_CHANGED, resize.onBodyHeightChanged);
                        //            if (self.heightSetter && self.heightSetter.showBodyHeightButton) {
                        //                
                        //                let $lastHeader = headerWrappers[headerWrappers.length - 1];
                        //                let btnPosTop = $lastHeader.height() - parseInt(H_BTN_HEIGHT) - DISTANCE;
                        //                let btnPosLeft = parseInt($lastHeader.css("left")) + $lastHeader.outerWidth();
                        //                let $heightSetBtn = $("<button/>").addClass(H_BTN_CLS)
                        //                    .css({ position: "absolute", height: H_BTN_HEIGHT, top: btnPosTop + "px", left: btnPosLeft + "px" })
                        //                    .text("H").on(events.CLICK_EVT, self.heightSetter.click);
                        //                $lastHeader.after($heightSetBtn);
                        //            }
                        resize.fitWindowWidth(self.$container);
                        $(window).on(events.RESIZE, $.proxy(resize.fitWindowWidth, self, self.$container));
                        var horzSumExists = !uk.util.isNullOrUndefined(self.horizontalSumHeader);
                        if (self.bodyHeightSetMode === DYNAMIC) {
                            resize.fitWindowHeight(self.$container, bodyWrappers, horzSumExists);
                            $(window).on(events.RESIZE, $.proxy(resize.fitWindowHeight, self, self.$container, bodyWrappers, horzSumExists));
                        }
                        else {
                            var cHeight_1 = 0;
                            var stream = self.$container.find("div[class*='" + DETAIL + "'], div[class*='" + LEFT_HORZ_SUM + "']");
                            stream.each(function () {
                                cHeight_1 += $(this).height();
                            });
                            if (stream.length === 4) {
                                cHeight_1 += (SPACE + DISTANCE);
                            }
                            self.$container.height(cHeight_1 + SPACE);
                        }
                        if (self.$follower) {
                            self.$follower.on(events.COMPLETED, function () {
                                if (self.areaResize) {
                                    new resize.AreaAdjuster(self.$container, headerWrappers, bodyWrappers, self.$follower).handle();
                                    self.$container.on(events.AREA_RESIZE_END, $.proxy(resize.onAreaComplete, self));
                                }
                                var formerWidth = 0, latterWidth = 0;
                                _.forEach(headerWrappers, function (header) {
                                    if (header.hasClass(HEADER_PRF + LEFTMOST)) {
                                        formerWidth += header.width();
                                    }
                                    else if (header.hasClass(HEADER_PRF + MIDDLE)) {
                                        formerWidth += header.width() + DISTANCE;
                                    }
                                    else if (header.hasClass(HEADER_PRF + DETAIL)) {
                                        latterWidth += header.width();
                                    }
                                });
                                var $lm = self.$follower.find("div[class*='" + LEFTMOST + "']");
                                var diff = formerWidth - parseInt($lm[0].style.width);
                                $lm.width(formerWidth);
                                var $depDetailHeader = self.$follower.find("." + HEADER_PRF + DETAIL);
                                $depDetailHeader.width(latterWidth);
                                var $depDetail = self.$follower.find("." + BODY_PRF + DETAIL);
                                var left = parseInt($depDetail.css("left")) + diff;
                                $depDetailHeader.css("left", left);
                                $depDetail.css("left", left);
                                $depDetail.width(latterWidth + helper.getScrollWidth());
                                var depLmHeader = _.filter($lm, function (e) {
                                    return $(e).hasClass(HEADER_PRF + LEFTMOST);
                                });
                                resize.saveSizes(self.$follower, $(depLmHeader[0]), $depDetailHeader, formerWidth, latterWidth);
                            });
                        }
                        else if (self.areaResize) {
                            new resize.AreaAdjuster(self.$container, headerWrappers, bodyWrappers, self.$follower).handle();
                            self.$container.on(events.AREA_RESIZE_END, $.proxy(resize.onAreaComplete, self));
                        }
                        storage.area.init(self.$container, headerWrappers);
                        storage.tableHeight.init(self.$container);
                        // Edit done
                        update.editDone(self.$container);
                        $(document).on(events.CLICK_EVT, function (evt) {
                            update.outsideClick(self.$container, $(evt.target));
                        });
                        events.onModify(self.$container);
                        selection.checkUp(self.$container);
                        copy.on(self.$container.find("." + BODY_PRF + DETAIL), self.updateMode);
                        self.$container.on(events.OCCUPY_UPDATE, function (evt, reserve) {
                            if (self.bodyHeightSetMode === FIXED)
                                return;
                            if (reserve && reserve.x) {
                                self.$container.data(internal.X_OCCUPY, reserve.x);
                                resize.fitWindowWidth(self.$container);
                            }
                            if (reserve && reserve.y) {
                                self.$container.data(internal.Y_OCCUPY, reserve.y);
                                resize.fitWindowHeight(self.$container, bodyWrappers, horzSumExists);
                            }
                        });
                        if (self.$commander) {
                            events.trigger(self.$container, events.COMPLETED);
                        }
                    };
                    /**
                     * Satisfy prebuild.
                     */
                    ExTable.prototype.satisfyPrebuild = function () {
                        if (uk.util.isNullOrUndefined(this.$container) || uk.util.isNullOrUndefined(this.headerHeight)
                            || uk.util.isNullOrUndefined(this.bodyHeight) || uk.util.isNullOrUndefined(this.bodyRowHeight)
                            || uk.util.isNullOrUndefined(this.horzSumBodyRowHeight))
                            return false;
                        return true;
                    };
                    /**
                     * Set wrapper width.
                     */
                    ExTable.prototype.setWrapperWidth = function (options, widthParts) {
                        if (!widthParts)
                            return;
                        var width = widthParts[options.containerClass];
                        if (!uk.util.isNullOrUndefined(width)) {
                            options.width = width + "px";
                        }
                    };
                    return ExTable;
                }());
                exTable_1.ExTable = ExTable;
                var render;
                (function (render) {
                    render.HIGHLIGHT_CLS = "highlight";
                    render.CHILD_CELL_CLS = "child-cell";
                    render.COL_ICON_CLS = "column-icon";
                    /**
                     * Process.
                     */
                    function process($container, options, isUpdate) {
                        var levelStruct = synthesizeHeaders(options);
                        options.levelStruct = levelStruct;
                        if (options.isHeader) {
                            if (Object.keys(levelStruct).length > 1) {
                                groupHeader($container, options, isUpdate);
                                return;
                            }
                        }
                        else {
                            options.float = options.float === false ? false : true;
                        }
                        table($container, options, isUpdate);
                    }
                    render.process = process;
                    /**
                     * Group header.
                     */
                    function groupHeader($container, options, isUpdate) {
                        var $table = $("<table><tbody></tbody></table>").addClass(options.tableClass)
                            .css({ position: "relative", tableLayout: "fixed", width: "100%", borderCollapse: "separate" })
                            .appendTo($container);
                        var $tbody = $table.find("tbody");
                        if (!isUpdate) {
                            $container.css({ height: options.height, width: options.width });
                        }
                        if (!uk.util.isNullOrUndefined(options.overflow))
                            $container.css("overflow", options.overflow);
                        else if (!uk.util.isNullOrUndefined(options.overflowX) && !uk.util.isNullOrUndefined(options.overflowY)) {
                            $container.css("overflow-x", options.overflowX);
                            $container.css("overflow-y", options.overflowY);
                        }
                        var $colGroup = $("<colgroup/>").insertBefore($tbody);
                        generateColGroup($colGroup, options.columns);
                        var painter = new GroupHeaderPainter(options);
                        painter.rows($tbody);
                    }
                    /**
                     * Generate column group.
                     */
                    function generateColGroup($colGroup, columns) {
                        _.forEach(columns, function (col) {
                            if (!uk.util.isNullOrUndefined(col.group)) {
                                generateColGroup($colGroup, col.group);
                                return;
                            }
                            var $col = $("<col/>").width(col.width);
                            $colGroup.append($col);
                            if (col.visible === false)
                                $col.hide();
                        });
                    }
                    /**
                     * Table.
                     */
                    function table($container, options, isUpdate) {
                        var $table = $("<table><tbody></tbody></table>").addClass(options.tableClass)
                            .css({ position: "relative", tableLayout: "fixed", width: "100%", borderCollapse: "separate" })
                            .appendTo($container);
                        var $tbody = $table.find("tbody");
                        if (!isUpdate) {
                            $container.css({ height: options.height, width: options.width });
                        }
                        if (!uk.util.isNullOrUndefined(options.overflow))
                            $container.css("overflow", options.overflow);
                        else if (!uk.util.isNullOrUndefined(options.overflowX) && !uk.util.isNullOrUndefined(options.overflowY)) {
                            $container.css("overflow-x", options.overflowX);
                            $container.css("overflow-y", options.overflowY);
                        }
                        var $colGroup = $("<colgroup/>").insertBefore($tbody);
                        generateColGroup($colGroup, options.columns);
                        var dataSource;
                        if (!uk.util.isNullOrUndefined(options.dataSource)) {
                            dataSource = options.dataSource;
                        }
                        else {
                            var item_1 = {};
                            _.forEach(options.columns, function (col) {
                                item_1[col.key] = col.headerText;
                            });
                            dataSource = [item_1];
                        }
                        begin($container, dataSource, options);
                    }
                    render.table = table;
                    /**
                     * Begin.
                     */
                    function begin($container, dataSource, options) {
                        if (options.float) {
                            var cloud = new intan.Cloud($container, dataSource, options);
                            $container.data(internal.TANGI, cloud);
                            cloud.renderRows(true);
                            return;
                        }
                        normal($container, dataSource, options);
                    }
                    render.begin = begin;
                    /**
                     * Normal.
                     */
                    function normal($container, dataSource, options) {
                        var rowConfig = { css: { height: options.rowHeight } };
                        var headerRowHeightFt;
                        if (options.isHeader) {
                            headerRowHeightFt = feature.find(options.features, feature.HEADER_ROW_HEIGHT);
                        }
                        var painter = new Painter($container, options);
                        $container.data(internal.CANON, { _origDs: _.cloneDeep(dataSource), dataSource: dataSource, primaryKey: options.primaryKey, painter: painter });
                        var $tbody = $container.find("tbody");
                        _.forEach(dataSource, function (item, index) {
                            if (!uk.util.isNullOrUndefined(headerRowHeightFt)) {
                                rowConfig = { css: { height: headerRowHeightFt.rows[index] } };
                            }
                            $tbody.append(painter.row(item, rowConfig, index));
                        });
                    }
                    render.normal = normal;
                    /**
                     * Synthesize headers.
                     */
                    function synthesizeHeaders(options) {
                        var level = {};
                        peelStruct(options.columns, level, 0);
                        var rowCount = Object.keys(level).length;
                        if (rowCount > 1) {
                            _.forEach(Object.keys(level), function (key) {
                                _.forEach(level[key], function (col) {
                                    if (uk.util.isNullOrUndefined(col.colspan) || col.colspan === 1) {
                                        col.rowspan = rowCount - parseInt(key);
                                    }
                                });
                            });
                        }
                        return level;
                    }
                    render.synthesizeHeaders = synthesizeHeaders;
                    /**
                     * Peel struct.
                     */
                    function peelStruct(columns, level, currentLevel) {
                        var colspan = 0, noGroup = 0;
                        _.forEach(columns, function (col) {
                            var clonedCol = _.clone(col);
                            var colCount = 0;
                            if (!uk.util.isNullOrUndefined(col.group)) {
                                colCount = col.group.length;
                                noGroup++;
                                var ret = peelStruct(col.group, level, currentLevel + 1);
                                if (!uk.util.isNullOrUndefined(ret)) {
                                    colCount += ret;
                                }
                                clonedCol.colspan = colCount;
                            }
                            if (uk.util.isNullOrUndefined(level[currentLevel])) {
                                level[currentLevel] = [];
                            }
                            level[currentLevel].push(clonedCol);
                            colspan += colCount;
                        });
                        return colspan !== 0 ? (colspan - noGroup) : undefined;
                    }
                    var Conditional = (function () {
                        function Conditional(options) {
                            this.options = options;
                            var columns = helper.classifyColumns(options);
                            this.visibleColumns = columns.visibleColumns;
                            this.hiddenColumns = columns.hiddenColumns;
                            this.visibleColumnsMap = helper.getColumnsMap(this.visibleColumns);
                            this.hiddenColumnsMap = helper.getColumnsMap(this.hiddenColumns);
                        }
                        return Conditional;
                    }());
                    var Painter = (function (_super) {
                        __extends(Painter, _super);
                        function Painter($container, options) {
                            _super.call(this, options);
                            this.$container = $container;
                            if (!uk.util.isNullOrUndefined(options.levelStruct)) {
                                this.columnsMap = helper.columnsMapFromStruct(options.levelStruct);
                            }
                            else {
                                this.columnsMap = _.groupBy(options.columns, "key");
                            }
                        }
                        /**
                         * Cell.
                         */
                        Painter.prototype.cell = function (rData, rowIdx, key) {
                            var self = this;
                            var cData = rData[key];
                            var data = cData && _.isObject(cData) && cData.constructor !== Array && _.isFunction(self.options.view) ?
                                helper.viewData(self.options.view, self.options.viewMode, cData) : cData;
                            var column = self.columnsMap[key];
                            if (uk.util.isNullOrUndefined(column))
                                return;
                            var $td = $("<td/>").data(internal.VIEW, rowIdx + "-" + key)
                                .css({ borderWidth: "1px", overflow: "hidden", whiteSpace: "nowrap", position: "relative" });
                            self.highlight($td);
                            if (!self.visibleColumnsMap[key])
                                $td.hide();
                            if (!uk.util.isNullOrUndefined(data) && data.constructor === Array) {
                                var incellHeight_1 = parseInt(self.options.rowHeight) / 2 - 3;
                                var borderStyle_1 = "solid 1px transparent";
                                _.forEach(data, function (item, idx) {
                                    var $div = $("<div/>").addClass(render.CHILD_CELL_CLS).text(item);
                                    if (idx < data.length - 1) {
                                        $div.css({ borderTop: borderStyle_1, borderLeft: borderStyle_1,
                                            borderRight: borderStyle_1, borderBottom: "dashed 1px #AAB7B8", top: "0px" });
                                    }
                                    else {
                                        $div.css({ border: borderStyle_1, top: (incellHeight_1 + 2) + "px" });
                                    }
                                    $td.append($div.css({ position: "absolute", left: "0px", height: incellHeight_1 + "px",
                                        width: "98%", textAlign: "center" }));
                                    if (column.handlerType) {
                                        var handler = cellHandler.get(column.handlerType);
                                        if (handler)
                                            handler($div, self.options, helper.call(column.supplier, rData, rowIdx, key));
                                    }
                                    cellHandler.rClick($div, column, helper.call(column.rightClick, rData, rowIdx, key));
                                    spread.bindSticker($div, rowIdx, key, self.options);
                                });
                                style.detCell(self.$container, $td, rowIdx, key);
                                return $td.css({ padding: "0px" });
                            }
                            if (!uk.util.isNullOrUndefined(column.handlerType) && !self.options.isHeader) {
                                var handler = cellHandler.get(column.handlerType);
                                if (!uk.util.isNullOrUndefined(handler)) {
                                    handler($td, self.options, helper.call(column.supplier, rData, rowIdx, key));
                                }
                            }
                            if (self.options.isHeader) {
                                if (!uk.util.isNullOrUndefined(column.icon) && column.icon.for === "header") {
                                    var $icon = $("<span/>").addClass(render.COL_ICON_CLS + " " + column.icon.class);
                                    $icon.appendTo($td.css({ paddingLeft: column.icon.width }));
                                    if (column.icon.popup && typeof column.icon.popup === "function") {
                                        $icon.css({ cursor: "pointer" });
                                        new widget.PopupPanel($icon, column.icon.popup(), "bottom right");
                                    }
                                    $("<div/>").html(data).appendTo($td);
                                }
                                else if (helper.containsBr(data)) {
                                    $td.html(data);
                                }
                                else {
                                    $td.text(data);
                                }
                            }
                            else if (!self.options.isHeader) {
                                if (!uk.util.isNullOrUndefined(column.icon) && column.icon.for === "body") {
                                    var $icon = $("<span/>").addClass(render.COL_ICON_CLS + " " + column.icon.class);
                                    $icon.appendTo($td.css({ paddingLeft: column.icon.width }));
                                }
                                else if (!column.control) {
                                    $td.text(data);
                                }
                                controls.check($td, column, data, helper.call(column.handler, rData, rowIdx, key));
                                cellHandler.rClick($td, column, helper.call(column.rightClick, rData, rowIdx, key));
                            }
                            spread.bindSticker($td, rowIdx, key, self.options);
                            style.detCell(self.$container, $td, rowIdx, key);
                            return $td;
                        };
                        /**
                         * Row.
                         */
                        Painter.prototype.row = function (data, config, rowIdx) {
                            var self = this;
                            var $tr = $("<tr/>").css(config.css);
                            var headerCellStyleFt, headerPopupFt, bodyCellStyleFt;
                            if (self.options.isHeader) {
                                headerCellStyleFt = feature.find(self.options.features, feature.HEADER_CELL_STYLE);
                                headerPopupFt = feature.find(self.options.features, feature.HEADER_POP_UP);
                            }
                            else {
                                bodyCellStyleFt = feature.find(self.options.features, feature.BODY_CELL_STYLE);
                            }
                            var onChecked = function (checked, rowIndex) {
                                var $grid = self.options.isHeader ? self.$container.siblings("." + BODY_PRF + LEFTMOST)
                                    : self.$container;
                                controls.tick(checked, $grid, self.options.isHeader, rowIndex);
                            };
                            if (!data[controls.CHECKED_KEY] && self.options.columns[0].key === controls.CHECKED_KEY) {
                                $tr.append($("<td/>").data(internal.VIEW, rowIdx + "-" + controls.CHECKED_KEY).css(controls.checkBoxCellStyles())
                                    .append(controls.createCheckBox(self.$container, { initValue: false, onChecked: onChecked })));
                            }
                            _.forEach(Object.keys(data), function (key, index) {
                                if (!self.visibleColumnsMap[key] && !self.hiddenColumnsMap[key])
                                    return;
                                if (key === controls.CHECKED_KEY) {
                                    $tr.append($("<td/>").css(controls.checkBoxCellStyles())
                                        .append(controls.createCheckBox(self.$container, { initValue: false, onChecked: onChecked })));
                                    return;
                                }
                                var $cell = self.cell(data, rowIdx, key);
                                $tr.append($cell);
                                // Styles
                                if (!uk.util.isNullOrUndefined(headerCellStyleFt)) {
                                    _.forEach(headerCellStyleFt.decorator, function (colorDef) {
                                        if (key === colorDef.columnKey) {
                                            if ((!uk.util.isNullOrUndefined(colorDef.rowId) && colorDef.rowId === rowIdx)
                                                || uk.util.isNullOrUndefined(colorDef.rowId)) {
                                                $cell.addClass(colorDef.clazz);
                                                return false;
                                            }
                                        }
                                    });
                                }
                                else if (!uk.util.isNullOrUndefined(bodyCellStyleFt)) {
                                    _.forEach(bodyCellStyleFt.decorator, function (colorDef) {
                                        if (key === colorDef.columnKey && data[self.options.primaryKey] === colorDef.rowId) {
                                            var $childCells = $cell.find("." + render.CHILD_CELL_CLS);
                                            if (!uk.util.isNullOrUndefined(colorDef.innerIdx) && $childCells.length > 0) {
                                                var $child = $($childCells[colorDef.innerIdx]);
                                                $child.addClass(colorDef.clazz);
                                                if (colorDef.clazz === style.HIDDEN_CLS) {
                                                    $child.data("hide", $child.text());
                                                    $child.text("");
                                                }
                                            }
                                            else {
                                                $cell.addClass(colorDef.clazz);
                                                if (colorDef.clazz == style.HIDDEN_CLS) {
                                                    $cell.data("hide", $cell.text());
                                                    $cell.text("");
                                                }
                                                return false;
                                            }
                                        }
                                    });
                                }
                                if (uk.util.isNullOrUndefined(self.columnsMap[key]))
                                    return;
                                var cellStyle = self.columnsMap[key].style;
                                if (!uk.util.isNullOrUndefined(cellStyle)) {
                                    cellStyle(new style.CellStyleParam($cell, data[key], data, rowIdx, key));
                                }
                            });
                            widget.bind($tr, rowIdx, headerPopupFt);
                            style.detColumn(self.$container, $tr, rowIdx);
                            return $tr;
                        };
                        /**
                         * Highlight.
                         */
                        Painter.prototype.jqHighlight = function ($td) {
                            var self = this;
                            if (self.options.isHeader || self.options.containerClass !== BODY_PRF + DETAIL)
                                return;
                            var $targetContainer = self.$container;
                            var $targetHeader = $targetContainer.siblings("." + self.options.containerClass.replace(BODY_PRF, HEADER_PRF));
                            $td.on(events.MOUSE_OVER, function () {
                                var colIndex = $td.index();
                                var $tr = $td.closest("tr");
                                var rowIndex = $tr.index();
                                $tr.find("td").addClass(render.HIGHLIGHT_CLS);
                                var $horzSumHeader = $targetContainer.siblings("." + HEADER_PRF + HORIZONTAL_SUM);
                                var $horzSumContent = $targetContainer.siblings("." + BODY_PRF + HORIZONTAL_SUM);
                                ;
                                $targetContainer.siblings("div[class*='" + BODY_PRF + "']").each(function () {
                                    if ($(this).hasClass(BODY_PRF + LEFT_HORZ_SUM) || $(this).hasClass(BODY_PRF + HORIZONTAL_SUM))
                                        return;
                                    $(this).find("tbody > tr:eq(" + rowIndex + ")").find("td").addClass(render.HIGHLIGHT_CLS);
                                });
                                $tr.siblings("tr").each(function () {
                                    $(this).find("td:eq(" + colIndex + ")").addClass(render.HIGHLIGHT_CLS);
                                });
                                $targetHeader.find("tr").each(function () {
                                    $(this).find("td:eq(" + colIndex + ")").addClass(render.HIGHLIGHT_CLS);
                                });
                                if ($horzSumHeader.length > 0 && $horzSumHeader.css("display") !== "none") {
                                    $horzSumHeader.find("tr").each(function () {
                                        $(this).find("td:eq(" + colIndex + ")").addClass(render.HIGHLIGHT_CLS);
                                    });
                                    $horzSumContent.find("tr").each(function () {
                                        $(this).find("td:eq(" + colIndex + ")").addClass(render.HIGHLIGHT_CLS);
                                    });
                                }
                                events.trigger(self.$container.closest("." + NAMESPACE), events.MOUSEIN_COLUMN, colIndex);
                            });
                            $td.on(events.MOUSE_OUT, function () {
                                $td.removeClass(render.HIGHLIGHT_CLS);
                                var colIndex = $td.index();
                                var $tr = $td.closest("tr");
                                $tr.find("td").removeClass(render.HIGHLIGHT_CLS);
                                var rowIndex = $tr.index();
                                var $horzSumHeader = $targetContainer.siblings("." + HEADER_PRF + HORIZONTAL_SUM);
                                var $horzSumContent = $targetContainer.siblings("." + BODY_PRF + HORIZONTAL_SUM);
                                $targetContainer.siblings("div[class*='" + BODY_PRF + "']").each(function () {
                                    if ($(this).hasClass(BODY_PRF + LEFT_HORZ_SUM) || $(this).hasClass(BODY_PRF + HORIZONTAL_SUM))
                                        return;
                                    $(this).find("tbody > tr:eq(" + rowIndex + ")").find("td").removeClass(render.HIGHLIGHT_CLS);
                                });
                                $tr.siblings("tr").each(function () {
                                    $(this).find("td:eq(" + colIndex + ")").removeClass(render.HIGHLIGHT_CLS);
                                });
                                $targetHeader.find("tr").each(function () {
                                    $(this).find("td:eq(" + colIndex + ")").removeClass(render.HIGHLIGHT_CLS);
                                });
                                if ($horzSumHeader.length > 0 && $horzSumHeader.css("display") !== "none") {
                                    $horzSumHeader.find("tr").each(function () {
                                        $(this).find("td:eq(" + colIndex + ")").removeClass(render.HIGHLIGHT_CLS);
                                    });
                                    $horzSumContent.find("tr").each(function () {
                                        $(this).find("td:eq(" + colIndex + ")").removeClass(render.HIGHLIGHT_CLS);
                                    });
                                }
                                events.trigger(self.$container.closest("." + NAMESPACE), events.MOUSEOUT_COLUMN, colIndex);
                            });
                        };
                        /**
                         * Highlight.
                         */
                        Painter.prototype.highlight = function ($td) {
                            var self = this;
                            if (self.options.isHeader || self.options.containerClass !== BODY_PRF + DETAIL)
                                return;
                            var $targetContainer = self.$container;
                            var targetHeader = helper.firstSibling($targetContainer[0], self.options.containerClass.replace(BODY_PRF, HEADER_PRF));
                            $td.on(events.MOUSE_OVER, function () {
                                var colIndex = helper.indexInParent($td[0]);
                                var tr = helper.closest($td[0], "tr");
                                var rowIndex = helper.indexInParent(tr);
                                helper.addClass1n(tr.children, render.HIGHLIGHT_CLS);
                                var horzSumHeader = helper.firstSibling($targetContainer[0], HEADER_PRF + HORIZONTAL_SUM);
                                var horzSumContent = helper.firstSibling($targetContainer[0], BODY_PRF + HORIZONTAL_SUM);
                                var bodies = helper.classSiblings($targetContainer[0], BODY_PRF);
                                for (var i = 0; i < bodies.length; i++) {
                                    if (!helper.hasClass(bodies[i], BODY_PRF + LEFT_HORZ_SUM)
                                        && !helper.hasClass(bodies[i], BODY_PRF + HORIZONTAL_SUM)) {
                                        var rowElm = bodies[i].getElementsByTagName("tr")[rowIndex];
                                        if (rowElm) {
                                            helper.addClass1n(rowElm.getElementsByTagName("td"), render.HIGHLIGHT_CLS);
                                        }
                                    }
                                }
                                helper.consumeSiblings(tr, function (elm) {
                                    var tds = elm.getElementsByTagName("td");
                                    if (!tds || tds.length === 0)
                                        return;
                                    helper.addClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                });
                                _.forEach(targetHeader.getElementsByTagName("tr"), function (t) {
                                    var tds = t.getElementsByTagName("td");
                                    if (!tds || tds.length === 0)
                                        return;
                                    helper.addClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                });
                                if (horzSumHeader && horzSumHeader.style.display !== "none") {
                                    _.forEach(horzSumHeader.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.addClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                    _.forEach(horzSumContent.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.addClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                }
                                self.$container.data(internal.COLUMN_IN, colIndex);
                                events.trigger(self.$container.closest("." + NAMESPACE), events.MOUSEIN_COLUMN, colIndex);
                            });
                            $td.on(events.MOUSE_OUT, function () {
                                helper.removeClass1n($td[0], render.HIGHLIGHT_CLS);
                                var colIndex = helper.indexInParent($td[0]);
                                var tr = helper.closest($td[0], "tr");
                                var rowIndex = helper.indexInParent(tr);
                                helper.removeClass1n(tr.children, render.HIGHLIGHT_CLS);
                                var horzSumHeader = helper.firstSibling($targetContainer[0], HEADER_PRF + HORIZONTAL_SUM);
                                var horzSumContent = helper.firstSibling($targetContainer[0], BODY_PRF + HORIZONTAL_SUM);
                                var bodies = helper.classSiblings($targetContainer[0], BODY_PRF);
                                for (var i = 0; i < bodies.length; i++) {
                                    if (!helper.hasClass(bodies[i], BODY_PRF + LEFT_HORZ_SUM)
                                        && !helper.hasClass(bodies[i], BODY_PRF + HORIZONTAL_SUM)) {
                                        helper.removeClass1n(bodies[i].getElementsByTagName("tr")[rowIndex].getElementsByTagName("td"), render.HIGHLIGHT_CLS);
                                    }
                                }
                                helper.consumeSiblings(tr, function (elm) {
                                    var tds = elm.getElementsByTagName("td");
                                    if (!tds || tds.length === 0)
                                        return;
                                    helper.removeClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                });
                                _.forEach(targetHeader.getElementsByTagName("tr"), function (t) {
                                    var tds = t.getElementsByTagName("td");
                                    if (!tds || tds.length === 0)
                                        return;
                                    helper.removeClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                });
                                if (horzSumHeader && horzSumHeader.style.display !== "none") {
                                    _.forEach(horzSumHeader.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.removeClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                    _.forEach(horzSumContent.getElementsByTagName("tr"), function (t) {
                                        var tds = t.getElementsByTagName("td");
                                        if (!tds || tds.length === 0)
                                            return;
                                        helper.removeClass1n(tds[colIndex], render.HIGHLIGHT_CLS);
                                    });
                                }
                                self.$container.data(internal.COLUMN_IN, -1);
                                events.trigger(self.$container.closest("." + NAMESPACE), events.MOUSEOUT_COLUMN, colIndex);
                            });
                        };
                        return Painter;
                    }(Conditional));
                    render.Painter = Painter;
                    var GroupHeaderPainter = (function (_super) {
                        __extends(GroupHeaderPainter, _super);
                        function GroupHeaderPainter(options) {
                            _super.call(this, options);
                            this.levelStruct = options.levelStruct;
                            this.columnsMap = helper.columnsMapFromStruct(this.levelStruct);
                        }
                        /**
                         * Cell.
                         */
                        GroupHeaderPainter.prototype.cell = function (text, rowIdx, cell) {
                            var self = this;
                            var $td = $("<td/>").data(internal.VIEW, rowIdx + "-" + cell.key)
                                .css({ "border-width": "1px", "overflow": "hidden", "white-space": "nowrap", "border-collapse": "collapse" });
                            if (!uk.util.isNullOrUndefined(cell.rowspan) && cell.rowspan > 1)
                                $td.attr("rowspan", cell.rowspan);
                            if (!uk.util.isNullOrUndefined(cell.colspan) && cell.colspan > 1)
                                $td.attr("colspan", cell.colspan);
                            else if (!self.visibleColumnsMap[cell.key])
                                $td.hide();
                            if (!uk.util.isNullOrUndefined(cell.icon) && cell.icon.for === "header") {
                                var $icon = $("<span/>").addClass(render.COL_ICON_CLS + " " + cell.icon.class);
                                $icon.css("top", "20%").appendTo($td.css({ paddingLeft: cell.icon.width }));
                                if (cell.icon.popup && typeof cell.icon.popup === "function") {
                                    $icon.css({ cursor: "pointer" });
                                    new widget.PopupPanel($icon, cell.icon.popup(), "bottom right");
                                }
                                $("<div/>").html(text).appendTo($td);
                            }
                            else if (helper.containsBr(text)) {
                                $td.html(text);
                            }
                            else {
                                $td.text(text);
                            }
                            return $td;
                        };
                        /**
                         * Rows.
                         */
                        GroupHeaderPainter.prototype.rows = function ($tbody) {
                            var self = this;
                            var css = { height: self.options.rowHeight };
                            var headerRowHeightFt = feature.find(self.options.features, feature.HEADER_ROW_HEIGHT);
                            var headerCellStyleFt = feature.find(self.options.features, feature.HEADER_CELL_STYLE);
                            _.forEach(Object.keys(self.levelStruct), function (rowIdx) {
                                if (!uk.util.isNullOrUndefined(headerRowHeightFt)) {
                                    css = { height: headerRowHeightFt.rows[rowIdx] };
                                }
                                var $tr = $("<tr/>").css(css);
                                var oneLevel = self.levelStruct[rowIdx];
                                _.forEach(oneLevel, function (cell) {
                                    if (!self.visibleColumnsMap[cell.key] && !self.hiddenColumnsMap[cell.key]
                                        && (uk.util.isNullOrUndefined(cell.colspan) || cell.colspan == 1))
                                        return;
                                    var $cell = self.cell(cell.headerText, rowIdx, cell);
                                    $tr.append($cell);
                                    if (!uk.util.isNullOrUndefined(headerCellStyleFt)) {
                                        _.forEach(headerCellStyleFt.decorator, function (colorDef) {
                                            if (colorDef.columnKey === cell.key) {
                                                if ((!uk.util.isNullOrUndefined(colorDef.rowId) && colorDef.rowId === rowIdx)
                                                    || uk.util.isNullOrUndefined(colorDef.rowId)) {
                                                    $cell.addClass(colorDef.clazz);
                                                }
                                                return false;
                                            }
                                        });
                                    }
                                    if (uk.util.isNullOrUndefined(self.columnsMap[cell.key]))
                                        return;
                                    var cellStyle = self.columnsMap[cell.key].style;
                                    if (!uk.util.isNullOrUndefined(cellStyle)) {
                                        cellStyle(new style.CellStyleParam($cell, cell.headerText, undefined, rowIdx, cell.key));
                                    }
                                });
                                $tbody.append($tr);
                            });
                        };
                        return GroupHeaderPainter;
                    }(Conditional));
                    render.GroupHeaderPainter = GroupHeaderPainter;
                    /**
                     * Extra.
                     */
                    function extra(className, height) {
                        return $("<tr/>").addClass("extable-" + className).height(height);
                    }
                    render.extra = extra;
                    /**
                     * Wrapper styles.
                     */
                    function wrapperStyles(top, left, width, height) {
                        return {
                            position: "absolute",
                            overflow: "hidden",
                            top: top,
                            left: left,
                            width: width,
                            height: height,
                            border: "solid 1px #CCC"
                        };
                    }
                    render.wrapperStyles = wrapperStyles;
                    /**
                     * Create wrapper.
                     */
                    function createWrapper(top, left, options) {
                        return $("<div/>").data(internal.EX_PART, options.containerClass).addClass(options.containerClass)
                            .css(wrapperStyles(top, left, options.width, options.height));
                    }
                    render.createWrapper = createWrapper;
                    /**
                     * Grid cell.
                     */
                    function gridCell($grid, rowIdx, columnKey, innerIdx, valueObj, isRestore) {
                        var $exTable = $grid.closest("." + NAMESPACE);
                        var updateMode = helper.getExTableFromGrid($grid).updateMode;
                        var $cell = selection.cellAt($grid, rowIdx, columnKey);
                        if ($cell === intan.NULL)
                            return;
                        var origDs = helper.getOrigDS($grid);
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        var viewFn = gen.painter.options.view;
                        var viewMode = gen.painter.options.viewMode;
                        var value = valueObj;
                        var fields = gen.painter.options.fields;
                        if (_.isFunction(viewFn)) {
                            value = helper.viewData(viewFn, viewMode, valueObj);
                        }
                        var touched = false;
                        var $childCells = $cell.find("." + render.CHILD_CELL_CLS);
                        if ($childCells.length > 0) {
                            if (value.constructor === Array) {
                                _.forEach(value, function (val, i) {
                                    var $c = $($childCells[i]);
                                    $c.text(val);
                                    var mTouch = trace(origDs, $c, rowIdx, columnKey, i, valueObj, fields);
                                    if (!touched)
                                        touched = mTouch;
                                    if (updateMode === EDIT) {
                                        validation.validate($grid, $c, rowIdx, columnKey, i, val);
                                    }
                                });
                            }
                            else {
                                var $c = $($childCells[innerIdx]);
                                $c.text(value);
                                touched = trace(origDs, $c, rowIdx, columnKey, innerIdx, valueObj, fields);
                                if (updateMode === EDIT) {
                                    validation.validate($grid, $c, rowIdx, columnKey, innerIdx, value);
                                }
                            }
                        }
                        else {
                            $cell.text(value);
                            touched = trace(origDs, $cell, rowIdx, columnKey, -1, valueObj, fields);
                            if (updateMode === EDIT) {
                                validation.validate($grid, $cell, rowIdx, columnKey, -1, value);
                            }
                        }
                        return touched;
                    }
                    render.gridCell = gridCell;
                    /**
                     * Grid row.
                     */
                    function gridRow($grid, rowIdx, data, isRestore) {
                        var $exTable = $grid.closest("." + NAMESPACE);
                        var updateMode = helper.getExTableFromGrid($grid).updateMode;
                        var $row = selection.rowAt($grid, rowIdx);
                        var $cells = $row.find("td").filter(function () {
                            return $(this).css("display") !== "none";
                        });
                        var visibleColumns = helper.gridVisibleColumns($grid);
                        var origDs = helper.getOrigDS($grid);
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        var viewFn = gen.painter.options.view;
                        var viewMode = gen.painter.options.viewMode;
                        var fields = gen.painter.options.fields;
                        _.forEach(Object.keys(data), function (key) {
                            _.forEach(visibleColumns, function (col, index) {
                                if (col.key === key) {
                                    var $target = $cells.eq(index);
                                    var childCells_1 = $target.find("." + render.CHILD_CELL_CLS);
                                    if (childCells_1.length > 0) {
                                        var cData = data[key];
                                        if (_.isFunction(viewFn)) {
                                            cData = helper.viewData(viewFn, viewMode, data[key]);
                                        }
                                        if (cData.constructor === Array) {
                                            _.forEach(cData, function (d, i) {
                                                var $c = $(childCells_1[i]);
                                                $c.text(d);
                                                if (updateMode === EDIT) {
                                                    validation.validate($exTable, $grid, $c, rowIdx, key, i, d);
                                                }
                                                trace(origDs, $c, rowIdx, key, i, data[key], fields);
                                            });
                                            return false;
                                        }
                                        $(childCells_1[1]).text(data[key]);
                                        trace(origDs, $(childCells_1[1]), rowIdx, key, 1, data[key], fields);
                                        if (updateMode === EDIT) {
                                            validation.validate($exTable, $grid, $(childCells_1[1]), rowIdx, key, 1, data[key]);
                                        }
                                    }
                                    else {
                                        var cData = data[key];
                                        if (_.isFunction(viewFn)) {
                                            cData = helper.viewData(viewFn, viewMode, data[key]);
                                        }
                                        $target.text(cData);
                                        trace(origDs, $target, rowIdx, key, -1, data[key], fields);
                                        if (updateMode === EDIT) {
                                            validation.validate($exTable, $grid, $target, rowIdx, key, -1, data[key]);
                                        }
                                    }
                                    return false;
                                }
                            });
                        });
                    }
                    render.gridRow = gridRow;
                    /**
                     * Trace.
                     */
                    function trace(ds, $cell, rowIdx, key, innerIdx, value, fields) {
                        if (!ds || ds.length === 0)
                            return;
                        var oVal = ds[rowIdx][key];
                        if (!uk.util.isNullOrUndefined(oVal) && helper.isEqual(oVal, value, fields)) {
                            $cell.removeClass(update.EDITED_CLS);
                            return false;
                        }
                        $cell.addClass(update.EDITED_CLS);
                        return true;
                    }
                })(render || (render = {}));
                var intan;
                (function (intan) {
                    intan.TOP_SPACE = "top-space";
                    intan.BOTTOM_SPACE = "bottom-space";
                    intan.NULL = $([]);
                    var Cloud = (function () {
                        function Cloud($container, dataSource, options) {
                            this.$container = $container;
                            this.options = options;
                            this.primaryKey = options.primaryKey;
                            this.rowsOfBlock = options.rowsOfBlock || 30;
                            this.blocksOfCluster = options.blocksOfCluster || 3;
                            this.rowHeight = parseInt(options.rowHeight);
                            this.blockHeight = this.rowsOfBlock * this.rowHeight;
                            this.clusterHeight = this.blockHeight * this.blocksOfCluster;
                            this.dataSource = dataSource;
                            this._origDs = _.cloneDeep(dataSource);
                            this.painter = new render.Painter($container, options);
                            this.setCellsStyle();
                            this.onScroll();
                        }
                        /**
                         * Set cells style.
                         */
                        Cloud.prototype.setCellsStyle = function () {
                            var self = this;
                            var bodyStylesFt = feature.find(self.options.features, feature.BODY_CELL_STYLE);
                            if (!bodyStylesFt)
                                return;
                            self.$container.data(internal.CELLS_STYLE, bodyStylesFt.decorator);
                        };
                        /**
                         * Get cluster no.
                         */
                        Cloud.prototype.getClusterNo = function () {
                            return Math.floor(this.$container.scrollTop() / (this.clusterHeight - this.blockHeight));
                        };
                        /**
                         * Render rows.
                         */
                        Cloud.prototype.renderRows = function (manual) {
                            var self = this;
                            var clusterNo = self.getClusterNo();
                            if (manual)
                                self.currentCluster = clusterNo;
                            if (self.dataSource.length < self.rowsOfBlock) {
                                self.topOffset = 0;
                                self.bottomOffset = 0;
                            }
                            var rowsOfCluster = self.blocksOfCluster * self.rowsOfBlock;
                            var startRowIdx = self.startIndex = Math.max((rowsOfCluster - self.rowsOfBlock) * clusterNo, 0);
                            var endRowIdx = self.endIndex = startRowIdx + rowsOfCluster;
                            self.topOffset = Math.max(startRowIdx * self.rowHeight, 0);
                            self.bottomOffset = Math.max((self.dataSource.length - endRowIdx) * self.rowHeight, 0);
                            var rowConfig = { css: { height: self.rowHeight } };
                            var $tbody = self.$container.find("tbody");
                            $tbody.empty();
                            $tbody.append(render.extra(intan.TOP_SPACE, self.topOffset));
                            for (var i = startRowIdx; i < endRowIdx; i++) {
                                if (uk.util.isNullOrUndefined(this.dataSource[i]))
                                    continue;
                                $tbody.append(self.painter.row(this.dataSource[i], rowConfig, i));
                            }
                            $tbody.append(render.extra(intan.BOTTOM_SPACE, self.bottomOffset));
                            if (self.$container.hasClass(BODY_PRF + DETAIL)) {
                                self.selectCellsIn();
                                self.dirtyCellsIn();
                                self.errorCellsIn();
                                self.detCellsIn();
                                self.editCellIn();
                            }
                            else if (self.$container.hasClass(BODY_PRF + LEFTMOST)) {
                                self.selectedRowsIn();
                                self.dirtyCellsIn();
                                self.errorCellsIn();
                                self.editCellIn();
                            }
                        };
                        /**
                         * OnScroll.
                         */
                        Cloud.prototype.onScroll = function () {
                            var self = this;
                            self.$container.on(events.SCROLL_EVT, function () {
                                var inClusterNo = self.getClusterNo();
                                if (self.currentCluster !== inClusterNo) {
                                    self.currentCluster = inClusterNo;
                                    if (self.$container.hasClass(BODY_PRF + DETAIL)) {
                                        var colIn = self.$container.data(internal.COLUMN_IN);
                                        if (!uk.util.isNullOrUndefined(colIn) && colIn !== -1) {
                                            helper.unHighlightGrid(self.$container.siblings("." + HEADER_PRF + DETAIL)[0], colIn);
                                            var $sumHeader = self.$container.siblings("." + HEADER_PRF + HORIZONTAL_SUM);
                                            var $sumBody = self.$container.siblings("." + BODY_PRF + HORIZONTAL_SUM);
                                            if ($sumHeader.length > 0 && $sumHeader[0].style.display !== "none") {
                                                helper.unHighlightGrid($sumHeader[0], colIn);
                                                helper.unHighlightGrid($sumBody[0], colIn);
                                            }
                                            events.trigger(self.$container.closest("." + NAMESPACE), events.MOUSEOUT_COLUMN, colIn);
                                        }
                                    }
                                    self.renderRows();
                                }
                            });
                        };
                        /**
                         * Roll to.
                         */
                        Cloud.prototype.rollTo = function (cell) {
                            var self = this;
                            if (self.startIndex <= cell.rowIndex && self.endIndex >= cell.rowIndex) {
                                var $cell = selection.cellAt(self.$container, cell.rowIndex, cell.columnKey);
                                var tdIndex = $cell.index();
                                var tdPosLeft_1 = 0, tdPosTop_1 = 0;
                                $cell.siblings("td:lt(" + tdIndex + ")").each(function () {
                                    if ($(this).css("display") !== "none") {
                                        tdPosLeft_1 += $(this).outerWidth();
                                    }
                                });
                                var $tr = $cell.parent();
                                var trIndex = $tr.index();
                                $tr.siblings("tr:lt(" + trIndex + ")").each(function () {
                                    tdPosTop_1 += $(this).outerHeight();
                                });
                                if ((self.$container.scrollTop() + self.$container.height()) < (tdPosTop_1 + 100)
                                    || self.$container.scrollTop() > tdPosTop_1) {
                                    self.$container.scrollTop(tdPosTop_1);
                                }
                                if ((self.$container.scrollLeft() + self.$container.width()) < (tdPosLeft_1 + 100)
                                    || self.$container.scrollLeft() > tdPosLeft_1) {
                                    self.$container.scrollLeft(tdPosLeft_1);
                                }
                            }
                            else {
                                self.$container.scrollTop(cell.rowIndex * self.rowHeight);
                                var $cell = selection.cellAt(self.$container, cell.rowIndex, cell.columnKey);
                                var tdPosLeft_2 = 0;
                                $cell.siblings("td:lt(" + $cell.index() + ")").each(function () {
                                    if ($(this).css("display") !== "none") {
                                        tdPosLeft_2 += $(this).outerWidth();
                                    }
                                });
                                self.$container.scrollLeft(tdPosLeft_2);
                            }
                        };
                        /**
                         * Edit cell in.
                         */
                        Cloud.prototype.editCellIn = function () {
                            var self = this;
                            var $exTable = self.$container.closest("." + NAMESPACE);
                            var updateMode = $exTable.data(NAMESPACE).updateMode;
                            var editor = $exTable.data(update.EDITOR);
                            if (updateMode !== EDIT || uk.util.isNullOrUndefined(editor) || editor.land !== self.options.containerClass)
                                return;
                            var editorRowIdx = parseInt(editor.rowIdx);
                            if (uk.util.isNullOrUndefined(editor) || editorRowIdx < self.startIndex || editorRowIdx > self.endIndex)
                                return;
                            var $editRow = self.$container.find("tr:eq(" + (editorRowIdx - self.startIndex + 1) + ")");
                            var editorColumnIdx;
                            _.forEach(self.painter.visibleColumns, function (c, idx) {
                                if (c.key === editor.columnKey) {
                                    editorColumnIdx = idx;
                                    return false;
                                }
                            });
                            if (!uk.util.isNullOrUndefined(editorColumnIdx)) {
                                var $editorCell = $editRow.find("td").filter(function () {
                                    return $(this).css("display") !== "none";
                                }).eq(editorColumnIdx);
                                var $childCells = $editorCell.find("." + render.CHILD_CELL_CLS);
                                update.edit($exTable, $childCells.length > 0 ? $($childCells[1]) : $editorCell, editor.land, editor.value, true);
                            }
                        };
                        /**
                         * Select cells in.
                         */
                        Cloud.prototype.selectCellsIn = function () {
                            var self = this;
                            var $exTable = self.$container.closest("." + NAMESPACE);
                            var updateMode = $exTable.data(NAMESPACE).updateMode;
                            if (updateMode !== COPY_PASTE)
                                return;
                            var selectedCells = self.$container.data(internal.SELECTED_CELLS);
                            if (uk.util.isNullOrUndefined(selectedCells) || selectedCells.length === 0)
                                return;
                            _.forEach(Object.keys(selectedCells), function (rowIdx, index) {
                                if (rowIdx >= self.startIndex && rowIdx <= self.endIndex) {
                                    _.forEach(selectedCells[rowIdx], function (colKey) {
                                        var $cell = selection.cellAt(self.$container, rowIdx, colKey);
                                        if ($cell === intan.NULL || !$cell)
                                            return;
                                        selection.markCell($cell);
                                    });
                                }
                            });
                        };
                        /**
                         * Select rows in.
                         */
                        Cloud.prototype.selectedRowsIn = function () {
                            var self = this;
                            var selectedRows = self.$container.data(internal.SELECTED_ROWS);
                            if (!selectedRows || !selectedRows.items || selectedRows.items.length === 0)
                                return;
                            for (var i = self.startIndex; i <= self.endIndex; i++) {
                                if (selectedRows.items[i]) {
                                    controls.tick(true, self.$container, false, i);
                                }
                            }
                        };
                        /**
                         * Dirty cells in.
                         */
                        Cloud.prototype.dirtyCellsIn = function () {
                            var self = this;
                            var $exTable = self.$container.closest("." + NAMESPACE);
                            var updateMode = $exTable.data(NAMESPACE).updateMode;
                            var histories;
                            if (self.options.containerClass === BODY_PRF + LEFTMOST) {
                                histories = self.$container.data(internal.EDIT_HISTORY);
                                if (!histories)
                                    return;
                                self.each(histories);
                                return;
                            }
                            if (updateMode === COPY_PASTE) {
                                histories = self.$container.data(internal.COPY_HISTORY);
                                if (!histories)
                                    return;
                                for (var i = histories.length - 1; i >= 0; i--) {
                                    self.each(histories[i].items);
                                }
                            }
                            else if (updateMode === EDIT) {
                                histories = self.$container.data(internal.EDIT_HISTORY);
                                if (!histories)
                                    return;
                                self.each(histories);
                            }
                            else if (updateMode === STICK) {
                                histories = self.$container.data(internal.STICK_HISTORY);
                                if (!histories)
                                    return;
                                _.forEach(histories, function (items) {
                                    self.each(items);
                                });
                            }
                        };
                        /**
                         * Error cells in.
                         */
                        Cloud.prototype.errorCellsIn = function () {
                            var self = this;
                            var $exTable = self.$container.closest("." + NAMESPACE);
                            var updateMode = $exTable.data(NAMESPACE).updateMode;
                            var errs = $exTable.data(errors.ERRORS);
                            if (!errs || errs.length === 0)
                                return;
                            self.each(errs, errors.ERROR_CLS);
                        };
                        /**
                         * Det cells in.
                         */
                        Cloud.prototype.detCellsIn = function () {
                            var self = this;
                            var det = self.$container.data(internal.DET);
                            if (!det)
                                return;
                            _.forEach(Object.keys(det), function (rIdx) {
                                if (rIdx >= self.startIndex && rIdx <= self.endIndex) {
                                    _.forEach(det[rIdx], function (key) {
                                        var $cell = selection.cellAt(self.$container, rIdx, key);
                                        if ($cell === intan.NULL || !$cell)
                                            return;
                                        helper.markCellWith(style.DET_CLS, $cell);
                                    });
                                }
                            });
                        };
                        /**
                         * Each.
                         */
                        Cloud.prototype.each = function (items, styler) {
                            var self = this;
                            styler = styler || update.EDITED_CLS;
                            _.forEach(items, function (item) {
                                if (item.rowIndex >= self.startIndex && item.rowIndex <= self.endIndex) {
                                    var $cell = selection.cellAt(self.$container, item.rowIndex, item.columnKey);
                                    if ($cell === intan.NULL || !$cell)
                                        return;
                                    helper.markCellWith(styler, $cell, item.innerIdx, item.value);
                                }
                            });
                        };
                        return Cloud;
                    }());
                    intan.Cloud = Cloud;
                })(intan || (intan = {}));
                var cellHandler;
                (function (cellHandler) {
                    cellHandler.ROUND_GO = "ex-round-go";
                    /**
                     * Get.
                     */
                    function get(handlerType) {
                        switch (handlerType.toLowerCase()) {
                            case "input":
                                return cellInput;
                            case "tooltip":
                                return tooltip;
                            case "roundtrip":
                                return roundGo;
                        }
                    }
                    cellHandler.get = get;
                    /**
                     * Cell input.
                     */
                    function cellInput($cell, options, supplier) {
                        if (uk.util.isNullOrUndefined(options.updateMode) || options.updateMode !== EDIT)
                            return;
                        $cell.addClass(update.EDITABLE_CLS);
                        $cell.on(events.CLICK_EVT, function (evt) {
                            if ($cell.find("input").length > 0) {
                                evt.stopImmediatePropagation();
                                return;
                            }
                            var $exTable = $cell.closest("." + NAMESPACE);
                            if (evt.ctrlKey && $exTable.data(NAMESPACE).determination)
                                return;
                            update.edit($exTable, $cell, options.containerClass);
                        });
                    }
                    cellHandler.cellInput = cellInput;
                    /**
                     * Tooltip.
                     */
                    function tooltip($cell, options, supplier) {
                        var $content = supplier();
                        if (uk.util.isNullOrUndefined($content))
                            return;
                        new widget.Tooltip($cell, { sources: $content });
                    }
                    cellHandler.tooltip = tooltip;
                    /**
                     * Round go.
                     */
                    function roundGo($cell, options, supplier) {
                        if (!supplier || typeof supplier !== "function")
                            return;
                        $cell.addClass(cellHandler.ROUND_GO).on(events.CLICK_EVT, function (evt) {
                            var $grid = $cell.closest("table").parent();
                            if (errors.occurred($grid.closest("." + NAMESPACE)))
                                return false;
                            var coord = helper.getCellCoord($cell);
                            $cell.closest("." + NAMESPACE).one(events.ROUND_RETREAT, function (evt, value) {
                                var ds = helper.getDataSource($grid);
                                if (!ds || ds.length === 0)
                                    return;
                                if (ds[coord.rowIdx][coord.columnKey] !== value) {
                                    update.gridCell($grid, coord.rowIdx, coord.columnKey, -1, value);
                                    update.pushEditHistory($grid, new selection.Cell(coord.rowIdx, coord.columnKey, value, -1));
                                }
                            });
                            supplier();
                        });
                    }
                    cellHandler.roundGo = roundGo;
                    /**
                     * rClick.
                     */
                    function rClick($cell, column, cb) {
                        if (uk.util.isNullOrUndefined(column.rightClick) || typeof column.rightClick !== "function")
                            return;
                        $cell.on(events.MOUSE_DOWN, function (evt) {
                            if (evt.which === 3 || evt.button === 2) {
                                evt.preventDefault();
                                cb();
                            }
                        });
                        $cell.on(events.CM, function () {
                            return false;
                        });
                    }
                    cellHandler.rClick = rClick;
                })(cellHandler || (cellHandler = {}));
                var update;
                (function (update) {
                    update.EDITOR = "editor";
                    update.EDITED_CLS = "edited";
                    update.EDIT_CELL_CLS = "edit-cell";
                    update.EDITOR_CLS = "ex-editor";
                    update.EDITABLE_CLS = "ex-editable";
                    var EMPTY_TBL_HEIGHT = "1px";
                    var Editor = (function () {
                        function Editor($editor, land, rowIdx, columnKey, innerIdx, value) {
                            this.$editor = $editor;
                            this.land = land;
                            this.rowIdx = rowIdx;
                            this.columnKey = columnKey;
                            this.innerIdx = innerIdx;
                            this.value = value;
                        }
                        return Editor;
                    }());
                    update.Editor = Editor;
                    /**
                     * Edit.
                     */
                    function edit($exTable, $cell, land, value, forced) {
                        var $grid = $exTable.find("." + BODY_PRF + DETAIL);
                        var $body = !land ? $grid : helper.getTable($exTable, land);
                        if (!forced && errors.occurred($exTable))
                            return;
                        if (!forced && ($cell.is("." + style.DET_CLS)
                            || $cell.is("." + style.HIDDEN_CLS) || $cell.is("." + style.SEAL_CLS))) {
                            outsideClick($exTable, $cell, true);
                            return;
                        }
                        var editor = $exTable.data(update.EDITOR);
                        var $editor, $input, inputVal, innerIdx = -1;
                        var coord = helper.getCellCoord($cell);
                        if (uk.util.isNullOrUndefined(editor)) {
                            var content = $cell.text();
                            inputVal = value ? value : content;
                            $input = $("<input/>").css({ border: "none", width: "96%", height: "92%", outline: "none" })
                                .val(inputVal);
                            $editor = $("<div/>").addClass(update.EDITOR_CLS)
                                .css({ height: $cell.outerHeight() - 4, width: $cell.outerWidth() - 4, backgroundColor: "#FFF",
                                border: "solid 1px #E67E22" }).append($input);
                            if ($cell.is("div")) {
                                $editor.css({ height: $cell.outerHeight() - 4, width: $cell.outerWidth() - 4 });
                                innerIdx = $cell.index();
                            }
                            $exTable.data(update.EDITOR, new Editor($editor, land, coord.rowIdx, coord.columnKey, innerIdx, inputVal));
                            events.trigger($exTable, events.START_EDIT, [$editor, content]);
                            $cell.addClass(update.EDIT_CELL_CLS).empty();
                            $cell.append($editor);
                            editing($exTable, $editor, land);
                            $input.select();
                            validation.validate($body, $cell, coord.rowIdx, coord.columnKey, innerIdx, inputVal);
                            selection.tickRows($exTable.find("." + BODY_PRF + LEFTMOST), false);
                        }
                        else {
                            $editor = editor.$editor;
                            $input = $editor.find("input");
                            var content_1 = $input.val();
                            var editingLand_1 = editor.land;
                            var cont_1 = function (cb) {
                                if ($editor.css("display") === "none")
                                    $editor.show();
                                if ($cell.is("div")) {
                                    $editor.css({ height: $cell.outerHeight() - 4, width: $cell.outerWidth() - 4 });
                                    innerIdx = $cell.index();
                                }
                                else {
                                    $editor.css({ height: $cell.outerHeight() - 4, width: $cell.outerWidth() - 4 });
                                }
                                var $editingCell = $editor.closest("." + update.EDIT_CELL_CLS).removeClass(update.EDIT_CELL_CLS);
                                var cellText = $cell.text();
                                inputVal = value ? value : cellText;
                                $input.val(inputVal);
                                triggerStopEdit($exTable, $editingCell, editingLand_1, content_1);
                                if (cb && _.isFunction(cb)) {
                                    cb();
                                }
                                // Update editing cell coord
                                editor.land = land;
                                editor.rowIdx = coord.rowIdx;
                                editor.columnKey = coord.columnKey;
                                editor.innerIdx = innerIdx;
                                editor.value = inputVal;
                                $cell.addClass(update.EDIT_CELL_CLS).empty();
                                $cell.append($editor);
                                editing($exTable, $editor, land);
                                $input.select();
                                validation.validate($body, $cell, coord.rowIdx, coord.columnKey, innerIdx, inputVal);
                                selection.tickRows($exTable.find("." + BODY_PRF + LEFTMOST), false);
                            };
                            var $editingGrid_1 = !editingLand_1 ? helper.getMainTable($exTable) : helper.getTable($exTable, editor.land);
                            var visibleColumns = helper.getVisibleColumnsOn($editingGrid_1);
                            var columnDf_1;
                            _.forEach(visibleColumns, function (col) {
                                if (col.key === editor.columnKey) {
                                    columnDf_1 = col;
                                    return false;
                                }
                            });
                            if (!columnDf_1)
                                return;
                            if (columnDf_1.ajaxValidate && _.isFunction(columnDf_1.ajaxValidate.request)) {
                                helper.block($exTable);
                                columnDf_1.ajaxValidate.request(content_1).done(function (res) {
                                    cont_1(helper.call(columnDf_1.ajaxValidate.onValid, { rowIndex: editor.rowIdx, columnKey: editor.columnKey, innerIdx: editor.innerIdx }, res));
                                }).fail(function (res) {
                                    var $target = selection.cellAt($editingGrid_1, editor.rowIdx, editor.columnKey);
                                    if ($target !== intan.NULL) {
                                        errors.add($exTable, $target, editor.rowIdx, editor.columnKey, editor.innerIdx, editor.value);
                                    }
                                    if (_.isFunction(columnDf_1.ajaxValidate.onFailed)) {
                                        columnDf_1.ajaxValidate.onFailed({ rowIndex: editor.rowIdx, columnKey: editor.columnKey, innerIdx: editor.innerIdx }, res);
                                    }
                                }).always(function () {
                                    helper.unblock($exTable);
                                });
                                return;
                            }
                            cont_1();
                        }
                    }
                    update.edit = edit;
                    /**
                     * Editing.
                     */
                    function editing($exTable, $editor, land) {
                        var $input = $editor.find("input");
                        $input.off(events.KEY_UP);
                        $input.on(events.KEY_UP, function (evt) {
                            var value = $input.val();
                            if (evt.keyCode === $.ui.keyCode.ENTER) {
                                var $grid_1;
                                if (!land) {
                                    $grid_1 = helper.getMainTable($exTable);
                                }
                                else {
                                    $grid_1 = $exTable.find("." + land);
                                }
                                var editor_1 = $exTable.data(update.EDITOR);
                                if (errors.occurred($exTable) || !editor_1)
                                    return;
                                var visibleColumns = helper.getVisibleColumnsOn(!editor_1.land ? helper.getMainTable($exTable) : helper.getTable($exTable, editor_1.land));
                                var columnDf_2;
                                _.forEach(visibleColumns, function (col) {
                                    if (col.key === editor_1.columnKey) {
                                        columnDf_2 = col;
                                        return false;
                                    }
                                });
                                if (!columnDf_2)
                                    return;
                                if (columnDf_2.ajaxValidate && _.isFunction(columnDf_2.ajaxValidate.request)) {
                                    helper.block($exTable);
                                    columnDf_2.ajaxValidate.request(value).done(function (res) {
                                        var $parent = $editor.parent();
                                        $parent.removeClass(update.EDIT_CELL_CLS);
                                        var currentCell = new selection.Cell(editor_1.rowIdx, editor_1.columnKey, undefined, editor_1.innerIdx);
                                        $exTable.data(update.EDITOR, null);
                                        triggerStopEdit($exTable, $parent, land, value);
                                        if (_.isFunction(columnDf_2.ajaxValidate.onValid)) {
                                            columnDf_2.ajaxValidate.onValid({ rowIndex: editor_1.rowIdx, columnKey: editor_1.columnKey, innerIdx: editor_1.innerIdx }, res);
                                        }
                                        if (land !== BODY_PRF + DETAIL)
                                            return;
                                        var cell = helper.nextCellOf($grid_1, currentCell);
                                        internal.getGem($grid_1).rollTo(cell);
                                        _.defer(function () {
                                            var $cell = selection.cellAt($grid_1, cell.rowIndex, cell.columnKey);
                                            if (uk.util.isNullOrUndefined(cell.innerIdx) || cell.innerIdx === -1) {
                                                edit($exTable, $cell, land);
                                                return;
                                            }
                                            edit($exTable, $($cell.find("." + render.CHILD_CELL_CLS)[cell.innerIdx]), land);
                                        });
                                    }).fail(function (res) {
                                        var $target = selection.cellAt($grid_1, editor_1.rowIdx, editor_1.columnKey);
                                        if ($target !== intan.NULL) {
                                            errors.add($exTable, $target, editor_1.rowIdx, editor_1.columnKey, editor_1.innerIdx, editor_1.value);
                                        }
                                        if (_.isFunction(columnDf_2.ajaxValidate.onFailed)) {
                                            columnDf_2.ajaxValidate.onFailed({ rowIndex: editor_1.rowIdx, columnKey: editor_1.columnKey, innerIdx: editor_1.innerIdx }, res);
                                        }
                                    }).always(function () {
                                        helper.unblock($exTable);
                                    });
                                }
                                else {
                                    var $parent = $editor.parent();
                                    $parent.removeClass(update.EDIT_CELL_CLS);
                                    var currentCell = new selection.Cell(editor_1.rowIdx, editor_1.columnKey, undefined, editor_1.innerIdx);
                                    $exTable.data(update.EDITOR, null);
                                    triggerStopEdit($exTable, $parent, land, value);
                                    if (land !== BODY_PRF + DETAIL)
                                        return;
                                    var cell_1 = helper.nextCellOf($grid_1, currentCell);
                                    internal.getGem($grid_1).rollTo(cell_1);
                                    _.defer(function () {
                                        var $cell = selection.cellAt($grid_1, cell_1.rowIndex, cell_1.columnKey);
                                        if (uk.util.isNullOrUndefined(cell_1.innerIdx) || cell_1.innerIdx === -1) {
                                            edit($exTable, $cell, land);
                                            return;
                                        }
                                        edit($exTable, $($cell.find("." + render.CHILD_CELL_CLS)[cell_1.innerIdx]), land);
                                    });
                                }
                            }
                            else {
                                var editor = $exTable.data(update.EDITOR);
                                if (uk.util.isNullOrUndefined(editor))
                                    return;
                                editor.value = value;
                                var $grid = !editor.land ? helper.getMainTable($exTable) : helper.getTable($exTable, editor.land);
                                validation.validate($grid, editor.$editor.closest("." + update.EDIT_CELL_CLS), editor.rowIdx, editor.columnKey, editor.innerIdx, editor.value);
                            }
                        });
                    }
                    /**
                     * Trigger stop edit.
                     */
                    function triggerStopEdit($exTable, $cell, land, value) {
                        if ($cell.length === 0)
                            return;
                        var innerIdx = -1;
                        if ($cell.is("div")) {
                            innerIdx = $cell.index();
                        }
                        var coord = helper.getCellCoord($cell);
                        if (!coord)
                            return;
                        events.trigger($exTable, events.STOP_EDIT, { land: land, rowIndex: coord.rowIdx, columnKey: coord.columnKey, innerIdx: innerIdx, value: value });
                    }
                    update.triggerStopEdit = triggerStopEdit;
                    /**
                     * Edit done.
                     */
                    function editDone($exTable) {
                        var $grid = $exTable.find("." + BODY_PRF + DETAIL);
                        var fts = $exTable.data(NAMESPACE).detailContent.features;
                        var timeRangeFt = feature.find(fts, feature.TIME_RANGE);
                        var timeRangerDef;
                        if (!uk.util.isNullOrUndefined(timeRangeFt)) {
                            timeRangerDef = _.groupBy(timeRangeFt.ranges, "rowId");
                            $grid.data(internal.TIME_VALID_RANGE, timeRangerDef);
                        }
                        $exTable.on(events.STOP_EDIT, function (evt, ui) {
                            postEdit($exTable, ui, timeRangerDef);
                        });
                    }
                    update.editDone = editDone;
                    /**
                     * Post edit.
                     */
                    function postEdit($exTable, ui, timeRangerDef) {
                        var $body = !ui.land ? $exTable.find("." + BODY_PRF + DETAIL) : $exTable.find("." + ui.land);
                        var $cell = selection.cellAt($body, ui.rowIndex, ui.columnKey);
                        var result = validation.validate($body, $cell, ui.rowIndex, ui.columnKey, ui.innerIdx, ui.value, timeRangerDef);
                        if (!result.isValid)
                            return;
                        ui.value = result.value;
                        var res = cellData($exTable, ui);
                        if (!uk.util.isNullOrUndefined(res)) {
                            var newValObj = ui.value;
                            if (_.isObject(res)) {
                                var $main = helper.getMainTable($exTable);
                                var gen = $main.data(internal.TANGI) || $main.data(internal.CANON);
                                var upperInput = gen.painter.options.upperInput;
                                var lowerInput = gen.painter.options.lowerInput;
                                newValObj = _.cloneDeep(res);
                                if (ui.innerIdx === 0) {
                                    newValObj[upperInput] = ui.value;
                                }
                                else if (ui.innerIdx === 1) {
                                    newValObj[lowerInput] = ui.value;
                                }
                            }
                            pushEditHistory($body, new selection.Cell(ui.rowIndex, ui.columnKey, res, ui.innerIdx));
                            helper.markCellWith(update.EDITED_CLS, $cell, ui.innerIdx);
                            events.trigger($exTable, events.CELL_UPDATED, [new selection.Cell(ui.rowIndex, ui.columnKey, newValObj, ui.innerIdx)]);
                        }
                        setText($cell, ui.innerIdx, ui.value);
                    }
                    /**
                     * Set text.
                     */
                    function setText($cell, innerIdx, value) {
                        var $childCells = $cell.find("." + render.CHILD_CELL_CLS);
                        if (!uk.util.isNullOrUndefined(innerIdx) && innerIdx > -1 && $childCells.length > 0) {
                            $($childCells[innerIdx]).text(value);
                        }
                        else {
                            $cell.text(value);
                        }
                    }
                    update.setText = setText;
                    /**
                     * Outside click.
                     */
                    function outsideClick($exTable, $target, immediate) {
                        if (immediate || !$target.is("." + update.EDITABLE_CLS)) {
                            if ($exTable.data("blockUI.isBlocked") === 1 || errors.occurred($exTable))
                                return;
                            var editor_2 = $exTable.data(update.EDITOR);
                            if (uk.util.isNullOrUndefined(editor_2))
                                return;
                            var $input = editor_2.$editor.find("input");
                            var content_2 = $input.val();
                            var mo_1 = function (cb) {
                                var innerIdx = -1;
                                var $parent = editor_2.$editor.closest("." + update.EDITABLE_CLS).removeClass(update.EDIT_CELL_CLS);
                                var $g = $parent.closest("table").parent();
                                if ($parent.length === 0 || $g.length === 0)
                                    return;
                                if ($parent.is("div"))
                                    innerIdx = $parent.index();
                                $parent.text(content_2);
                                postEdit($exTable, { rowIndex: editor_2.rowIdx, columnKey: editor_2.columnKey, innerIdx: innerIdx,
                                    value: content_2, land: ($g.data(internal.TANGI) || $g.data(internal.CANON)).painter.options.containerClass });
                                if (cb && _.isFunction(cb)) {
                                    cb();
                                }
                                $exTable.data(update.EDITOR, null);
                            };
                            var $grid_2 = !editor_2.land ? helper.getMainTable($exTable) : helper.getTable($exTable, editor_2.land);
                            var visibleColumns = helper.getVisibleColumnsOn($grid_2);
                            var columnDf_3;
                            _.forEach(visibleColumns, function (col) {
                                if (col.key === editor_2.columnKey) {
                                    columnDf_3 = col;
                                    return false;
                                }
                            });
                            if (!columnDf_3)
                                return;
                            if (!$target.is("." + cellHandler.ROUND_GO)
                                && columnDf_3.ajaxValidate && _.isFunction(columnDf_3.ajaxValidate.request)) {
                                helper.block($exTable);
                                columnDf_3.ajaxValidate.request(content_2).done(function (res) {
                                    mo_1(helper.call(columnDf_3.ajaxValidate.onValid, { rowIndex: editor_2.rowIdx, columnKey: editor_2.columnKey, innerIdx: editor_2.innerIdx }, res));
                                }).fail(function (res) {
                                    var $target = selection.cellAt($grid_2, editor_2.rowIdx, editor_2.columnKey);
                                    if ($target !== intan.NULL) {
                                        errors.add($exTable, $target, editor_2.rowIdx, editor_2.columnKey, editor_2.innerIdx, editor_2.value);
                                    }
                                    if (_.isFunction(columnDf_3.ajaxValidate.onFailed)) {
                                        columnDf_3.ajaxValidate.onFailed({ rowIndex: editor_2.rowIdx, columnKey: editor_2.columnKey, innerIdx: editor_2.innerIdx }, res);
                                    }
                                }).always(function () {
                                    helper.unblock($exTable);
                                });
                                return;
                            }
                            mo_1();
                        }
                    }
                    update.outsideClick = outsideClick;
                    /**
                     * Cell data.
                     */
                    function cellData($exTable, ui) {
                        var exTable = $exTable.data(NAMESPACE);
                        if (!exTable)
                            return;
                        var oldVal, innerIdx = ui.innerIdx, f;
                        if (ui.land === BODY_PRF + LEFTMOST) {
                            f = "leftmostContent";
                        }
                        else if (ui.land === BODY_PRF + MIDDLE) {
                            f = "middleContent";
                        }
                        else {
                            f = "detailContent";
                        }
                        if (uk.util.isNullOrUndefined(ui.innerIdx)) {
                            innerIdx = exTable[f].dataSource[ui.rowIndex][ui.columnKey].constructor === Array ? 1 : -1;
                        }
                        var currentVal = exTable[f].dataSource[ui.rowIndex][ui.columnKey];
                        if (innerIdx === -1) {
                            if (currentVal !== ui.value) {
                                oldVal = _.cloneDeep(currentVal);
                                if (exTable[f].primaryKey === ui.columnKey) {
                                    if (exTable.leftmostContent) {
                                        exTable.leftmostContent.dataSource[ui.rowIndex][ui.columnKey] = ui.value;
                                    }
                                    if (exTable.middleContent) {
                                        exTable.middleContent.dataSource[ui.rowIndex][ui.columnKey] = ui.value;
                                    }
                                    if (exTable.detailContent) {
                                        exTable.detailContent.dataSource[ui.rowIndex][ui.columnKey] = ui.value;
                                    }
                                }
                                else {
                                    exTable[f].dataSource[ui.rowIndex][ui.columnKey] = ui.value;
                                }
                                return oldVal;
                            }
                            return null;
                        }
                        var $main = !ui.land ? helper.getMainTable($exTable) : helper.getTable($exTable, ui.land);
                        var gen = $main.data(internal.TANGI) || $main.data(internal.CANON);
                        var upperInput = gen.painter.options.upperInput;
                        var lowerInput = gen.painter.options.lowerInput;
                        var field;
                        if (ui.innerIdx === 0) {
                            field = upperInput;
                        }
                        else if (ui.innerIdx === 1) {
                            field = lowerInput;
                        }
                        if (currentVal[field] !== ui.value) {
                            oldVal = _.cloneDeep(currentVal);
                            exTable[f].dataSource[ui.rowIndex][ui.columnKey][field] = ui.value;
                            return oldVal;
                        }
                        return null;
                    }
                    update.cellData = cellData;
                    /**
                     * Row data.
                     */
                    function rowData($exTable, rowIdx, data) {
                        var exTable = $exTable.data(NAMESPACE);
                        if (!exTable)
                            return;
                        _.assignInWith(exTable.detailContent.dataSource[rowIdx], data, function (objVal, srcVal) {
                            if (objVal.constructor === Array && srcVal.constructor !== Array) {
                                objVal[1] = srcVal;
                                return objVal;
                            }
                            return srcVal;
                        });
                    }
                    update.rowData = rowData;
                    /**
                     * Grid cell.
                     */
                    function gridCell($grid, rowIdx, columnKey, innerIdx, value, isRestore) {
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        if (!gen)
                            return;
                        var cData = gen.dataSource[rowIdx][columnKey];
                        var origDs = gen._origDs;
                        var $table = $grid.closest("." + NAMESPACE);
                        if (cData.constructor === Array) {
                            if (value.constructor === Array) {
                                _.forEach(cData, function (d, i) {
                                    gen.dataSource[rowIdx][columnKey][i] = value[i];
                                    if (!helper.isEqual(origDs[rowIdx][columnKey][i], value[i])) {
                                        events.trigger($table, events.CELL_UPDATED, [new selection.Cell(rowIdx, columnKey, value[i], i)]);
                                    }
                                });
                            }
                            else {
                                gen.dataSource[rowIdx][columnKey][innerIdx] = value;
                                if (!helper.isEqual(origDs[rowIdx][columnKey][innerIdx], value)) {
                                    events.trigger($table, events.CELL_UPDATED, [new selection.Cell(rowIdx, columnKey, value, innerIdx)]);
                                }
                            }
                        }
                        else {
                            gen.dataSource[rowIdx][columnKey] = value;
                            if (!helper.isEqual(origDs[rowIdx][columnKey], value)) {
                                events.trigger($table, events.CELL_UPDATED, [new selection.Cell(rowIdx, columnKey, value, -1)]);
                            }
                        }
                        render.gridCell($grid, rowIdx, columnKey, innerIdx, value, isRestore);
                    }
                    update.gridCell = gridCell;
                    /**
                     * Grid row.
                     */
                    function gridRow($grid, rowIdx, data, isRestore) {
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        if (!gen)
                            return;
                        _.assignInWith(gen.dataSource[rowIdx], data, function (objVal, srcVal) {
                            if (objVal.constructor === Array && srcVal.constructor !== Array) {
                                objVal[1] = srcVal;
                                return objVal;
                            }
                            return srcVal;
                        });
                        render.gridRow($grid, rowIdx, data, isRestore);
                    }
                    update.gridRow = gridRow;
                    /**
                     * Grid cell ow.
                     */
                    function gridCellOw($grid, rowIdx, columnKey, innerIdx, value, txId) {
                        var $exTable = $grid.closest("." + NAMESPACE);
                        var exTable = $exTable.data(NAMESPACE);
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        var pk = helper.getPrimaryKey($grid);
                        if (!gen || helper.isDetCell($grid, rowIdx, columnKey)
                            || helper.isXCell($grid, gen.dataSource[rowIdx][pk], columnKey, style.HIDDEN_CLS, style.SEAL_CLS))
                            return;
                        var cData = gen.dataSource[rowIdx][columnKey];
                        var opt = gen.options;
                        if (!exTable.pasteOverWrite
                            && !helper.isEmpty(helper.viewData(opt.view, opt.viewMode, cData)))
                            return;
                        var changedData;
                        if (cData.constructor === Array) {
                            if (value.constructor === Array) {
                                changedData = _.cloneDeep(cData);
                                _.forEach(cData, function (d, i) {
                                    gen.dataSource[rowIdx][columnKey][i] = value[i];
                                });
                            }
                            else {
                                changedData = cData[innerIdx];
                                gen.dataSource[rowIdx][columnKey][innerIdx] = value;
                            }
                        }
                        else if (_.isObject(cData) && !_.isObject(value)) {
                            return;
                        }
                        else {
                            changedData = cData;
                            gen.dataSource[rowIdx][columnKey] = value;
                        }
                        var touched = render.gridCell($grid, rowIdx, columnKey, innerIdx, value);
                        if (touched) {
                            pushHistory($grid, [new selection.Cell(rowIdx, columnKey, changedData)], txId);
                            events.trigger($exTable, events.CELL_UPDATED, [new selection.Cell(rowIdx, columnKey, value, innerIdx)]);
                        }
                    }
                    update.gridCellOw = gridCellOw;
                    /**
                     * Grid row ow.
                     */
                    function gridRowOw($grid, rowIdx, data, txId) {
                        var $exTable = $grid.closest("." + NAMESPACE);
                        var exTable = $exTable.data(NAMESPACE);
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        var pk = helper.getPrimaryKey($grid);
                        if (!gen)
                            return;
                        // Create history
                        var changedCells = [];
                        var origData = _.cloneDeep(data);
                        var clonedData = _.cloneDeep(data);
                        var opt = gen.options;
                        _.assignInWith(gen.dataSource[rowIdx], clonedData, function (objVal, srcVal, key, obj, src) {
                            if ((!exTable.pasteOverWrite
                                && !helper.isEmpty(helper.viewData(opt.view, opt.viewMode, objVal)))
                                || helper.isDetCell($grid, rowIdx, key)
                                || helper.isXCell($grid, gen.dataSource[rowIdx][pk], key, style.HIDDEN_CLS, style.SEAL_CLS)) {
                                src[key] = objVal;
                                return objVal;
                            }
                            if (!uk.util.isNullOrUndefined(src[key]) && !helper.isEqual(src[key], obj[key])) {
                                changedCells.push(new selection.Cell(rowIdx, key, objVal));
                            }
                            else {
                                delete origData[key];
                            }
                            if (objVal.constructor === Array && srcVal.constructor !== Array) {
                                objVal[1] = srcVal;
                                return objVal;
                            }
                            return srcVal;
                        });
                        _.forEach(Object.keys(clonedData), function (k) {
                            if (!helper.isEqual(clonedData[k], origData[k])) {
                                delete origData[k];
                            }
                        });
                        render.gridRow($grid, rowIdx, origData);
                        if (changedCells.length > 0) {
                            pushHistory($grid, changedCells, txId);
                            events.trigger($exTable, events.ROW_UPDATED, [events.createRowUi(rowIdx, origData)]);
                        }
                    }
                    update.gridRowOw = gridRowOw;
                    /**
                     * Stick grid cell ow.
                     */
                    function stickGridCellOw($grid, rowIdx, columnKey, innerIdx, value) {
                        var $exTable = $grid.closest("." + NAMESPACE);
                        var exTable = $exTable.data(NAMESPACE);
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        var pk = helper.getPrimaryKey($grid);
                        if (!gen || helper.isDetCell($grid, rowIdx, columnKey)
                            || helper.isXCell($grid, gen.dataSource[rowIdx][pk], columnKey, style.HIDDEN_CLS, style.SEAL_CLS))
                            return;
                        var cData = gen.dataSource[rowIdx][columnKey];
                        var opt = gen.options;
                        if (!exTable.stickOverWrite
                            && !helper.isEmpty(helper.viewData(opt.view, opt.viewMode, cData)))
                            return;
                        var changedData = _.cloneDeep(cData);
                        gen.dataSource[rowIdx][columnKey] = value;
                        var touched = render.gridCell($grid, rowIdx, columnKey, innerIdx, value);
                        if (touched) {
                            pushStickHistory($grid, [new selection.Cell(rowIdx, columnKey, changedData, innerIdx)]);
                            events.trigger($exTable, events.CELL_UPDATED, [new selection.Cell(rowIdx, columnKey, value, innerIdx)]);
                        }
                    }
                    update.stickGridCellOw = stickGridCellOw;
                    /**
                     * Stick grid row ow.
                     */
                    function stickGridRowOw($grid, rowIdx, data) {
                        var $exTable = $grid.closest("." + NAMESPACE);
                        var exTable = $exTable.data(NAMESPACE);
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        var pk = helper.getPrimaryKey($grid);
                        if (!gen)
                            return;
                        // Create history
                        var changedCells = [];
                        var origData = _.cloneDeep(data);
                        var clonedData = _.cloneDeep(data);
                        var opt = gen.options;
                        _.assignInWith(gen.dataSource[rowIdx], clonedData, function (objVal, srcVal, key, obj, src) {
                            if ((!exTable.stickOverWrite
                                && !helper.isEmpty(helper.viewData(opt.view, opt.viewMode, objVal)))
                                || helper.isDetCell($grid, rowIdx, key)
                                || helper.isXCell($grid, gen.dataSource[rowIdx][pk], key, style.HIDDEN_CLS, style.SEAL_CLS)) {
                                src[key] = objVal;
                                return objVal;
                            }
                            if (!uk.util.isNullOrUndefined(src[key]) && !helper.isEqual(src[key], obj[key])) {
                                changedCells.push(new selection.Cell(rowIdx, key, _.cloneDeep(objVal)));
                            }
                            else {
                                delete origData[key];
                            }
                            if (objVal.constructor === Array && srcVal.constructor !== Array) {
                                objVal[1] = srcVal;
                                return objVal;
                            }
                            return srcVal;
                        });
                        _.forEach(Object.keys(clonedData), function (k) {
                            if (!helper.isEqual(clonedData[k], origData[k])) {
                                delete origData[k];
                            }
                        });
                        render.gridRow($grid, rowIdx, origData);
                        if (changedCells.length > 0) {
                            pushStickHistory($grid, changedCells);
                            events.trigger($exTable, events.ROW_UPDATED, [events.createRowUi(rowIdx, origData)]);
                        }
                    }
                    update.stickGridRowOw = stickGridRowOw;
                    /**
                     * Push history.
                     */
                    function pushHistory($grid, cells, txId) {
                        var history = $grid.data(internal.COPY_HISTORY);
                        if (!history || history.length === 0) {
                            history = [{ txId: txId, items: cells }];
                            $grid.data(internal.COPY_HISTORY, history);
                            return;
                        }
                        var latestHistory = history[history.length - 1];
                        if (latestHistory.txId === txId) {
                            _.forEach(cells, function (cell) {
                                latestHistory.items.push(cell);
                            });
                        }
                        else {
                            var newHis = { txId: txId, items: cells };
                            history.push(newHis);
                        }
                    }
                    update.pushHistory = pushHistory;
                    /**
                     * Push edit history.
                     */
                    function pushEditHistory($grid, cell) {
                        var history = $grid.data(internal.EDIT_HISTORY);
                        if (!history || history.length === 0) {
                            $grid.data(internal.EDIT_HISTORY, [cell]);
                            return;
                        }
                        history.push(cell);
                    }
                    update.pushEditHistory = pushEditHistory;
                    /**
                     * Push stick history.
                     */
                    function pushStickHistory($grid, cells) {
                        var history = $grid.data(internal.STICK_HISTORY);
                        if (!history || history.length === 0) {
                            $grid.data(internal.STICK_HISTORY, [cells]);
                            return;
                        }
                        history.push(cells);
                    }
                    update.pushStickHistory = pushStickHistory;
                    /**
                     * Remove stick history.
                     */
                    function removeStickHistory($grid, cells) {
                        var history = $grid.data(internal.STICK_HISTORY);
                        if (!history || history.length === 0)
                            return;
                        _.remove(history, function (h) { return cells.some(function (c) { return helper.areSameCells(c, h); }); });
                    }
                    update.removeStickHistory = removeStickHistory;
                    /**
                     * Insert new row.
                     */
                    function insertNewRow($container) {
                        var rowIndex;
                        $container.find("div[class*='" + BODY_PRF + "']").filter(function () {
                            return !$(this).hasClass(BODY_PRF + HORIZONTAL_SUM) && !$(this).hasClass(BODY_PRF + LEFT_HORZ_SUM);
                        }).each(function (index) {
                            var ds = internal.getDataSource($(this));
                            var origDs = helper.getOrigDS($(this));
                            var newRec = {};
                            rowIndex = ds.length;
                            var columns = helper.gridColumnsMap($(this));
                            if (!ds || !columns)
                                return;
                            _.forEach(columns, function (value, key) {
                                if (key === controls.CHECKED_KEY)
                                    return;
                                newRec[key] = "";
                            });
                            var gen = $(this).data(internal.TANGI) || $(this).data(internal.CANON);
                            var newRow = gen.painter.row(newRec, { css: { height: gen.painter.options.rowHeight } }, ds.length);
                            if (!uk.util.isNullOrUndefined(gen.startIndex)) {
                                $(this).find("tbody tr:last").before(newRow);
                            }
                            else {
                                $(this).find("tbody").append(newRow);
                            }
                            origDs[ds.length] = _.cloneDeep(newRec);
                            ds[ds.length] = newRec;
                        });
                        var $grid = helper.getMainTable($container);
                        $grid.scrollTop($grid[0].scrollHeight);
                        controls.tick(true, $container.find("." + BODY_PRF + LEFTMOST), false, rowIndex);
                    }
                    update.insertNewRow = insertNewRow;
                    /**
                     * Delete rows.
                     */
                    function deleteRows($container) {
                        var $grid = helper.getLeftmostTable($container);
                        var rows = $grid.data(internal.SELECTED_ROWS);
                        if (!rows || !rows.items || rows.items.length === 0)
                            return;
                        if (rows.count > 0) {
                            rows.selectAll = false;
                            var $allBox = $grid.siblings("." + HEADER_PRF + LEFTMOST).find("table tr:first td:first input");
                            if ($allBox.is(":checked"))
                                $allBox.prop("checked", false);
                        }
                        retrackEditor($container, rows.items);
                        var $t = $container.find("div[class*='" + BODY_PRF + "']").filter(function () {
                            return !$(this).hasClass(BODY_PRF + HORIZONTAL_SUM) && !$(this).hasClass(BODY_PRF + LEFT_HORZ_SUM);
                        });
                        $t.each(function () {
                            var elm = this;
                            _.forEach([internal.EDIT_HISTORY, internal.COPY_HISTORY, internal.STICK_HISTORY,
                                internal.SELECTED_CELLS, errors.ERRORS], function (name) {
                                retrackRecords($(elm), rows.items, name);
                            });
                        });
                        $t.each(function (index) {
                            var ds = internal.getDataSource($(this));
                            var origDs = helper.getOrigDS($(this));
                            if (!ds || ds.length === 0)
                                return;
                            if (ds.length > rows.items.length)
                                rows.items[ds.length - 1] = false;
                            var count = rows.count;
                            for (var i = rows.items.length - 1; i >= 0; i--) {
                                var $row = selection.rowAt($(this), i);
                                if (rows.items[i]) {
                                    if ($row !== intan.NULL && !$row.hasClass(NAMESPACE + "-" + intan.BOTTOM_SPACE)) {
                                        $row.remove();
                                    }
                                    ds.splice(i, 1);
                                    origDs.splice(i, 1);
                                    if (index === $t.length - 1) {
                                        rows.items[i] = false;
                                        rows.count--;
                                    }
                                    count--;
                                }
                                else {
                                    if ($row !== intan.NULL) {
                                        $row.find("td").each(function () {
                                            var view = $(this).data(internal.VIEW);
                                            if (view) {
                                                var coord = view.split("-");
                                                $(this).data(internal.VIEW, parseInt(coord[0]) - count + "-" + coord[1]);
                                            }
                                        });
                                    }
                                }
                            }
                            if (ds.length === 0) {
                                $(this).find("." + NAMESPACE + "-" + intan.BOTTOM_SPACE).height(EMPTY_TBL_HEIGHT);
                            }
                        });
                    }
                    update.deleteRows = deleteRows;
                    /**
                     * Retrack editor.
                     */
                    function retrackEditor($container, rows) {
                        var count = 0;
                        var editor = $container.data(update.EDITOR);
                        if (!editor)
                            return;
                        if (rows[editor.rowIdx]) {
                            $container.data(update.EDITOR, null);
                            return;
                        }
                        for (var i = 0; i < editor.rowIdx; i++) {
                            if (rows[i])
                                count++;
                        }
                        if (count > 0)
                            editor.rowIdx = editor.rowIdx - count;
                    }
                    /**
                     * Retrack records.
                     */
                    function retrackRecords($grid, rows, name) {
                        var histories = $grid.data(name);
                        if (!histories)
                            return;
                        if (name === internal.COPY_HISTORY) {
                            for (var i = histories.length - 1; i >= 0; i--) {
                                each(histories[i].items, rows);
                            }
                        }
                        else if (name === internal.SELECTED_CELLS) {
                            _.forEach(Object.keys(histories).sort(function (a, b) { return a - b; }), function (key, index) {
                                var count = 0;
                                if (rows[key]) {
                                    delete histories[key];
                                    return;
                                }
                                for (var i = 0; i < key; i++) {
                                    if (rows[i])
                                        count++;
                                }
                                if (count > 0) {
                                    var newKey = key - count;
                                    histories[newKey] = histories[key];
                                    delete histories[key];
                                }
                            });
                        }
                        else {
                            each(histories, rows);
                        }
                    }
                    /**
                     * Each.
                     */
                    function each(histories, rows) {
                        var removes = [];
                        _.forEach(histories, function (his, index) {
                            var count = 0;
                            if (rows[his.rowIndex]) {
                                removes.push(index);
                                return;
                            }
                            for (var i = 0; i < his.rowIndex; i++) {
                                if (rows[i])
                                    count++;
                            }
                            if (count > 0)
                                his.rowIndex = his.rowIndex - count;
                        });
                        while (removes.length > 0) {
                            histories.splice(removes.pop(), 1);
                        }
                    }
                })(update || (update = {}));
                var copy;
                (function (copy) {
                    copy.PASTE_ID = "pasteHelper";
                    copy.COPY_ID = "copyHelper";
                    var Mode;
                    (function (Mode) {
                        Mode[Mode["SINGLE"] = 0] = "SINGLE";
                        Mode[Mode["MULTIPLE"] = 1] = "MULTIPLE";
                    })(Mode || (Mode = {}));
                    var History = (function () {
                        function History(cells) {
                            this.cells = cells;
                        }
                        return History;
                    }());
                    copy.History = History;
                    var Printer = (function () {
                        function Printer(options) {
                            this.options = options;
                        }
                        /**
                         * Hook.
                         */
                        Printer.prototype.hook = function ($grid) {
                            var self = this;
                            self.$grid = $grid;
                            self.$grid.attr("tabindex", 0).css("outline", "none");
                            self.$grid.on(events.FOCUS_IN, function (evt) {
                                if ($("#pasteHelper").length > 0 && $("#copyHelper").length > 0)
                                    return;
                                var pasteArea = $("<textarea/>").attr("id", copy.PASTE_ID).css({ "opacity": 0, "overflow": "hidden" })
                                    .on(events.PASTE, $.proxy(self.paste, self));
                                var copyArea = $("<textarea/>").attr("id", copy.COPY_ID).css({ "opacity": 0, "overflow": "hidden" });
                                $("<div/>").css({ "position": "fixed", "top": -10000, "left": -10000 })
                                    .appendTo($(document.body)).append(pasteArea).append(copyArea);
                            });
                            self.$grid.on(events.KEY_DOWN, function (evt) {
                                if (evt.ctrlKey && helper.isPasteKey(evt)) {
                                    $("#pasteHelper").focus();
                                }
                                else
                                    self.getOp(evt);
                                _.defer(function () {
                                    selection.focus(self.$grid);
                                });
                            });
                        };
                        /**
                         * Get op.
                         */
                        Printer.prototype.getOp = function (evt) {
                            var self = this;
                            if (evt.ctrlKey && helper.isCopyKey(evt)) {
                                self.copy();
                            }
                            else if (evt.ctrlKey && helper.isCutKey(evt)) {
                            }
                            else if (evt.ctrlKey && helper.isUndoKey(evt)) {
                                self.undo();
                            }
                        };
                        /**
                         * Copy.
                         */
                        Printer.prototype.copy = function (cut) {
                            var self = this;
                            var selectedCells = selection.getSelectedCells(this.$grid);
                            var copiedData;
                            if (selectedCells.length === 1) {
                                var cell = selectedCells[0];
                                var ds = internal.getDataSource(self.$grid);
                                var pk = helper.getPrimaryKey(self.$grid);
                                if (helper.isDetCell(self.$grid, cell.rowIndex, cell.columnKey)
                                    || helper.isXCell(self.$grid, ds[cell.rowIndex][pk], cell.columnKey, style.HIDDEN_CLS, style.SEAL_CLS))
                                    return;
                                this.mode = Mode.SINGLE;
                                copiedData = _.isObject(selectedCells[0].value) ? JSON.stringify(selectedCells[0].value) : selectedCells[0].value;
                            }
                            else {
                                this.mode = Mode.MULTIPLE;
                                copiedData = this.converseStructure(selectedCells, cut);
                            }
                            $("#copyHelper").val(copiedData).select();
                            document.execCommand("copy");
                            return selectedCells;
                        };
                        /**
                         * Convert structure.
                         */
                        Printer.prototype.converseStructure = function (cells, cut) {
                            var self = this;
                            var maxRow = 0;
                            var minRow = 0;
                            var maxColumn = 0;
                            var minColumn = 0;
                            var structure = [];
                            var structData = "";
                            _.forEach(cells, function (cell, index) {
                                var rowIndex = cell.rowIndex;
                                var columnIndex = helper.getDisplayColumnIndex(self.$grid, cell.columnKey);
                                if (index === 0) {
                                    minRow = maxRow = rowIndex;
                                    minColumn = maxColumn = columnIndex;
                                }
                                if (rowIndex < minRow)
                                    minRow = rowIndex;
                                if (rowIndex > maxRow)
                                    maxRow = rowIndex;
                                if (columnIndex < minColumn)
                                    minColumn = columnIndex;
                                if (columnIndex > maxColumn)
                                    maxColumn = columnIndex;
                                if (uk.util.isNullOrUndefined(structure[rowIndex])) {
                                    structure[rowIndex] = {};
                                }
                                var ds = internal.getDataSource(self.$grid);
                                var pk = helper.getPrimaryKey(self.$grid);
                                if (helper.isDetCell(self.$grid, rowIndex, cell.columnKey)
                                    || helper.isXCell(self.$grid, ds[rowIndex][pk], cell.columnKey, style.HIDDEN_CLS, style.SEAL_CLS)) {
                                    structure[rowIndex][columnIndex] = undefined;
                                }
                                else
                                    structure[rowIndex][columnIndex] = helper.stringValue(cell.value);
                            });
                            for (var i = minRow; i <= maxRow; i++) {
                                for (var j = minColumn; j <= maxColumn; j++) {
                                    if (uk.util.isNullOrUndefined(structure[i]) || uk.util.isNullOrUndefined(structure[i][j])
                                        || uk.util.isNullOrEmpty(structure[i][j])) {
                                        structData += "null";
                                    }
                                    else {
                                        structData += structure[i][j];
                                    }
                                    if (j === maxColumn)
                                        structData += "\n";
                                    else
                                        structData += "\t";
                                }
                            }
                            return structData;
                        };
                        /**
                         * Cut.
                         */
                        Printer.prototype.cut = function () {
                            var self = this;
                            var selectedCells = this.copy(true);
                            _.forEach(selectedCells, function (cell) {
                                var $cell = selection.cellAt(self.$grid, cell.rowIndex, cell.columnKey);
                                var value = "";
                                if ($cell.find("." + render.CHILD_CELL_CLS).length > 0) {
                                    value = ["", ""];
                                }
                                update.gridCell(self.$grid, cell.rowIndex, cell.columnKey, -1, value);
                            });
                        };
                        /**
                         * Paste.
                         */
                        Printer.prototype.paste = function (evt) {
                            if (this.mode === Mode.SINGLE) {
                                this.pasteSingleCell(evt);
                            }
                            else {
                                this.pasteRange(evt);
                            }
                        };
                        /**
                         * Paste single cell.
                         */
                        Printer.prototype.pasteSingleCell = function (evt) {
                            var self = this;
                            var cbData = this.getClipboardContent(evt);
                            cbData = helper.getCellData(cbData);
                            var selectedCells = selection.getSelectedCells(this.$grid);
                            var txId = uk.util.randomId();
                            _.forEach(selectedCells, function (cell, index) {
                                update.gridCellOw(self.$grid, cell.rowIndex, cell.columnKey, -1, cbData, txId);
                            });
                        };
                        /**
                         * Paste range.
                         */
                        Printer.prototype.pasteRange = function (evt) {
                            var cbData = this.getClipboardContent(evt);
                            cbData = this.process(cbData);
                            this.updateWith(cbData);
                        };
                        /**
                         * Process.
                         */
                        Printer.prototype.process = function (data) {
                            var dataRows = _.map(data.split("\n"), function (row) {
                                return _.map(row.split("\t"), function (cData) {
                                    return cData.indexOf(",") > 0 ? cData.split(",") : cData;
                                });
                            });
                            var rowsCount = dataRows.length;
                            if ((dataRows[rowsCount - 1].length === 1 && dataRows[rowsCount - 1][0] === "")
                                || (dataRows.length === 1 && dataRows[0].length === 1
                                    && (dataRows[0][0] === "" || dataRows[0][0] === "\r"))) {
                                dataRows.pop();
                            }
                            return dataRows;
                        };
                        /**
                         * Update with.
                         */
                        Printer.prototype.updateWith = function (data) {
                            var self = this;
                            var selectedCell = selection.getSelectedCells(self.$grid)[0];
                            if (selectedCell === undefined)
                                return;
                            var visibleColumns = helper.gridVisibleColumns(self.$grid);
                            var rowIndex = selectedCell.rowIndex;
                            var startColumnIndex = helper.indexOf(selectedCell.columnKey, visibleColumns);
                            if (startColumnIndex === -1)
                                return;
                            var txId = uk.util.randomId();
                            var ds = internal.getDataSource(self.$grid);
                            var size = ds ? ds.length : 0;
                            _.forEach(data, function (row, idx) {
                                var rowData = {};
                                var columnKey = selectedCell.columnKey;
                                var columnIndex = startColumnIndex;
                                for (var i = 0; i < row.length; i++) {
                                    if (!uk.util.isNullOrUndefined(row[i]) && row[i].constructor !== Array && row[i].trim() === "null") {
                                        columnKey = helper.nextKeyOf(columnIndex++, visibleColumns);
                                        if (!columnKey)
                                            break;
                                        continue;
                                    }
                                    rowData[columnKey] = helper.getCellData(row[i]);
                                    columnKey = helper.nextKeyOf(columnIndex++, visibleColumns);
                                    if (!columnKey)
                                        break;
                                }
                                if (rowIndex >= size)
                                    return false;
                                update.gridRowOw(self.$grid, rowIndex, rowData, txId);
                                rowIndex++;
                            });
                        };
                        /**
                         * Undo.
                         */
                        Printer.prototype.undo = function () {
                            var self = this;
                            var histories = self.$grid.data(internal.COPY_HISTORY);
                            if (!histories || histories.length === 0)
                                return;
                            var tx = histories.pop();
                            _.forEach(tx.items, function (item) {
                                update.gridCell(self.$grid, item.rowIndex, item.columnKey, -1, item.value, true);
                                internal.removeChange(self.$grid, item);
                            });
                        };
                        /**
                         * Get clipboard content.
                         */
                        Printer.prototype.getClipboardContent = function (evt) {
                            if (window.clipboardData) {
                                window.event.returnValue = false;
                                return window.clipboardData.getData("text");
                            }
                            else {
                                return evt.originalEvent.clipboardData.getData("text/plain");
                            }
                        };
                        return Printer;
                    }());
                    copy.Printer = Printer;
                    /**
                     * On.
                     */
                    function on($grid, updateMode) {
                        if (updateMode === COPY_PASTE) {
                            new Printer().hook($grid);
                        }
                    }
                    copy.on = on;
                    /**
                     * Off.
                     */
                    function off($grid, updateMode) {
                        if (updateMode !== COPY_PASTE) {
                            $grid.off(events.FOCUS_IN).off(events.KEY_DOWN);
                            $("#" + copy.COPY_ID).remove();
                            $("#" + copy.PASTE_ID).remove();
                        }
                    }
                    copy.off = off;
                })(copy || (copy = {}));
                var spread;
                (function (spread) {
                    spread.SINGLE = "single";
                    spread.MULTIPLE = "multiple";
                    var Sticker = (function () {
                        function Sticker(data) {
                            this.mode = spread.MULTIPLE;
                            this.validate = function () { return true; };
                            this.data = data;
                        }
                        return Sticker;
                    }());
                    spread.Sticker = Sticker;
                    /**
                     * Bind sticker.
                     */
                    function bindSticker($cell, rowIdx, columnKey, options) {
                        if (options.containerClass !== BODY_PRF + DETAIL || uk.util.isNullOrUndefined(options.updateMode)
                            || options.updateMode !== STICK)
                            return;
                        $cell.on(events.CLICK_EVT, function (evt) {
                            if (evt.ctrlKey)
                                return;
                            var $grid = $cell.closest("." + BODY_PRF + DETAIL);
                            var sticker = $grid.data(internal.STICKER);
                            if (!sticker || uk.util.isNullOrUndefined(sticker.data)
                                || uk.util.isNullOrUndefined(sticker.validate))
                                return;
                            var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                            var visibleColumns = gen.painter.visibleColumns;
                            var data = {};
                            var key = columnKey;
                            var colIndex = helper.indexOf(key, visibleColumns);
                            if (sticker.mode === spread.SINGLE) {
                                var result = void 0;
                                if ((result = sticker.validate(rowIdx, columnKey, sticker.data)) !== true) {
                                    // TODO: show error
                                    result();
                                    return;
                                }
                                update.stickGridCellOw($grid, rowIdx, columnKey, -1, sticker.data);
                                return;
                            }
                            _.forEach(sticker.data, function (cData) {
                                data[key] = cData;
                                key = helper.nextKeyOf(colIndex++, visibleColumns);
                                if (!key)
                                    return false;
                            });
                            update.stickGridRowOw($grid, rowIdx, data);
                        });
                    }
                    spread.bindSticker = bindSticker;
                })(spread || (spread = {}));
                var validation;
                (function (validation) {
                    validation.TIME_SPLIT = ":";
                    validation.TIME_PTN = /^\d+:\d{2}$/;
                    validation.SHORT_TIME_PTN = /^\d+$/;
                    validation.NUMBER_PTN = /^\d+$/;
                    validation.MINUTE_MAX = 59;
                    validation.HOUR_MAX = 24;
                    validation.DEF_HOUR_MAX = 9999;
                    validation.DEF_HOUR_MIN = 0;
                    validation.DEF_MIN_MAXMIN = 0;
                    var Result = (function () {
                        function Result(isValid, value) {
                            this.isValid = isValid;
                            this.value = value;
                        }
                        Result.fail = function () {
                            return new Result(false);
                        };
                        Result.ok = function (value) {
                            return new Result(true, value);
                        };
                        return Result;
                    }());
                    /**
                     * Validate.
                     */
                    function validate($body, $cell, rowIdx, columnKey, innerIdx, value, timeRangerDef) {
                        var vtor = validation.mandate($body, columnKey, innerIdx);
                        var gen = $body.data(internal.TANGI) || $body.data(internal.CANON);
                        var rowId = gen.dataSource[rowIdx][gen.primaryKey];
                        timeRangerDef = timeRangerDef || $body.data(internal.TIME_VALID_RANGE);
                        var formatValue;
                        if (vtor) {
                            if ((vtor.actValid === internal.TIME || vtor.actValid === internal.DURATION) && timeRangerDef) {
                                var ranges = timeRangerDef[rowId];
                                _.forEach(ranges, function (range) {
                                    if (range && range.columnKey === columnKey && range.innerIdx === innerIdx) {
                                        vtor.max = range.max;
                                        vtor.min = range.min;
                                        return Result.fail();
                                    }
                                });
                            }
                            var isValid = void 0;
                            if (vtor.required && (_.isUndefined(value) || _.isEmpty(value))) {
                                isValid = false;
                            }
                            else if (!_.isUndefined(value) && !_.isEmpty(value)) {
                                if (vtor.actValid === internal.TIME) {
                                    isValid = isTimeClock(value);
                                    formatValue = formatTime(value);
                                }
                                else if (vtor.actValid === internal.DURATION) {
                                    isValid = isTimeDuration(value, vtor.max, vtor.min);
                                    formatValue = formatTime(value);
                                }
                                else if (vtor.actValid === internal.NUMBER) {
                                    isValid = isNumber(value, vtor.max, vtor.min);
                                    formatValue = (_.isUndefined(value) || _.isEmpty(value)) ? "" : Number(value);
                                }
                                else {
                                    isValid = true;
                                    formatValue = value;
                                }
                            }
                            else {
                                isValid = true;
                                formatValue = "";
                            }
                            var $tbl = $body.closest("." + NAMESPACE);
                            if (!isValid) {
                                errors.add($tbl, $cell, rowIdx, columnKey, innerIdx, value);
                                //                cellData($exTable, rowIdx, columnKey, innerIdx, value);
                                //                    update.setText($cell, innerIdx, value);
                                return Result.fail();
                            }
                            if (errors.any($cell, innerIdx))
                                errors.remove($tbl, $cell, rowIdx, columnKey, innerIdx);
                        }
                        return Result.ok(formatValue);
                    }
                    validation.validate = validate;
                    /**
                     * Mandate.
                     */
                    function mandate($grid, columnKey, innerIdx) {
                        var visibleColumns = helper.getVisibleColumnsOn($grid);
                        var actValid, dataType, max, min, required;
                        _.forEach(visibleColumns, function (col) {
                            if (col.key === columnKey) {
                                if (!col.dataType)
                                    return false;
                                dataType = col.dataType.toLowerCase();
                                actValid = which(innerIdx, dataType, internal.TIME)
                                    || which(innerIdx, dataType, internal.DURATION)
                                    || which(innerIdx, dataType, internal.NUMBER)
                                    || which(innerIdx, dataType, internal.TEXT);
                                max = col.max;
                                min = col.min;
                                required = col.required;
                                return false;
                            }
                        });
                        if (actValid)
                            return {
                                actValid: actValid,
                                max: max,
                                min: min,
                                required: required
                            };
                    }
                    validation.mandate = mandate;
                    /**
                     * Which.
                     */
                    function which(innerIdx, dataType, type) {
                        var actValid;
                        if (dataType && dataType.indexOf(type) !== -1) {
                            if (!uk.util.isNullOrUndefined(innerIdx) && innerIdx > -1) {
                                _.forEach(dataType.split(internal.DT_SEPARATOR), function (p, index) {
                                    if (p === type && index === innerIdx) {
                                        actValid = type;
                                        return false;
                                    }
                                });
                            }
                            else {
                                actValid = type;
                            }
                        }
                        return actValid;
                    }
                    /**
                     * Check time clock.
                     */
                    function isTimeClock(time) {
                        if (uk.util.isNullOrUndefined(time))
                            return false;
                        time = time.trim();
                        var hour, minute;
                        if (validation.TIME_PTN.test(time)) {
                            var parts = time.split(validation.TIME_SPLIT);
                            hour = parseInt(parts[0]);
                            minute = parseInt(parts[1]);
                        }
                        else if (validation.SHORT_TIME_PTN.test(time)) {
                            var totalTime = parseInt(time);
                            minute = totalTime % 100;
                            hour = Math.floor(totalTime / 100);
                        }
                        if (((hour !== NaN && hour >= 0 && hour <= validation.HOUR_MAX) || hour === NaN)
                            && minute !== NaN && minute >= 0 && minute <= validation.MINUTE_MAX)
                            return true;
                        return false;
                    }
                    validation.isTimeClock = isTimeClock;
                    /**
                     * Check time duration.
                     */
                    function isTimeDuration(time, max, min) {
                        if (uk.util.isNullOrUndefined(time))
                            return false;
                        time = time.trim();
                        var hour, minute, minMM, maxHour = validation.DEF_HOUR_MAX, minHour = validation.DEF_HOUR_MIN;
                        var maxMM = minMM = validation.DEF_MIN_MAXMIN;
                        var maxTime = parse(max) || { hour: validation.DEF_HOUR_MAX, minute: validation.DEF_MIN_MAXMIN };
                        var minTime = parse(min) || { hour: validation.DEF_HOUR_MIN, minute: validation.DEF_MIN_MAXMIN };
                        if (validation.TIME_PTN.test(time)) {
                            var parts = time.split(validation.TIME_SPLIT);
                            hour = parseInt(parts[0]);
                            minute = parseInt(parts[1]);
                        }
                        else if (validation.SHORT_TIME_PTN.test(time)) {
                            var totalTime = parseInt(time);
                            minute = totalTime % 100;
                            hour = Math.floor(totalTime / 100);
                        }
                        if (((uk.util.isNullOrUndefined(hour) || hour === NaN) && (uk.util.isNullOrUndefined(minute) || minute === NaN))
                            || minute > validation.MINUTE_MAX)
                            return false;
                        var targetTime = { hour: hour, minute: minute };
                        if (compare(targetTime, maxTime) > 0 || compare(targetTime, minTime) < 0)
                            return false;
                        return true;
                    }
                    validation.isTimeDuration = isTimeDuration;
                    /**
                     * Check number.
                     */
                    function isNumber(value, max, min) {
                        if (!validation.NUMBER_PTN.test(value))
                            return false;
                        var int = parseInt(value);
                        if ((!uk.util.isNullOrUndefined(max) && int > parseInt(max))
                            || (!uk.util.isNullOrUndefined(min) && int < parseInt(min)))
                            return false;
                        return true;
                    }
                    /**
                     * Compare.
                     */
                    function compare(one, other) {
                        if (one.hour > other.hour) {
                            return 1;
                        }
                        else if (one.hour < other.hour) {
                            return -1;
                        }
                        else if (one.minute > other.minute) {
                            return 1;
                        }
                        else if (one.minute < other.minute) {
                            return -1;
                        }
                        return 0;
                    }
                    /**
                     * Parse.
                     */
                    function parse(time) {
                        if (validation.TIME_PTN.test(time)) {
                            var parts = time.split(validation.TIME_SPLIT);
                            var hour = parseInt(parts[0]);
                            var minute = parseInt(parts[1]);
                            return {
                                hour: hour,
                                minute: minute
                            };
                        }
                    }
                    /**
                     * Format time.
                     */
                    function formatTime(time) {
                        var minute, hour;
                        if (validation.SHORT_TIME_PTN.test(time)) {
                            var totalTime = parseInt(time);
                            minute = totalTime % 100;
                            hour = Math.floor(totalTime / 100);
                        }
                        if (!uk.util.isNullOrUndefined(hour) && hour !== NaN
                            && !uk.util.isNullOrUndefined(minute) && minute !== NaN) {
                            if (minute < 10)
                                minute = "0" + minute;
                            return hour + validation.TIME_SPLIT + minute;
                        }
                        if (!uk.util.isNullOrUndefined(hour) && hour === NaN
                            && !uk.util.isNullOrUndefined(minute) && minute !== NaN) {
                            return minute;
                        }
                        return time;
                    }
                    validation.formatTime = formatTime;
                })(validation || (validation = {}));
                var errors;
                (function (errors_2) {
                    errors_2.ERROR_CLS = "x-error";
                    errors_2.ERRORS = "errors";
                    /**
                     * Add.
                     */
                    function add($grid, $cell, rowIdx, columnKey, innerIdx, value) {
                        if (any($cell, innerIdx))
                            return;
                        var errors = $grid.data(errors_2.ERRORS);
                        var newErr = new selection.Cell(rowIdx, columnKey, value, innerIdx);
                        if (!errors) {
                            errors = [newErr];
                            $grid.data(errors_2.ERRORS, errors);
                        }
                        else {
                            errors.push(newErr);
                        }
                        if ($cell.is("td") && !uk.util.isNullOrUndefined(innerIdx) && innerIdx > -1) {
                            $cell.find("div:eq(" + innerIdx + ")").addClass(errors_2.ERROR_CLS);
                        }
                        else {
                            $cell.addClass(errors_2.ERROR_CLS);
                        }
                    }
                    errors_2.add = add;
                    /**
                     * Remove.
                     */
                    function remove($grid, $cell, rowIdx, columnKey, innerIdx) {
                        var errors = $grid.data(errors_2.ERRORS);
                        if (!errors)
                            return;
                        var idx;
                        _.forEach(errors, function (err, index) {
                            if (helper.areSameCells(err, { rowIndex: rowIdx, columnKey: columnKey, innerIdx: innerIdx })) {
                                idx = index;
                                return false;
                            }
                        });
                        if (!uk.util.isNullOrUndefined(idx)) {
                            errors.splice(idx, 1);
                            if ($cell.is("td") && !uk.util.isNullOrUndefined(innerIdx) && innerIdx > -1) {
                                $cell.find("div:eq(" + innerIdx + ")").removeClass(errors_2.ERROR_CLS);
                            }
                            else {
                                $cell.removeClass(errors_2.ERROR_CLS);
                            }
                        }
                    }
                    errors_2.remove = remove;
                    /**
                     * Clear.
                     */
                    function clear($grid) {
                        $grid.data(errors_2.ERRORS, null);
                    }
                    errors_2.clear = clear;
                    /**
                     * Any.
                     */
                    function any($cell, innerIdx) {
                        var $childCells = $cell.find("." + render.CHILD_CELL_CLS);
                        if (!uk.util.isNullOrUndefined(innerIdx) && $childCells.length > 0) {
                            return $($childCells[innerIdx]).hasClass(errors_2.ERROR_CLS);
                        }
                        return $cell.hasClass(errors_2.ERROR_CLS);
                    }
                    errors_2.any = any;
                    /**
                     * Occurred.
                     */
                    function occurred($grid) {
                        var errs = $grid.data(errors_2.ERRORS);
                        if (!errs)
                            return false;
                        return errs.length > 0;
                    }
                    errors_2.occurred = occurred;
                })(errors || (errors = {}));
                var selection;
                (function (selection) {
                    selection.CELL_SELECTED_CLS = "x-cell-selected";
                    selection.ROW_SELECTED_CLS = "x-row-selected";
                    var Cell = (function () {
                        function Cell(rowIdx, columnKey, value, innerIdx) {
                            this.rowIndex = rowIdx;
                            this.columnKey = columnKey;
                            this.value = value;
                            this.innerIdx = innerIdx;
                        }
                        return Cell;
                    }());
                    selection.Cell = Cell;
                    /**
                     * Check up.
                     */
                    function checkUp($exTable) {
                        if ($exTable.data(NAMESPACE).updateMode !== COPY_PASTE)
                            return;
                        var $detailContent = $exTable.find("." + BODY_PRF + DETAIL);
                        var isSelecting;
                        $detailContent[0].onselectstart = function () {
                            return false;
                        };
                        $detailContent.on(events.MOUSE_DOWN, function (evt) {
                            var $target = $(evt.target);
                            isSelecting = true;
                            if (!$target.is("." + render.CHILD_CELL_CLS) && !$target.is("td"))
                                return;
                            if (evt.shiftKey) {
                                selectRange($detailContent, $target);
                                return;
                            }
                            if (!evt.ctrlKey) {
                                clearAll($detailContent);
                            }
                            selectCell($detailContent, $target);
                        }).on(events.MOUSE_UP, function (evt) {
                            isSelecting = false;
                        }).on(events.MOUSE_MOVE, function (evt) {
                            if (isSelecting) {
                                selectRange($detailContent, $(evt.target));
                            }
                        });
                    }
                    selection.checkUp = checkUp;
                    /**
                     * Select range.
                     */
                    function selectRange($grid, $cell) {
                        if (uk.util.isNullOrUndefined($cell) || $cell.length === 0)
                            return;
                        var lastSelected = $grid.data(internal.LAST_SELECTED);
                        if (!lastSelected) {
                            selectCell($grid, $cell);
                            return;
                        }
                        clearAll($grid);
                        var toCoord = helper.getCellCoord($cell);
                        var minRowIdx = Math.min(lastSelected.rowIdx, toCoord.rowIdx);
                        var maxRowIdx = Math.max(lastSelected.rowIdx, toCoord.rowIdx);
                        for (var i = minRowIdx; i < maxRowIdx + 1; i++) {
                            cellInRange($grid, i, lastSelected.columnKey, toCoord.columnKey);
                        }
                    }
                    /**
                     * Mark cell.
                     */
                    function markCell($cell) {
                        if ($cell.is("." + render.CHILD_CELL_CLS)) {
                            $cell.addClass(selection.CELL_SELECTED_CLS);
                            $cell.siblings("." + render.CHILD_CELL_CLS).addClass(selection.CELL_SELECTED_CLS);
                            return true;
                        }
                        else if ($cell.is("td")) {
                            var childCells = $cell.find("." + render.CHILD_CELL_CLS);
                            if (childCells.length > 0) {
                                childCells.addClass(selection.CELL_SELECTED_CLS);
                            }
                            else {
                                $cell.addClass(selection.CELL_SELECTED_CLS);
                            }
                            return true;
                        }
                        return false;
                    }
                    selection.markCell = markCell;
                    /**
                     * Select cell.
                     */
                    function selectCell($grid, $cell, notLast) {
                        if (!markCell($cell))
                            return;
                        var coord = helper.getCellCoord($cell);
                        addSelect($grid, coord.rowIdx, coord.columnKey, notLast);
                        tickRows($grid.siblings("." + BODY_PRF + LEFTMOST), false);
                    }
                    selection.selectCell = selectCell;
                    /**
                     * Add select.
                     */
                    function addSelect($grid, rowIdx, columnKey, notLast) {
                        var selectedCells = $grid.data(internal.SELECTED_CELLS);
                        if (!notLast)
                            $grid.data(internal.LAST_SELECTED, { rowIdx: rowIdx, columnKey: columnKey });
                        if (!selectedCells) {
                            selectedCells = {};
                            selectedCells[rowIdx] = [columnKey];
                            $grid.data(internal.SELECTED_CELLS, selectedCells);
                            return;
                        }
                        if (!selectedCells[rowIdx]) {
                            selectedCells[rowIdx] = [columnKey];
                            return;
                        }
                        if (_.find(selectedCells[rowIdx], function (key) {
                            return key === columnKey;
                        }) === undefined) {
                            selectedCells[rowIdx].push(columnKey);
                        }
                    }
                    selection.addSelect = addSelect;
                    /**
                     * Clear.
                     */
                    function clear($grid, rowIdx, columnKey) {
                        var selectedCells = $grid.data(internal.SELECTED_CELLS);
                        if (!selectedCells)
                            return;
                        var row = selectedCells[rowIdx];
                        if (!row || row.length === 0)
                            return;
                        var colIdx;
                        _.forEach(row, function (key, index) {
                            if (key === columnKey) {
                                colIdx = index;
                                return false;
                            }
                        });
                        if (uk.util.isNullOrUndefined(colIdx))
                            return;
                        row.splice(colIdx, 1);
                        var selectedCell = cellAt($grid, rowIdx, columnKey);
                        if (selectedCell === intan.NULL)
                            return;
                        if (selectedCell && selectedCell.length > 0) {
                            var $childCells = selectedCell.find("." + render.CHILD_CELL_CLS);
                            if ($childCells.length > 0) {
                                $childCells.removeClass(selection.CELL_SELECTED_CLS);
                            }
                            else {
                                selectedCell.removeClass(selection.CELL_SELECTED_CLS);
                            }
                        }
                    }
                    selection.clear = clear;
                    /**
                     * Clear all.
                     */
                    function clearAll($grid) {
                        var selectedCells = $grid.data(internal.SELECTED_CELLS);
                        if (!selectedCells)
                            return;
                        _.forEach(Object.keys(selectedCells), function (rowIdx, index) {
                            if (!rowExists($grid, rowIdx))
                                return;
                            _.forEach(selectedCells[rowIdx], function (col, i) {
                                var $cell = cellAt($grid, rowIdx, col);
                                if ($cell && $cell.length > 0) {
                                    var childCells = $cell.find("." + render.CHILD_CELL_CLS);
                                    if (childCells.length > 0) {
                                        childCells.removeClass(selection.CELL_SELECTED_CLS);
                                    }
                                    else {
                                        $cell.removeClass(selection.CELL_SELECTED_CLS);
                                    }
                                }
                            });
                        });
                        $grid.data(internal.SELECTED_CELLS, null);
                    }
                    selection.clearAll = clearAll;
                    /**
                     * Cell at.
                     */
                    function cellAt($grid, rowIdx, columnKey) {
                        var $row = rowAt($grid, rowIdx);
                        return getCellInRow($grid, $row, columnKey);
                    }
                    selection.cellAt = cellAt;
                    /**
                     * Row at.
                     */
                    function rowAt($grid, rowIdx) {
                        var virt = $grid.data(internal.TANGI);
                        if (!virt)
                            return $grid.find("tr:eq(" + (parseInt(rowIdx) + 1) + ")");
                        if (virt.startIndex > rowIdx || virt.endIndex < rowIdx)
                            return intan.NULL;
                        return $grid.find("tr:eq(" + (parseInt(rowIdx) - virt.startIndex + 1) + ")");
                    }
                    selection.rowAt = rowAt;
                    /**
                     * Cell of.
                     */
                    function cellOf($grid, rowId, columnKey) {
                        var $row = rowOf($grid, rowId);
                        return getCellInRow($grid, $row, columnKey);
                    }
                    selection.cellOf = cellOf;
                    /**
                     * Row of.
                     */
                    function rowOf($grid, rowId) {
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        if (!gen)
                            return;
                        var start = gen.startIndex || 0;
                        var end = gen.endIndex || gen.dataSource.length - 1;
                        for (var i = start; i <= end; i++) {
                            if (gen.dataSource[i][gen.primaryKey] === rowId) {
                                return rowAt($grid, i);
                            }
                        }
                    }
                    selection.rowOf = rowOf;
                    /**
                     * Row exists.
                     */
                    function rowExists($grid, rowIdx) {
                        var virt = $grid.data(internal.TANGI);
                        if (virt && (virt.startIndex > rowIdx || virt.endIndex < rowIdx))
                            return false;
                        return true;
                    }
                    selection.rowExists = rowExists;
                    /**
                     * Cell in range.
                     */
                    function cellInRange($grid, rowIdx, startKey, endKey) {
                        var range = [];
                        var $row = rowAt($grid, rowIdx);
                        if ($row === intan.NULL)
                            return;
                        var colRange = columnIndexRange($grid, startKey, endKey);
                        if (colRange.start === -1 || colRange.end === -1)
                            return;
                        var min = Math.min(colRange.start, colRange.end);
                        var max = Math.max(colRange.start, colRange.end);
                        var $td = $row.find("td").filter(function () {
                            return $(this).css("display") !== "none";
                        }).each(function (index) {
                            if (index >= min && index <= max) {
                                var childCells = $(this).find("." + render.CHILD_CELL_CLS);
                                if (childCells.length > 0) {
                                    childCells.addClass(selection.CELL_SELECTED_CLS);
                                }
                                else {
                                    $(this).addClass(selection.CELL_SELECTED_CLS);
                                }
                                addSelect($grid, rowIdx, colRange.columns[index].key, true);
                                range.push($(this));
                            }
                            else if (index > max)
                                return false;
                        });
                        return range;
                    }
                    selection.cellInRange = cellInRange;
                    /**
                     * Get cell in row.
                     */
                    function getCellInRow($grid, $row, columnKey) {
                        if ($row === intan.NULL || !$row)
                            return intan.NULL;
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        var visibleColumns = gen.painter.visibleColumns;
                        var columnIdx;
                        _.forEach(visibleColumns, function (c, idx) {
                            if (c.key === columnKey) {
                                columnIdx = idx;
                                return false;
                            }
                        });
                        if (uk.util.isNullOrUndefined(columnIdx))
                            return intan.NULL;
                        return $row.find("td").filter(function () {
                            return $(this).css("display") !== "none";
                        }).eq(columnIdx);
                    }
                    selection.getCellInRow = getCellInRow;
                    /**
                     * Column index range.
                     */
                    function columnIndexRange($grid, startKey, endKey) {
                        var cloud = $grid.data(internal.TANGI);
                        var canon = $grid.data(internal.CANON);
                        var visibleColumns;
                        if (!uk.util.isNullOrUndefined(cloud)) {
                            visibleColumns = cloud.painter.visibleColumns;
                        }
                        else {
                            visibleColumns = canon.painter.visibleColumns;
                        }
                        var startColumnIdx = -1, endColumnIdx = -1;
                        _.forEach(visibleColumns, function (c, idx) {
                            if (c.key === startKey) {
                                startColumnIdx = idx;
                            }
                            if (c.key === endKey) {
                                endColumnIdx = idx;
                            }
                            if (startColumnIdx !== -1 && endColumnIdx !== -1)
                                return false;
                        });
                        return {
                            start: startColumnIdx,
                            end: endColumnIdx,
                            columns: visibleColumns
                        };
                    }
                    selection.columnIndexRange = columnIndexRange;
                    /**
                     * Get selected cells.
                     */
                    function getSelectedCells($grid) {
                        var selectedCells = $grid.data(internal.SELECTED_CELLS);
                        var generator = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        var dataSource = generator.dataSource;
                        var cells = [];
                        _.forEach(Object.keys(selectedCells), function (rowIdx) {
                            _.forEach(selectedCells[rowIdx], function (colKey) {
                                cells.push(new Cell(rowIdx, colKey, dataSource[rowIdx][colKey]));
                            });
                        });
                        return cells;
                    }
                    selection.getSelectedCells = getSelectedCells;
                    /**
                     * Off.
                     */
                    function off($exTable) {
                        if ($exTable.data(NAMESPACE).updateMode === COPY_PASTE)
                            return;
                        var $detailContent = $exTable.find("." + BODY_PRF + DETAIL);
                        $detailContent[0].onselectstart = function () {
                            return true;
                        };
                        $detailContent.off(events.MOUSE_DOWN).off(events.MOUSE_UP).off(events.MOUSE_MOVE);
                    }
                    selection.off = off;
                    /**
                     * Focus.
                     */
                    function focus($grid) {
                        $grid.focus();
                    }
                    selection.focus = focus;
                    /**
                     * Focus latest.
                     */
                    function focusLatest($grid) {
                        var latest = $grid.data(internal.LAST_SELECTED);
                        if (!latest)
                            return;
                        var $cell = selection.cellAt($grid, latest.rowIdx, latest.columnKey);
                        if ($cell === intan.NULL || $cell.length === 0)
                            return;
                        $cell.focus();
                    }
                    selection.focusLatest = focusLatest;
                    /**
                     * Select row.
                     */
                    function selectRow($grid, rowIndex) {
                        var $row = selection.rowAt($grid, rowIndex);
                        if ($row !== intan.NULL && !$row.hasClass(NAMESPACE + "-" + intan.BOTTOM_SPACE)) {
                            $row.addClass(selection.ROW_SELECTED_CLS);
                        }
                        setTimeout(function () {
                            $row = selection.rowAt($grid.siblings("div[class*='" + BODY_PRF + "']").filter(function () {
                                return !$(this).hasClass(BODY_PRF + HORIZONTAL_SUM) && !$(this).hasClass(BODY_PRF + LEFT_HORZ_SUM);
                            }), rowIndex);
                            if ($row !== intan.NULL && !$row.hasClass(NAMESPACE + "-" + intan.BOTTOM_SPACE)) {
                                $row.addClass(selection.ROW_SELECTED_CLS);
                            }
                        }, 60);
                        var selectedRows = $grid.data(internal.SELECTED_ROWS);
                        if (!selectedRows) {
                            selectedRows = {};
                            selectedRows.items = [];
                            selectedRows.items[rowIndex] = true;
                            selectedRows.count = (selectedRows.count || 0) + 1;
                            $grid.data(internal.SELECTED_ROWS, selectedRows);
                            return;
                        }
                        if (!selectedRows.items) {
                            selectedRows.items = [];
                            selectedRows.items[rowIndex] = true;
                            selectedRows.count = (selectedRows.count || 0) + 1;
                            return;
                        }
                        if (!selectedRows.items[rowIndex]) {
                            selectedRows.items[rowIndex] = true;
                            selectedRows.count = (selectedRows.count || 0) + 1;
                        }
                    }
                    selection.selectRow = selectRow;
                    /**
                     * Deselect row.
                     */
                    function deselectRow($grid, rowIndex) {
                        selection.rowAt($grid, rowIndex).removeClass(selection.ROW_SELECTED_CLS);
                        selection.rowAt($grid.siblings("div[class*='" + BODY_PRF + "']").filter(function () {
                            return !$(this).hasClass(BODY_PRF + HORIZONTAL_SUM) && !$(this).hasClass(BODY_PRF + LEFT_HORZ_SUM);
                        }), rowIndex).removeClass(selection.ROW_SELECTED_CLS);
                        var selectedRows = $grid.data(internal.SELECTED_ROWS);
                        if (!selectedRows || !selectedRows.items || selectedRows.items.length === 0)
                            return;
                        selectedRows.items[rowIndex] = false;
                        selectedRows.count--;
                    }
                    selection.deselectRow = deselectRow;
                    /**
                     * Tick rows.
                     */
                    function tickRows($grid, flag, limit) {
                        var selectedRows = $grid.data(internal.SELECTED_ROWS);
                        if (!selectedRows || !selectedRows.items || selectedRows.items.length === 0)
                            return;
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        var start = limit ? gen.startIndex : 0;
                        var end = limit ? gen.endIndex : selectedRows.items.length - 1;
                        for (var i = start; i <= end; i++) {
                            if (selectedRows.items[i]) {
                                controls.tick(flag, $grid, false, i);
                            }
                        }
                    }
                    selection.tickRows = tickRows;
                })(selection || (selection = {}));
                var resize;
                (function (resize) {
                    resize.AGENCY = "ex-agency";
                    resize.LINE = "ex-line";
                    resize.RESIZE_COL = "resize-column";
                    resize.AREA_AGENCY = "ex-area-agency";
                    resize.RESIZE_AREA = "resize-area";
                    resize.AREA_LINE = "ex-area-line";
                    resize.STAY_CLS = "x-stay";
                    var ColumnAdjuster = (function () {
                        function ColumnAdjuster($headerTable, $contentTable, options) {
                            this.$headerTable = $headerTable;
                            this.$contentTable = $contentTable;
                            this.$ownerDoc = $($headerTable[0].ownerDocument);
                            this.standardCells = [];
                        }
                        /**
                         * Handle.
                         */
                        ColumnAdjuster.prototype.handle = function () {
                            var self = this;
                            self.$agency = $("<div/>").addClass(resize.AGENCY).css({ position: "relative", width: self.$headerTable.outerWidth() });
                            self.$headerTable.before(self.$agency);
                            self.$colGroup = self.$headerTable.find("colgroup > col");
                            var trList = self.$headerTable.find("tbody > tr");
                            var targetColumnIdx = 0;
                            _.forEach(trList, function (tr) {
                                var tdList = $(tr).find("td");
                                for (var i = 0; i < tdList.length; i++) {
                                    if (self.standardCells.length >= self.$colGroup.length)
                                        return false;
                                    var $td = $(tdList[i]);
                                    var colspan = $td.attr("colspan");
                                    if (!uk.util.isNullOrUndefined(colspan) && parseInt(colspan) > 1)
                                        continue;
                                    self.standardCells.push($td);
                                    var $targetCol = $(self.$colGroup[targetColumnIdx]);
                                    var $line = $("<div/>").addClass(resize.LINE).data(resize.RESIZE_COL, $targetCol).css(lineStyles("-3px"));
                                    self.$agency.append($line);
                                    // Line positions
                                    var height = self.$headerTable.height();
                                    var left = $td.outerWidth() + ($td.offset().left - self.$agency.offset().left);
                                    $line.css({ left: left, height: height });
                                    targetColumnIdx++;
                                }
                            });
                            self.$agency.on(events.MOUSE_DOWN, $.proxy(self.cursorDown, self));
                        };
                        /**
                         * Cursor down.
                         */
                        ColumnAdjuster.prototype.cursorDown = function (event) {
                            var self = this;
                            if (self.actionDetails) {
                                self.cursorUp(event);
                            }
                            var $targetGrip = $(event.target);
                            var gripIndex = $targetGrip.index();
                            var $leftCol = $targetGrip.data(resize.RESIZE_COL);
                            var $rightCol = self.$colGroup.eq(gripIndex + 1);
                            var leftWidth = $leftCol.width();
                            var rightWidth = $rightCol.width();
                            self.actionDetails = {
                                $targetGrip: $targetGrip,
                                gripIndex: gripIndex,
                                $leftCol: $leftCol,
                                $rightCol: $rightCol,
                                xCoord: getCursorX(event),
                                widths: {
                                    left: leftWidth,
                                    right: rightWidth
                                },
                                changedWidths: {
                                    left: leftWidth,
                                    right: rightWidth
                                }
                            };
                            self.$ownerDoc.on(events.MOUSE_MOVE, $.proxy(self.cursorMove, self));
                            self.$ownerDoc.on(events.MOUSE_UP, $.proxy(self.cursorUp, self));
                            event.preventDefault();
                        };
                        /**
                         * Cursor move.
                         */
                        ColumnAdjuster.prototype.cursorMove = function (event) {
                            var self = this;
                            if (!self.actionDetails)
                                return;
                            var distance = getCursorX(event) - self.actionDetails.xCoord;
                            if (distance === 0)
                                return;
                            var leftWidth, rightWidth;
                            if (distance > 0) {
                                leftWidth = self.actionDetails.widths.left + distance;
                                rightWidth = self.actionDetails.widths.right - distance;
                            }
                            else {
                                leftWidth = self.actionDetails.widths.left + distance;
                                rightWidth = self.actionDetails.widths.right - distance;
                            }
                            if (leftWidth <= 20 || rightWidth <= 20)
                                return;
                            self.actionDetails.changedWidths.left = leftWidth;
                            self.actionDetails.changedWidths.right = rightWidth;
                            if (self.actionDetails.$leftCol) {
                                self.setWidth(self.actionDetails.$leftCol, leftWidth);
                                var $contentLeftCol = self.$contentTable.find("colgroup > col").eq(self.actionDetails.gripIndex);
                                self.setWidth($contentLeftCol, leftWidth);
                            }
                            if (self.actionDetails.$rightCol) {
                                self.setWidth(self.actionDetails.$rightCol, rightWidth);
                                var $contentRightCol = self.$contentTable.find("colgroup > col").eq(self.actionDetails.gripIndex + 1);
                                self.setWidth($contentRightCol, rightWidth);
                            }
                        };
                        /**
                         * Cursor up.
                         */
                        ColumnAdjuster.prototype.cursorUp = function (event) {
                            var self = this;
                            self.$ownerDoc.off(events.MOUSE_MOVE);
                            self.$ownerDoc.off(events.MOUSE_UP);
                            self.syncLines();
                            self.actionDetails = null;
                        };
                        /**
                         * Set width.
                         */
                        ColumnAdjuster.prototype.setWidth = function ($col, width) {
                            $col.width(width);
                        };
                        /**
                         * Sync lines.
                         */
                        ColumnAdjuster.prototype.syncLines = function () {
                            var self = this;
                            self.$agency.width(self.$headerTable.width());
                            _.forEach(self.standardCells, function ($td, index) {
                                var height = self.$headerTable.height();
                                var left = $td.outerWidth() + ($td.offset().left - self.$agency.offset().left);
                                self.$agency.find("div:eq(" + index + ")").css({ left: left, height: height });
                            });
                        };
                        return ColumnAdjuster;
                    }());
                    resize.ColumnAdjuster = ColumnAdjuster;
                    var AreaAdjuster = (function () {
                        function AreaAdjuster($container, headerWrappers, bodyWrappers, $follower) {
                            this.$container = $container;
                            this.headerWrappers = headerWrappers;
                            this.bodyWrappers = bodyWrappers;
                            this.$ownerDoc = $($container[0].ownerDocument);
                            this.$leftHorzSumHeader = this.$container.find("." + HEADER_PRF + LEFT_HORZ_SUM);
                            this.$leftHorzSumContent = this.$container.find("." + BODY_PRF + LEFT_HORZ_SUM);
                            this.$horzSumHeader = this.$container.find("." + HEADER_PRF + HORIZONTAL_SUM);
                            this.$horzSumContent = this.$container.find("." + BODY_PRF + HORIZONTAL_SUM);
                            if ($follower) {
                                this.$depLeftmostHeader = $follower.find("." + HEADER_PRF + LEFTMOST);
                                this.$depLeftmostBody = $follower.find("." + BODY_PRF + LEFTMOST);
                                this.$depDetailHeader = $follower.find("." + HEADER_PRF + DETAIL);
                                this.$depDetailBody = $follower.find("." + BODY_PRF + DETAIL);
                            }
                        }
                        /**
                         * Handle.
                         */
                        AreaAdjuster.prototype.handle = function () {
                            var self = this;
                            self.$areaAgency = $("<div/>").addClass(resize.AREA_AGENCY).css({ position: "relative", width: self.$container.width() });
                            self.headerWrappers[0].before(self.$areaAgency);
                            _.forEach(self.headerWrappers, function ($wrapper, index) {
                                if (index === self.headerWrappers.length - 1)
                                    return;
                                var $line = $("<div/>").addClass(resize.AREA_LINE).data(resize.RESIZE_AREA, $wrapper).css(lineStyles("0px"));
                                self.$areaAgency.append($line);
                                // Line positions
                                var height = $wrapper.height() + self.bodyWrappers[index].height();
                                var left = $wrapper.outerWidth() + ($wrapper.offset().left - self.$areaAgency.offset().left);
                                $line.css({ left: left, height: height });
                                if ($wrapper.hasClass(HEADER_PRF + LEFTMOST) && self.headerWrappers[index + 1].hasClass(HEADER_PRF + MIDDLE))
                                    $line.addClass(resize.STAY_CLS);
                            });
                            self.$areaAgency.on(events.MOUSE_DOWN, $.proxy(self.cursorDown, self));
                        };
                        /**
                         * Cursor down.
                         */
                        AreaAdjuster.prototype.cursorDown = function (event) {
                            var self = this;
                            if (self.actionDetails) {
                                self.cursorUp(event);
                            }
                            var $targetGrip = $(event.target);
                            if ($targetGrip.hasClass(resize.STAY_CLS))
                                return;
                            var gripIndex = $targetGrip.index();
                            var $leftArea = $targetGrip.data(resize.RESIZE_AREA);
                            var $rightArea = self.headerWrappers[gripIndex + 1];
                            var leftWidth = $leftArea.width();
                            var rightWidth = !uk.util.isNullOrUndefined($rightArea) ? $rightArea.width() : 0;
                            var leftHorzSumWidth = self.$leftHorzSumHeader.width();
                            self.actionDetails = {
                                $targetGrip: $targetGrip,
                                gripIndex: gripIndex,
                                $leftArea: $leftArea,
                                $rightArea: $rightArea,
                                xCoord: getCursorX(event),
                                rightAreaPosLeft: $rightArea ? $rightArea.css("left") : 0,
                                widths: {
                                    left: leftWidth,
                                    right: rightWidth,
                                    leftHorzSum: leftHorzSumWidth
                                },
                                changedWidths: {
                                    left: leftWidth,
                                    right: rightWidth,
                                    leftHorzSum: leftHorzSumWidth
                                }
                            };
                            self.$ownerDoc.on(events.MOUSE_MOVE, $.proxy(self.cursorMove, self));
                            self.$ownerDoc.on(events.MOUSE_UP, $.proxy(self.cursorUp, self));
                            events.trigger(self.$container, events.AREA_RESIZE_STARTED, [$leftArea, $rightArea, leftWidth, rightWidth]);
                            event.preventDefault();
                        };
                        /**
                         * Cursor move.
                         */
                        AreaAdjuster.prototype.cursorMove = function (event) {
                            var self = this;
                            if (!self.actionDetails)
                                return;
                            var distance = getCursorX(event) - self.actionDetails.xCoord;
                            if (distance === 0)
                                return;
                            var $bodyLeftArea, $bodyRightArea, leftWidth, rightWidth;
                            // TODO: Use if here because there may be changes later.
                            if (distance > 0) {
                                leftWidth = self.actionDetails.widths.left + distance;
                                rightWidth = self.actionDetails.widths.right - distance;
                            }
                            else {
                                leftWidth = self.actionDetails.widths.left + distance;
                                rightWidth = self.actionDetails.widths.right - distance;
                            }
                            if (!self.isResizePermit(leftWidth, rightWidth))
                                return;
                            self.actionDetails.changedWidths.left = leftWidth;
                            self.actionDetails.changedWidths.right = rightWidth;
                            if (self.actionDetails.$leftArea) {
                                self.setWidth(self.actionDetails.$leftArea, leftWidth);
                                $bodyLeftArea = self.bodyWrappers[self.actionDetails.gripIndex];
                                if (self.actionDetails.gripIndex === self.bodyWrappers.length - 1) {
                                    self.setWidth($bodyLeftArea, leftWidth + helper.getScrollWidth());
                                }
                                else {
                                    self.setWidth($bodyLeftArea, leftWidth);
                                }
                            }
                            var newPosLeft;
                            if (self.actionDetails.$rightArea) {
                                self.setWidth(self.actionDetails.$rightArea, rightWidth);
                                newPosLeft = (parseInt(self.actionDetails.rightAreaPosLeft) + distance) + "px";
                                self.actionDetails.$rightArea.css("left", newPosLeft);
                                $bodyRightArea = self.bodyWrappers[self.actionDetails.gripIndex + 1];
                                if (self.actionDetails.gripIndex === self.bodyWrappers.length - 2) {
                                    self.setWidth($bodyRightArea, rightWidth + helper.getScrollWidth());
                                }
                                else {
                                    self.setWidth($bodyRightArea, rightWidth);
                                }
                                $bodyRightArea.css("left", newPosLeft);
                            }
                            self.reflectSumTblsSize(distance, leftWidth, rightWidth, newPosLeft);
                            events.trigger(self.$container, events.AREA_RESIZE, [self.actionDetails.$leftArea, self.actionDetails.$rightArea, leftWidth, rightWidth]);
                        };
                        /**
                         * Reflect size.
                         */
                        AreaAdjuster.prototype.reflectSumTblsSize = function (diff, leftWidth, rightWidth, posLeft) {
                            var self = this;
                            var $leftArea = self.actionDetails.$leftArea;
                            var $rightArea = self.actionDetails.$rightArea;
                            var scrollWidth = helper.getScrollWidth();
                            if ($rightArea && $rightArea.hasClass(HEADER_PRF + DETAIL)) {
                                var horzLeftWidth = self.actionDetails.widths.leftHorzSum + diff;
                                self.setWidth(self.$leftHorzSumHeader, horzLeftWidth);
                                self.setWidth(self.$leftHorzSumContent, horzLeftWidth);
                                self.setWidth(self.$horzSumHeader, rightWidth);
                                self.setWidth(self.$horzSumContent, rightWidth + scrollWidth);
                                self.$horzSumHeader.css("left", posLeft);
                                self.$horzSumContent.css("left", posLeft);
                                if (self.$depLeftmostHeader) {
                                    self.setWidth(self.$depLeftmostHeader, horzLeftWidth);
                                    self.setWidth(self.$depLeftmostBody, horzLeftWidth);
                                    self.setWidth(self.$depDetailHeader, rightWidth);
                                    self.setWidth(self.$depDetailBody, rightWidth + scrollWidth);
                                    self.$depDetailHeader.css("left", posLeft);
                                    self.$depDetailBody.css("left", posLeft);
                                }
                            }
                            else if ($leftArea && $leftArea.hasClass(HEADER_PRF + DETAIL)) {
                                self.setWidth(self.$horzSumHeader, leftWidth);
                                self.setWidth(self.$horzSumContent, leftWidth + scrollWidth);
                                if (self.$depDetailHeader) {
                                    self.setWidth(self.$depDetailHeader, leftWidth);
                                    self.setWidth(self.$depDetailBody, leftWidth + scrollWidth);
                                }
                            }
                        };
                        /**
                         * Check resize permit.
                         */
                        AreaAdjuster.prototype.isResizePermit = function (leftWidth, rightWidth) {
                            var self = this;
                            var leftAreaMaxWidth = 0, rightAreaMaxWidth = 0;
                            if (leftWidth <= 20 || (self.actionDetails.widths.right > 0 && rightWidth <= 20))
                                return false;
                            if (self.actionDetails.$leftArea) {
                                var leftAreaColGroup = self.actionDetails.$leftArea[0].querySelectorAll("table > colgroup > col");
                                var size = leftAreaColGroup.length;
                                for (var i = 0; i < size; i++) {
                                    leftAreaMaxWidth += (parseInt(leftAreaColGroup[i].style.width) + 1);
                                }
                                if (leftWidth >= leftAreaMaxWidth)
                                    return false;
                            }
                            if (self.actionDetails.$rightArea) {
                                var rightAreaColGroup = self.actionDetails.$rightArea[0].querySelectorAll("table > colgroup > col");
                                var size = rightAreaColGroup.length;
                                for (var i = 0; i < size; i++) {
                                    rightAreaMaxWidth += (parseInt(rightAreaColGroup[i].style.width) + 1);
                                }
                                if (rightWidth >= rightAreaMaxWidth)
                                    return false;
                            }
                            return true;
                        };
                        /**
                         * Cursor up.
                         */
                        AreaAdjuster.prototype.cursorUp = function (event) {
                            var self = this;
                            if (!self.actionDetails)
                                return;
                            self.$ownerDoc.off(events.MOUSE_MOVE);
                            self.$ownerDoc.off(events.MOUSE_UP);
                            self.syncLines();
                            events.trigger(self.$container, events.AREA_RESIZE_END, [self.actionDetails.$leftArea, self.actionDetails.$rightArea,
                                self.actionDetails.changedWidths.left, self.actionDetails.changedWidths.right]);
                            self.actionDetails = null;
                        };
                        /**
                         * Set width.
                         */
                        AreaAdjuster.prototype.setWidth = function ($wrapper, width) {
                            $wrapper.width(width);
                        };
                        /**
                         * Sync lines.
                         */
                        AreaAdjuster.prototype.syncLines = function () {
                            var self = this;
                            self.$areaAgency.width(self.$container.width());
                            _.forEach(self.headerWrappers, function ($wrapper, index) {
                                var height = $wrapper.height() + self.bodyWrappers[index].height();
                                var left = $wrapper.outerWidth() + ($wrapper.offset().left - self.$areaAgency.offset().left);
                                self.$areaAgency.find("div:eq(" + index + ")").css({ left: left, height: height });
                            });
                        };
                        return AreaAdjuster;
                    }());
                    resize.AreaAdjuster = AreaAdjuster;
                    /**
                     * Get cursorX.
                     */
                    function getCursorX(event) {
                        return event.pageX;
                    }
                    /**
                     * Line styles.
                     */
                    function lineStyles(marginLeft) {
                        return { position: "absolute", cursor: "ew-resize", width: "4px", zIndex: 2, marginLeft: marginLeft };
                    }
                    /**
                     * Fit window height.
                     */
                    function fitWindowHeight($container, wrappers, horzSumExists) {
                        var height = window.innerHeight - parseInt($container.data(internal.Y_OCCUPY)) - 100;
                        var $horzSumHeader, $horzSumBody, decreaseAmt;
                        wrappers = wrappers || _.map($container.find("div[class*='" + BODY_PRF + "']").filter(function () {
                            return !$(this).hasClass(BODY_PRF + HORIZONTAL_SUM) && !$(this).hasClass(BODY_PRF + LEFT_HORZ_SUM);
                        }), function (elm) { return $(elm); });
                        if (horzSumExists) {
                            $horzSumHeader = $container.find("." + HEADER_PRF + HORIZONTAL_SUM);
                            $horzSumBody = $container.find("." + BODY_PRF + HORIZONTAL_SUM);
                            decreaseAmt = $horzSumHeader.height() + $horzSumBody.height() + DISTANCE + SPACE;
                            height -= decreaseAmt;
                        }
                        _.forEach(wrappers, function ($wrapper) {
                            if (($wrapper.css("overflow-x") && $wrapper.css("overflow-x") !== "scroll")
                                || ($wrapper.css("overflow") && $wrapper.css("overflow") !== "scroll")) {
                                $wrapper.height(height - helper.getScrollWidth());
                            }
                            else {
                                $wrapper.height(height);
                            }
                        });
                        if (horzSumExists) {
                            repositionHorzSum($container, $horzSumHeader, $horzSumBody);
                        }
                        var cHeight = 0, showCount = 0;
                        var stream = $container.find("div[class*='" + DETAIL + "'], div[class*='" + LEFT_HORZ_SUM + "']");
                        stream.each(function () {
                            if ($(this).css("display") !== "none") {
                                showCount++;
                                cHeight += $(this).height();
                            }
                        });
                        if (showCount === 4) {
                            cHeight += (SPACE + DISTANCE);
                        }
                        $container.height(cHeight + SPACE);
                        events.trigger($container, events.BODY_HEIGHT_CHANGED, height);
                    }
                    resize.fitWindowHeight = fitWindowHeight;
                    /**
                     * Fit window width.
                     */
                    function fitWindowWidth($container) {
                        var table = $container.data(NAMESPACE);
                        if (table.$commander)
                            return;
                        var $vertSumHeader = $container.find("." + HEADER_PRF + VERTICAL_SUM);
                        var $vertSumContent = $container.find("." + BODY_PRF + VERTICAL_SUM);
                        var $detailHeader = $container.find("." + HEADER_PRF + DETAIL);
                        var $detailBody = $container.find("." + BODY_PRF + DETAIL);
                        var width = window.innerWidth - $detailHeader.offset().left;
                        var scrollWidth = helper.getScrollWidth();
                        var $sup = table.$follower;
                        if ($vertSumHeader.length > 0 && $vertSumHeader.css("display") !== "none") {
                            width = width - parseInt($container.data(internal.X_OCCUPY)) - $vertSumContent.width();
                            $detailHeader.width(width);
                            $detailBody.width(width);
                            $container.find("." + HEADER_PRF + HORIZONTAL_SUM).width(width);
                            $container.find("." + BODY_PRF + HORIZONTAL_SUM).width(width + helper.getScrollWidth());
                            repositionVertSum($container, $vertSumHeader, $vertSumContent);
                            syncDetailAreaLine($container, $detailHeader, $detailBody);
                            if ($sup) {
                                $sup.find("." + HEADER_PRF + DETAIL).width(width);
                                $sup.find("." + BODY_PRF + DETAIL).width(width + scrollWidth);
                            }
                            return;
                        }
                        width = width - parseInt($container.data(internal.X_OCCUPY));
                        $detailHeader.width(width - scrollWidth);
                        $detailBody.width(width);
                        $container.find("." + HEADER_PRF + HORIZONTAL_SUM).width(width - scrollWidth);
                        $container.find("." + BODY_PRF + HORIZONTAL_SUM).width(width);
                        if ($sup) {
                            $sup.find("." + HEADER_PRF + DETAIL).width(width - scrollWidth);
                            $sup.find("." + BODY_PRF + DETAIL).width(width);
                        }
                    }
                    resize.fitWindowWidth = fitWindowWidth;
                    /**
                     * Sync detail area line.
                     */
                    function syncDetailAreaLine($container, $detailHeader, $detailBody) {
                        var $agency = $container.find("." + resize.AREA_AGENCY);
                        if ($agency.length === 0)
                            return;
                        var height = $detailHeader.height() + $detailBody.height();
                        var left = $detailHeader.outerWidth() + ($detailHeader.offset().left - $agency.offset().left);
                        var index;
                        $container.find("div[class*='" + HEADER_PRF + "']").each(function (idx) {
                            if ($(this).hasClass(HEADER_PRF + DETAIL)) {
                                index = idx;
                                return false;
                            }
                        });
                        $agency.find("div:eq(" + index + ")").css({ left: left, height: height });
                    }
                    /**
                     * Reposition horzSum.
                     */
                    function repositionHorzSum($container, $horzSumHeader, $horzSumBody) {
                        $horzSumHeader = $horzSumHeader || $container.find("." + HEADER_PRF + HORIZONTAL_SUM);
                        $horzSumBody = $horzSumBody || $container.find("." + BODY_PRF + HORIZONTAL_SUM);
                        var headerTop = $container.find("." + HEADER_PRF + DETAIL).height()
                            + $container.find("." + BODY_PRF + DETAIL).height() + DISTANCE + SPACE;
                        var bodyTop = headerTop + DISTANCE + $horzSumHeader.height();
                        $container.find("." + HEADER_PRF + LEFT_HORZ_SUM).css("top", headerTop);
                        $container.find("." + BODY_PRF + LEFT_HORZ_SUM).css("top", bodyTop);
                        $horzSumHeader.css("top", headerTop);
                        $horzSumBody.css("top", bodyTop);
                    }
                    resize.repositionHorzSum = repositionHorzSum;
                    /**
                     * Reposition vertSum.
                     */
                    function repositionVertSum($container, $vertSumHeader, $vertSumContent) {
                        $vertSumHeader = $vertSumHeader || $container.find("." + HEADER_PRF + VERTICAL_SUM);
                        $vertSumContent = $vertSumContent || $container.find("." + BODY_PRF + VERTICAL_SUM);
                        var $detailHeader = $container.find("." + HEADER_PRF + DETAIL);
                        var posLeft = $detailHeader.css("left");
                        var vertSumLeft = parseInt(posLeft) + $detailHeader.width() + DISTANCE;
                        $vertSumHeader.css("left", vertSumLeft);
                        $vertSumContent.css("left", vertSumLeft);
                    }
                    resize.repositionVertSum = repositionVertSum;
                    /**
                     * Set height.
                     */
                    function setHeight($container, height) {
                        $container.find("div[class*='" + BODY_PRF + "']").each(function () {
                            if ($(this).hasClass(BODY_PRF + HORIZONTAL_SUM) || $(this).hasClass(BODY_PRF + LEFT_HORZ_SUM))
                                return;
                            $(this).height(height);
                        });
                        var cHeight = 0, showCount = 0;
                        var stream = $container.find("div[class*='" + DETAIL + "'], div[class*='" + LEFT_HORZ_SUM + "']");
                        stream.each(function () {
                            if ($(this).css("display") !== "none") {
                                showCount++;
                                cHeight += $(this).height();
                            }
                        });
                        if (showCount === 4) {
                            cHeight += (SPACE + DISTANCE);
                        }
                        $container.height(cHeight + SPACE);
                        events.trigger($container, events.BODY_HEIGHT_CHANGED, height);
                    }
                    resize.setHeight = setHeight;
                    /**
                     * On area complete.
                     */
                    function onAreaComplete(event, $leftArea, $rightArea, leftWidth, rightWidth) {
                        var self = this;
                        saveSizes(self.$container, $leftArea, $rightArea, leftWidth, rightWidth);
                    }
                    resize.onAreaComplete = onAreaComplete;
                    /**
                     * Save sizes.
                     */
                    function saveSizes($container, $leftArea, $rightArea, leftWidth, rightWidth) {
                        if ($leftArea) {
                            storage.area.save($container, $leftArea.data(internal.EX_PART), leftWidth);
                        }
                        if ($rightArea) {
                            storage.area.save($container, $rightArea.data(internal.EX_PART), rightWidth);
                        }
                    }
                    resize.saveSizes = saveSizes;
                    /**
                     * On body height changed.
                     */
                    function onBodyHeightChanged(event, height) {
                        var $container = $(event.target);
                        storage.tableHeight.save($container, height);
                        repositionHorzSum($container);
                    }
                    resize.onBodyHeightChanged = onBodyHeightChanged;
                })(resize || (resize = {}));
                var storage;
                (function (storage) {
                    storage.AREA_WIDTHS = "areawidths";
                    storage.TBL_HEIGHT = "tableheight";
                    var Store = (function () {
                        function Store() {
                        }
                        /**
                         * Check value exists.
                         */
                        Store.prototype.initValueExists = function ($container) {
                            var self = this;
                            var storeKey = self.getStorageKey($container);
                            var value = uk.localStorage.getItem(storeKey);
                            return value.isPresent();
                        };
                        /**
                         * Get store item.
                         */
                        Store.prototype.getStoreItem = function ($container, item) {
                            return uk.request.location.current.rawUrl + "/" + $container.attr("id") + "/" + item;
                        };
                        /**
                         * Get value.
                         */
                        Store.prototype.getValue = function ($container) {
                            var storeKey = this.getStorageKey($container);
                            return uk.localStorage.getItem(storeKey);
                        };
                        return Store;
                    }());
                    var area;
                    (function (area) {
                        var Cache = (function (_super) {
                            __extends(Cache, _super);
                            function Cache() {
                                _super.apply(this, arguments);
                            }
                            Cache.prototype.getStorageKey = function ($container) {
                                return this.getStoreItem($container, storage.AREA_WIDTHS);
                            };
                            return Cache;
                        }(Store));
                        var cache = new Cache();
                        /**
                         * Init.
                         */
                        function init($container, parts) {
                            if (cache.initValueExists($container)) {
                                return;
                            }
                            var partWidths = {};
                            _.forEach(parts, function (part, index) {
                                var key = helper.getClassOfHeader(part);
                                partWidths[key] = part.width();
                            });
                            saveAll($container, partWidths);
                        }
                        area.init = init;
                        /**
                         * Load.
                         */
                        function load($container) {
                            var storeKey = cache.getStorageKey($container);
                            uk.localStorage.getItem(storeKey).ifPresent(function (parts) {
                                var widthParts = JSON.parse(parts);
                                setWidths($container, widthParts);
                                return null;
                            });
                        }
                        area.load = load;
                        /**
                         * Save.
                         */
                        function save($container, keyClass, partWidth) {
                            var storeKey = cache.getStorageKey($container);
                            var partsWidth = uk.localStorage.getItem(storeKey);
                            var widths = {};
                            if (partsWidth.isPresent()) {
                                widths = JSON.parse(partsWidth.get());
                                widths[keyClass] = partWidth;
                            }
                            else {
                                widths[keyClass] = partWidth;
                            }
                            uk.localStorage.setItemAsJson(storeKey, widths);
                        }
                        area.save = save;
                        /**
                         * Save all.
                         */
                        function saveAll($container, widths) {
                            var storeKey = cache.getStorageKey($container);
                            var partWidths = uk.localStorage.getItem(storeKey);
                            if (!partWidths.isPresent()) {
                                uk.localStorage.setItemAsJson(storeKey, widths);
                            }
                        }
                        /**
                         * Get part widths.
                         */
                        function getPartWidths($container) {
                            return cache.getValue($container);
                        }
                        area.getPartWidths = getPartWidths;
                        /**
                         * Set widths.
                         */
                        function setWidths($container, parts) {
                            var partKeys = Object.keys(parts);
                            _.forEach(partKeys, function (keyClass, index) {
                                setWidth($container, keyClass, parts[keyClass]);
                            });
                        }
                        /**
                         * Set width.
                         */
                        function setWidth($container, keyClass, width) {
                            $container.find("." + keyClass).width(width);
                            $container.find("." + Connector[keyClass]).width(width);
                        }
                    })(area = storage.area || (storage.area = {}));
                    var tableHeight;
                    (function (tableHeight) {
                        var Cache2 = (function (_super) {
                            __extends(Cache2, _super);
                            function Cache2() {
                                _super.apply(this, arguments);
                            }
                            Cache2.prototype.getStorageKey = function ($container) {
                                return this.getStoreItem($container, storage.TBL_HEIGHT);
                            };
                            return Cache2;
                        }(Store));
                        var cache = new Cache2();
                        /**
                         * Init.
                         */
                        function init($container) {
                            if (cache.initValueExists($container)) {
                                return;
                            }
                            var $bodies = $container.find("div[class*='" + BODY_PRF + "']");
                            if ($bodies.length === 0)
                                return;
                            save($container, $($bodies[0]).height());
                        }
                        tableHeight.init = init;
                        /**
                         * Load.
                         */
                        function load($container) {
                            var storeKey = cache.getStorageKey($container);
                            uk.localStorage.getItem(storeKey).ifPresent(function (height) {
                                var h = JSON.parse(height);
                                resize.setHeight($container, height);
                                return null;
                            });
                        }
                        tableHeight.load = load;
                        /**
                         * Get.
                         */
                        function get($container) {
                            return cache.getValue($container);
                        }
                        tableHeight.get = get;
                        /**
                         * Save.
                         */
                        function save($container, height) {
                            var storeKey = cache.getStorageKey($container);
                            uk.localStorage.setItemAsJson(storeKey, height);
                        }
                        tableHeight.save = save;
                    })(tableHeight = storage.tableHeight || (storage.tableHeight = {}));
                })(storage || (storage = {}));
                var scroll;
                (function (scroll) {
                    scroll.SCROLL_SYNCING = "scroll-syncing";
                    scroll.VERT_SCROLL_SYNCING = "vert-scroll-syncing";
                    /**
                     * Bind vertWheel.
                     */
                    function bindVertWheel($container) {
                        $container.on(events.MOUSE_WHEEL, function (event) {
                            var delta = event.originalEvent.wheelDeltaY;
                            var direction = delta > 0 ? -1 : 1;
                            var value = $container.scrollTop() + event.originalEvent.deltaY;
                            //                $container.stop().animate({ scrollTop: value }, 10);
                            $container.scrollTop(value);
                            event.preventDefault();
                            event.stopImmediatePropagation();
                        });
                        if ($container.css("overflow-y") !== "hidden") {
                            $container.css("overflow-y", "hidden");
                        }
                    }
                    scroll.bindVertWheel = bindVertWheel;
                    /**
                     * Unbind vertWheel.
                     */
                    function unbindVertWheel($container) {
                        $container.off(events.MOUSE_WHEEL);
                        $container.css("overflow-y", "scroll");
                    }
                    scroll.unbindVertWheel = unbindVertWheel;
                    /**
                     * Sync scrolls.
                     */
                    function syncDoubDirHorizontalScrolls(wrappers) {
                        _.forEach(wrappers, function ($main, index) {
                            if (!$main)
                                return;
                            $main.on(events.SCROLL_EVT, function () {
                                _.forEach(wrappers, function ($depend, i) {
                                    if (i === index || !$depend)
                                        return;
                                    var mainSyncing = $main.data(scroll.SCROLL_SYNCING);
                                    if (!mainSyncing) {
                                        $depend.data(scroll.SCROLL_SYNCING, true);
                                        $depend.scrollLeft($main.scrollLeft());
                                    }
                                });
                                $main.data(scroll.SCROLL_SYNCING, false);
                            });
                        });
                    }
                    scroll.syncDoubDirHorizontalScrolls = syncDoubDirHorizontalScrolls;
                    /**
                     * Sync scrolls.
                     */
                    function syncDoubDirVerticalScrolls(wrappers) {
                        _.forEach(wrappers, function ($main, index) {
                            $main.on(events.SCROLL_EVT, function (event) {
                                _.forEach(wrappers, function ($depend, i) {
                                    if (i === index)
                                        return;
                                    var mainSyncing = $main.data(scroll.VERT_SCROLL_SYNCING);
                                    if (!mainSyncing) {
                                        $depend.data(scroll.VERT_SCROLL_SYNCING, true);
                                        $depend.scrollTop($main.scrollTop());
                                    }
                                });
                                $main.data(scroll.VERT_SCROLL_SYNCING, false);
                            });
                        });
                    }
                    scroll.syncDoubDirVerticalScrolls = syncDoubDirVerticalScrolls;
                    /**
                     * Sync scroll.
                     */
                    function syncHorizontalScroll($headerWrap, $bodyWrap) {
                        $bodyWrap.on(events.SCROLL_EVT, function () {
                            $headerWrap.scrollLeft($bodyWrap.scrollLeft());
                        });
                    }
                    scroll.syncHorizontalScroll = syncHorizontalScroll;
                    /**
                     * Sync scroll.
                     */
                    function syncVerticalScroll($pivotBody, bodyWraps) {
                        $pivotBody.on(events.SCROLL_EVT, function () {
                            _.forEach(bodyWraps, function (body) {
                                body.scrollTop($pivotBody.scrollTop());
                            });
                        });
                    }
                    scroll.syncVerticalScroll = syncVerticalScroll;
                })(scroll || (scroll = {}));
                var controls;
                (function (controls) {
                    controls.LINK_BUTTON = "link";
                    controls.LINK_CLS = "x-link";
                    controls.CHECKED_KEY = "xCheckbox";
                    controls.CHECKBOX_COL_WIDTH = 40;
                    /**
                     * Check.
                     */
                    function check($td, column, data, action) {
                        if (!uk.util.isNullOrUndefined(column.control)) {
                            switch (column.control) {
                                case controls.LINK_BUTTON:
                                    $("<a/>").addClass(controls.LINK_CLS).on(events.CLICK_EVT, function (evt) {
                                        action();
                                    }).text(data).appendTo($td);
                                    break;
                            }
                        }
                    }
                    controls.check = check;
                    /**
                     * Add checkbox def.
                     */
                    function addCheckBoxDef(arr) {
                        _.forEach(arr, function (opt) {
                            opt.columns.unshift({ key: controls.CHECKED_KEY, headerText: controls.CHECKED_KEY, width: controls.CHECKBOX_COL_WIDTH + "px" });
                        });
                    }
                    controls.addCheckBoxDef = addCheckBoxDef;
                    /**
                     * Create checkbox.
                     */
                    function createCheckBox($grid, ui) {
                        var checkBoxText;
                        var $wrapper = $("<div/>").addClass("nts-checkbox-container").on(events.CLICK_EVT, function (e) {
                            if ($grid && errors.occurred($grid.closest("." + NAMESPACE)))
                                e.preventDefault();
                        });
                        var $checkBoxLabel = $("<label class='ntsCheckBox'></label>");
                        var $checkBox = $('<input type="checkbox">').on("change", function () {
                            var cellCoord = helper.getCellCoord($(this).closest("td"));
                            var rowIndex = 0;
                            if (cellCoord)
                                rowIndex = cellCoord.rowIdx;
                            ui.onChecked($(this).is(":checked"), rowIndex);
                        }).appendTo($checkBoxLabel);
                        var $box = $("<span class='box'></span>").appendTo($checkBoxLabel);
                        if (ui.text && ui.text.length > 0) {
                            var label = $("<span class='label'></span>").text(ui.text).appendTo($checkBoxLabel);
                        }
                        $checkBoxLabel.appendTo($wrapper);
                        var checked = ui.initValue !== undefined ? ui.initValue : true;
                        var $checkBox = $wrapper.find("input[type='checkbox']");
                        if (checked === true)
                            $checkBox.prop("checked", true);
                        else
                            $checkBox.prop("checked", false);
                        return $wrapper;
                    }
                    controls.createCheckBox = createCheckBox;
                    /**
                     * Checkbox cell styles.
                     */
                    function checkBoxCellStyles() {
                        return { padding: "1px 1px", textAlign: "center" };
                    }
                    controls.checkBoxCellStyles = checkBoxCellStyles;
                    /**
                     * Tick.
                     */
                    function tick(checked, $grid, isHeader, rowIdx) {
                        var $checkBox;
                        var ds = internal.getDataSource($grid);
                        if (isHeader) {
                            $grid.find("tr").find("td:first").each(function (index) {
                                $checkBox = $(this).find("input");
                                if (checked) {
                                    $checkBox.prop("checked", true);
                                }
                                else {
                                    $checkBox.prop("checked", false);
                                }
                            });
                            var rows = $grid.data(internal.SELECTED_ROWS);
                            if (checked) {
                                if (!rows) {
                                    rows = {};
                                    rows.selectAll = true;
                                    $grid.data(internal.SELECTED_ROWS, rows);
                                }
                                else {
                                    rows.selectAll = true;
                                }
                                for (var i = 0; i < ds.length; i++) {
                                    selection.selectRow($grid, i);
                                }
                            }
                            else {
                                rows.selectAll = false;
                                for (var i = 0; i < ds.length; i++) {
                                    selection.deselectRow($grid, i);
                                }
                            }
                        }
                        else {
                            var $row = selection.rowAt($grid, rowIdx);
                            $checkBox = $row.find("td:first input");
                            if (checked) {
                                $checkBox.prop("checked", true);
                                selection.selectRow($grid, rowIdx);
                            }
                            else {
                                $checkBox.prop("checked", false);
                                selection.deselectRow($grid, rowIdx);
                            }
                            var rows = $grid.data(internal.SELECTED_ROWS);
                            var $allBox = $grid.siblings("." + HEADER_PRF + LEFTMOST).find("table tr:first td:first input");
                            if (rows.count === ds.length) {
                                rows.selectAll = true;
                                if (!$allBox.is(":checked"))
                                    $allBox.prop("checked", true);
                            }
                            else {
                                rows.selectAll = false;
                                if ($allBox.is(":checked"))
                                    $allBox.prop("checked", false);
                            }
                        }
                    }
                    controls.tick = tick;
                })(controls || (controls = {}));
                var events;
                (function (events) {
                    events.SCROLL_EVT = "scroll";
                    events.CLICK_EVT = "click";
                    events.MOUSE_DOWN = "mousedown";
                    events.MOUSE_MOVE = "mousemove";
                    events.MOUSE_UP = "mouseup";
                    events.MOUSE_OVER = "mouseover";
                    events.MOUSE_ENTER = "mouseenter";
                    events.MOUSE_OUT = "mouseout";
                    events.FOCUS_IN = "focusin";
                    events.PASTE = "paste";
                    events.MOUSE_WHEEL = "wheel";
                    events.RESIZE = "resize";
                    events.KEY_DOWN = "keydown";
                    events.KEY_UP = "keyup";
                    events.CM = "contextmenu";
                    events.AREA_RESIZE_STARTED = "extablearearesizestarted";
                    events.AREA_RESIZE = "extablearearesize";
                    events.AREA_RESIZE_END = "extablearearesizeend";
                    events.BODY_HEIGHT_CHANGED = "extablebodyheightchanged";
                    events.OCCUPY_UPDATE = "extableoccupyupdate";
                    events.START_EDIT = "extablestartedit";
                    events.STOP_EDIT = "extablestopedit";
                    events.CELL_UPDATED = "extablecellupdated";
                    events.ROW_UPDATED = "extablerowupdated";
                    events.POPUP_SHOWN = "xpopupshown";
                    events.POPUP_INPUT_END = "xpopupinputend";
                    events.ROUND_RETREAT = "extablecellretreat";
                    events.CHECK_ALL = "extableselectallrows";
                    events.CHECK_ROW = "extableselectrow";
                    events.MOUSEIN_COLUMN = "extablemouseincolumn";
                    events.MOUSEOUT_COLUMN = "extablemousoutcolumn";
                    events.COMPLETED = "extablecompleted";
                    /**
                     * Trigger.
                     */
                    function trigger($target, eventName, args) {
                        $target.trigger($.Event(eventName), args);
                    }
                    events.trigger = trigger;
                    /**
                     * On modify.
                     */
                    function onModify($exTable) {
                        $exTable.on(events.CELL_UPDATED, function (evt, ui) {
                            var exTable = $exTable.data(NAMESPACE);
                            if (!exTable)
                                return;
                            if (ui.value.constructor === Array && (uk.util.isNullOrUndefined(ui.innerIdx) || ui.innerIdx === -1)) {
                                pushChange(exTable, ui.rowIndex, new selection.Cell(ui.rowIndex, ui.columnKey, ui.value[0], 0));
                                pushChange(exTable, ui.rowIndex, new selection.Cell(ui.rowIndex, ui.columnKey, ui.value[1], 1));
                                return;
                            }
                            pushChange(exTable, ui.rowIndex, ui);
                        });
                        $exTable.on(events.ROW_UPDATED, function (evt, ui) {
                            var exTable = $exTable.data(NAMESPACE);
                            if (!exTable)
                                return;
                            var cells = [];
                            _.forEach(Object.keys(ui.data), function (k, i) {
                                if (ui.data[k].constructor === Array && ui.data[k].length === 2) {
                                    cells.push(new selection.Cell(ui.rowIndex, k, ui.data[k][0], 0));
                                    cells.push(new selection.Cell(ui.rowIndex, k, ui.data[k][1], 1));
                                    return;
                                }
                                cells.push(new selection.Cell(ui.rowIndex, k, ui.data[k], -1));
                            });
                            _.forEach(cells, function (c, i) {
                                pushChange(exTable, c.rowIndex, c);
                            });
                        });
                    }
                    events.onModify = onModify;
                    /**
                     * Push change.
                     */
                    function pushChange(exTable, rowIdx, cell) {
                        var modifies = exTable.modifications;
                        if (!modifies) {
                            exTable.modifications = {};
                            exTable.modifications[rowIdx] = [cell];
                            return;
                        }
                        if (!modifies[rowIdx]) {
                            modifies[rowIdx] = [cell];
                            return;
                        }
                        var rData = modifies[rowIdx];
                        var cellUpdated = false;
                        _.forEach(rData, function (c, i) {
                            if (helper.areSameCells(c, cell)) {
                                rData[i].value = cell.value;
                                cellUpdated = true;
                                return false;
                            }
                        });
                        if (!cellUpdated) {
                            modifies[rowIdx].push(cell);
                        }
                    }
                    /**
                     * Create row ui.
                     */
                    function createRowUi(rowIdx, data) {
                        return {
                            rowIndex: rowIdx,
                            data: data
                        };
                    }
                    events.createRowUi = createRowUi;
                })(events || (events = {}));
                var feature;
                (function (feature_2) {
                    feature_2.UPDATING = "Updating";
                    feature_2.HEADER_ROW_HEIGHT = "HeaderRowHeight";
                    feature_2.HEADER_CELL_STYLE = "HeaderCellStyle";
                    feature_2.HEADER_POP_UP = "HeaderPopups";
                    feature_2.BODY_CELL_STYLE = "BodyCellStyle";
                    feature_2.COLUMN_RESIZE = "ColumnResize";
                    feature_2.TIME_RANGE = "TimeRange";
                    /**
                     * Is enable.
                     */
                    function isEnable(features, name) {
                        return _.find(features, function (feature) {
                            return feature.name === name;
                        }) !== undefined;
                    }
                    feature_2.isEnable = isEnable;
                    /**
                     * Find.
                     */
                    function find(features, name) {
                        return _.find(features, function (feature) {
                            return feature.name === name;
                        });
                    }
                    feature_2.find = find;
                })(feature || (feature = {}));
                var style;
                (function (style) {
                    style.DET_CLS = "xdet";
                    style.HIDDEN_CLS = "xhidden";
                    style.SEAL_CLS = "xseal";
                    var CellStyleParam = (function () {
                        function CellStyleParam($cell, cellData, rowData, rowIdx, columnKey) {
                            this.$cell = $cell;
                            this.cellData = cellData;
                            this.rowData = rowData;
                            this.rowIdx = rowIdx;
                            this.columnKey = columnKey;
                        }
                        return CellStyleParam;
                    }());
                    style.CellStyleParam = CellStyleParam;
                    var Cell = (function () {
                        function Cell(rowId, columnKey) {
                            this.rowId = rowId;
                            this.columnKey = columnKey;
                        }
                        return Cell;
                    }());
                    style.Cell = Cell;
                    /**
                     * Det column.
                     */
                    function detColumn($grid, $row, rowIdx) {
                        var $tbl = $grid.closest("." + NAMESPACE);
                        var detOpt = $tbl.data(NAMESPACE).determination;
                        if (!detOpt || !$grid.hasClass(HEADER_PRF + DETAIL))
                            return;
                        _.forEach(detOpt.rows, function (i) {
                            if (i === rowIdx) {
                                $row.on(events.MOUSE_DOWN, function (evt) {
                                    if (!evt.ctrlKey)
                                        return;
                                    var $main = helper.getMainTable($tbl);
                                    var gen = $main.data(internal.TANGI) || $main.data(internal.CANON);
                                    var ds = gen.dataSource;
                                    var primaryKey = helper.getPrimaryKey($main);
                                    var start = gen.startIndex || 0;
                                    var end = gen.endIndex || ds.length - 1;
                                    var $hCell = $(evt.target);
                                    var coord = helper.getCellCoord($hCell);
                                    var det = $main.data(internal.DET);
                                    if (!det) {
                                        det = {};
                                    }
                                    var xRows = [];
                                    var xCellsInColumn = _.filter(ds, function (r, i) {
                                        if (helper.isXCell($main, r[primaryKey], coord.columnKey, style.HIDDEN_CLS, style.SEAL_CLS)) {
                                            xRows.push(i);
                                            return true;
                                        }
                                        return false;
                                    });
                                    var rows = Object.keys(det);
                                    if (rows.length >= (ds.length - xCellsInColumn.length)) {
                                        var flaw_1 = false;
                                        var indices_1 = {};
                                        _.forEach(rows, function (k, i) {
                                            var found = false;
                                            _.forEach(det[k], function (c, j) {
                                                if (c === coord.columnKey) {
                                                    indices_1[k] = j;
                                                    found = true;
                                                    return false;
                                                }
                                            });
                                            if (!found && !xRows.some(function (val) { return parseInt(k) === val; })) {
                                                flaw_1 = true;
                                                return false;
                                            }
                                        });
                                        if (!flaw_1) {
                                            var rKeys = Object.keys(indices_1);
                                            _.forEach(rKeys, function (k, i) {
                                                var col = det[k].splice(indices_1[k], 1);
                                                if (det[k].length === 0)
                                                    delete det[k];
                                                var $c = selection.cellAt($main, k, col[0]);
                                                helper.stripCellWith(style.DET_CLS, $c);
                                            });
                                            return;
                                        }
                                    }
                                    _.forEach(ds, function (item, index) {
                                        if (index >= start && index < end) {
                                            var $c = selection.cellAt($main, index, coord.columnKey);
                                            if ($c === intan.NULL || $c.length === 0 || !helper.isDetable($c))
                                                return;
                                            helper.markCellWith(style.DET_CLS, $c);
                                        }
                                        else if (helper.isXCell($main, item[primaryKey], coord.columnKey, style.HIDDEN_CLS, style.SEAL_CLS))
                                            return;
                                        if (!det[index]) {
                                            det[index] = [coord.columnKey];
                                            $main.data(internal.DET, det);
                                        }
                                        else {
                                            var dup_1;
                                            _.forEach(det[index], function (key) {
                                                if (key === coord.columnKey) {
                                                    dup_1 = true;
                                                    return false;
                                                }
                                            });
                                            if (!dup_1) {
                                                det[index].push(coord.columnKey);
                                            }
                                        }
                                    });
                                });
                                return false;
                            }
                        });
                    }
                    style.detColumn = detColumn;
                    /**
                     * Det cell.
                     */
                    function detCell($grid, $cell, rowIdx, columnKey) {
                        var $tbl = $grid.closest("." + NAMESPACE);
                        var detOpt = $tbl.data(NAMESPACE).determination;
                        if (!detOpt)
                            return;
                        if ($grid.hasClass(BODY_PRF + LEFTMOST)) {
                            _.forEach(detOpt.columns, function (key) {
                                if (key === columnKey) {
                                    $cell.on(events.MOUSE_DOWN, function (evt) {
                                        if (!evt.ctrlKey)
                                            return;
                                        var $main = helper.getMainTable($tbl);
                                        var coord = helper.getCellCoord($cell);
                                        var $targetRow = selection.rowAt($main, coord.rowIdx);
                                        if ($targetRow === intan.NULL || !$targetRow)
                                            return;
                                        var colKeys = _.map(helper.gridVisibleColumns($main), "key");
                                        var det = $main.data(internal.DET);
                                        var rowDet;
                                        var undetables = [];
                                        var detables = $targetRow.find("td").filter(function () {
                                            return $(this).css("display") !== "none";
                                        }).filter(function (i) {
                                            if (!helper.isDetable($(this))) {
                                                undetables.push(i);
                                                return false;
                                            }
                                            return true;
                                        });
                                        for (var i = undetables.length - 1; i >= 0; i--) {
                                            colKeys.splice(undetables[i], 1);
                                        }
                                        if (det && (rowDet = det[coord.rowIdx]) && rowDet.length === colKeys.length) {
                                            helper.stripCellsWith(style.DET_CLS, $targetRow.find("td").filter(function () {
                                                return $(this).css("display") !== "none";
                                            }));
                                            //                                det[coord.rowIdx] = [];
                                            delete det[coord.rowIdx];
                                            return;
                                        }
                                        helper.markCellsWith(style.DET_CLS, detables);
                                        if (!det) {
                                            det = {};
                                            det[coord.rowIdx] = colKeys;
                                            $main.data(internal.DET, det);
                                        }
                                        else if (!det[coord.rowIdx]) {
                                            det[coord.rowIdx] = colKeys;
                                        }
                                        else {
                                            var dup_2;
                                            _.forEach(colKeys, function (k) {
                                                dup_2 = false;
                                                _.forEach(det[coord.rowIdx], function (existedKey) {
                                                    if (existedKey === k) {
                                                        dup_2 = true;
                                                        return false;
                                                    }
                                                });
                                                if (!dup_2) {
                                                    det[coord.rowIdx].push(k);
                                                }
                                            });
                                        }
                                    });
                                    return false;
                                }
                            });
                        }
                        else if ($grid.hasClass(BODY_PRF + DETAIL)) {
                            var $childCells = $cell.find("." + render.CHILD_CELL_CLS);
                            var $target = $cell;
                            if ($childCells.length > 0) {
                                $target = $childCells;
                            }
                            $target.on(events.MOUSE_DOWN, function (evt) {
                                onDetSingleCell(evt, $tbl, $cell, rowIdx, columnKey);
                            });
                        }
                    }
                    style.detCell = detCell;
                    /**
                     * On det single cell.
                     */
                    function onDetSingleCell(evt, $tbl, $cell, rowIdx, columnKey) {
                        if (!evt.ctrlKey || !helper.isDetable($cell))
                            return;
                        var $main = helper.getMainTable($tbl);
                        var det = $main.data(internal.DET);
                        if (!det) {
                            det = {};
                            det[rowIdx] = [columnKey];
                            $main.data(internal.DET, det);
                        }
                        else if (!det[rowIdx]) {
                            det[rowIdx] = [columnKey];
                        }
                        else {
                            var dup_3 = -1;
                            _.forEach(det[rowIdx], function (key, index) {
                                if (key === columnKey) {
                                    dup_3 = index;
                                    return false;
                                }
                            });
                            if (dup_3 > -1) {
                                var a = [];
                                det[rowIdx].splice(dup_3, 1);
                                if (det[rowIdx].length === 0)
                                    delete det[rowIdx];
                                helper.stripCellWith(style.DET_CLS, $cell);
                                return;
                            }
                            det[rowIdx].push(columnKey);
                        }
                        helper.markCellWith(style.DET_CLS, $cell);
                    }
                })(style || (style = {}));
                var func;
                (function (func) {
                    var LEFT_TBL = "leftmost";
                    var HORZ_SUM = "horizontalSummaries";
                    var VERT_SUM = "verticalSummaries";
                    $.fn.exTable = function (name) {
                        var params = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            params[_i - 1] = arguments[_i];
                        }
                        var self = this;
                        switch (name) {
                            case "setHeight":
                                resize.setHeight(self, params[0]);
                                break;
                            case "gridHeightMode":
                                changeGridHeightMode(self, params[0]);
                                break;
                            case "hideHorizontalSummary":
                                hideHorzSum(self);
                                break;
                            case "showHorizontalSummary":
                                showHorzSum(self);
                                break;
                            case "hideVerticalSummary":
                                hideVertSum(self);
                                break;
                            case "showVerticalSummary":
                                showVertSum(self);
                                break;
                            case "updateTable":
                                updateTable(self, params[0], params[1], params[2], params[3]);
                                break;
                            case "updateMode":
                                return setUpdateMode(self, params[0], params[1]);
                            case "viewMode":
                                return setViewMode(self, params[0], params[1]);
                            case "pasteOverWrite":
                                setPasteOverWrite(self, params[0]);
                                break;
                            case "stickOverWrite":
                                setStickOverWrite(self, params[0]);
                                break;
                            case "stickMode":
                                setStickMode(self, params[0]);
                                break;
                            case "stickData":
                                setStickData(self, params[0]);
                                break;
                            case "stickValidate":
                                setStickValidate(self, params[0]);
                                break;
                            case "stickUndo":
                                undoStick(self);
                                break;
                            case "clearHistories":
                                clearHistories(self, params[0]);
                                break;
                            case "lockCell":
                                lockCell(self, params[0], params[1]);
                                break;
                            case "unlockCell":
                                unlockCell(self, params[0], params[1]);
                                break;
                            case "popupValue":
                                returnPopupValue(self, params[0]);
                                break;
                            case "cellValue":
                                setCellValue(self, params[0], params[1], params[2], params[3]);
                                break;
                            case "cellValueByIndex":
                                setCellValueByIndex(self, params[0], params[1], params[2], params[3]);
                                break;
                            case "roundGet":
                                roundRetreat(self, params[0]);
                                break;
                            case "dataSource":
                                return getDataSource(self, params[0]);
                            case "cellByIndex":
                                return getCellByIndex(self, params[0], params[1]);
                            case "cellById":
                                return getCellById(self, params[0], params[1]);
                            case "updatedCells":
                                return getUpdatedCells(self);
                            case "addNewRow":
                                break;
                            case "removeRows":
                                break;
                            case "rowId":
                                setRowId(self, params[0], params[1]);
                                break;
                        }
                    };
                    /**
                     * Change grid height mode.
                     */
                    function changeGridHeightMode($container, mode) {
                        if (mode === DYNAMIC) {
                            var bodyWrappers_1 = [], horzSumExists_1 = false;
                            var $bodyWrappers = $container.find("div[class*='" + BODY_PRF + "']").each(function () {
                                if ($(this).hasClass(BODY_PRF + HORIZONTAL_SUM) || $(this).hasClass(BODY_PRF + LEFT_HORZ_SUM)) {
                                    horzSumExists_1 = true;
                                    return;
                                }
                                bodyWrappers_1.push($(this));
                            });
                            $(window).on(events.RESIZE, $.proxy(resize.fitWindowHeight, undefined, $container, bodyWrappers_1, horzSumExists_1));
                        }
                        else {
                            $(window).off(events.RESIZE, resize.fitWindowHeight);
                        }
                    }
                    /**
                     * Hide horzSum.
                     */
                    function hideHorzSum($container) {
                        $container.find("." + HEADER_PRF + LEFT_HORZ_SUM).hide();
                        $container.find("." + BODY_PRF + LEFT_HORZ_SUM).hide();
                        $container.find("." + HEADER_PRF + HORIZONTAL_SUM).hide();
                        $container.find("." + BODY_PRF + HORIZONTAL_SUM).hide();
                        resize.fitWindowHeight($container, undefined, false);
                    }
                    /**
                     * Show horzSum.
                     */
                    function showHorzSum($container) {
                        $container.find("." + HEADER_PRF + LEFT_HORZ_SUM).show();
                        $container.find("." + BODY_PRF + LEFT_HORZ_SUM).show();
                        $container.find("." + HEADER_PRF + HORIZONTAL_SUM).show();
                        $container.find("." + BODY_PRF + HORIZONTAL_SUM).show();
                        resize.fitWindowHeight($container, undefined, true);
                    }
                    /**
                     * Hide vertSum.
                     */
                    function hideVertSum($container) {
                        $container.find("." + HEADER_PRF + VERTICAL_SUM).hide();
                        $container.find("." + BODY_PRF + VERTICAL_SUM).hide();
                        resize.fitWindowWidth($container);
                        scroll.unbindVertWheel($container.find("." + BODY_PRF + DETAIL));
                    }
                    /**
                     * Show vertSum.
                     */
                    function showVertSum($container) {
                        var $vertSumBody = $container.find("." + BODY_PRF + VERTICAL_SUM);
                        var $detailBody = $container.find("." + BODY_PRF + DETAIL);
                        $container.find("." + HEADER_PRF + VERTICAL_SUM).show();
                        $vertSumBody.show();
                        resize.fitWindowWidth($container);
                        scroll.bindVertWheel($detailBody);
                        $vertSumBody.scrollTop($detailBody.scrollTop());
                    }
                    /**
                     * Update table.
                     */
                    function updateTable($container, name, header, body, keepStates) {
                        switch (name) {
                            case "leftmost":
                                updateLeftmost($container, header, body);
                                break;
                            case "middle":
                                updateMiddle($container, header, body);
                                break;
                            case "detail":
                                updateDetail($container, header, body, keepStates);
                                break;
                            case "verticalSummaries":
                                updateVertSum($container, header, body);
                                break;
                            case "leftHorizontalSummaries":
                                updateLeftHorzSum($container, header, body);
                                break;
                            case "horizontalSummaries":
                                updateHorzSum($container, header, body);
                                break;
                        }
                    }
                    /**
                     * Update leftmost.
                     */
                    function updateLeftmost($container, header, body) {
                        var exTable = $container.data(NAMESPACE);
                        if (header) {
                            _.assignIn(exTable.leftmostHeader, header);
                            var $header = $container.find("." + HEADER_PRF + LEFTMOST);
                            var pu = $header.find("table").data(internal.POPUP);
                            $header.empty();
                            render.process($header, exTable.leftmostHeader, true);
                            if (pu && pu.css("display") !== "none")
                                pu.hide();
                        }
                        if (body) {
                            _.assignIn(exTable.leftmostContent, body);
                            var $body = $container.find("." + BODY_PRF + LEFTMOST);
                            $body.empty();
                            render.process($body, exTable.leftmostContent, true);
                        }
                    }
                    /**
                     * Update middle.
                     */
                    function updateMiddle($container, header, body) {
                        var exTable = $container.data(NAMESPACE);
                        if (header) {
                            _.assignIn(exTable.middleHeader, header);
                            var $header = $container.find("." + HEADER_PRF + MIDDLE);
                            var pu = $header.find("table").data(internal.POPUP);
                            $header.empty();
                            render.process($header, exTable.middleHeader, true);
                            if (pu && pu.css("display") !== "none")
                                pu.hide();
                        }
                        if (body) {
                            _.assignIn(exTable.middleContent, body);
                            var $body = $container.find("." + BODY_PRF + MIDDLE);
                            $body.empty();
                            render.process($body, exTable.middleContent, true);
                        }
                    }
                    /**
                     * Update detail.
                     */
                    function updateDetail($container, header, body, keepStates) {
                        var exTable = $container.data(NAMESPACE);
                        if (header) {
                            _.assignIn(exTable.detailHeader, header);
                            var $header = $container.find("." + HEADER_PRF + DETAIL);
                            var pu = $header.find("table").data(internal.POPUP);
                            $header.empty();
                            render.process($header, exTable.detailHeader, true);
                            if (pu && pu.css("display") !== "none")
                                pu.hide();
                        }
                        if (body) {
                            _.assignIn(exTable.detailContent, body);
                            var $body = $container.find("." + BODY_PRF + DETAIL);
                            $body.empty();
                            if (!keepStates)
                                internal.clearStates($body);
                            render.process($body, exTable.detailContent, true);
                        }
                    }
                    /**
                     * Update vertSum.
                     */
                    function updateVertSum($container, header, body) {
                        var exTable = $container.data(NAMESPACE);
                        if (header) {
                            _.assignIn(exTable.verticalSumHeader, header);
                            var $header = $container.find("." + HEADER_PRF + VERTICAL_SUM);
                            var pu = $header.find("table").data(internal.POPUP);
                            $header.empty();
                            render.process($header, exTable.verticalSumHeader, true);
                            if (pu && pu.css("display") !== "none")
                                pu.hide();
                        }
                        if (body) {
                            _.assignIn(exTable.verticalSumContent, body);
                            var $body = $container.find("." + BODY_PRF + VERTICAL_SUM);
                            $body.empty();
                            render.process($body, exTable.verticalSumContent, true);
                        }
                    }
                    /**
                     * Update leftHorzSum.
                     */
                    function updateLeftHorzSum($container, header, body) {
                        var exTable = $container.data(NAMESPACE);
                        if (header) {
                            _.assignIn(exTable.leftHorzSumHeader, header);
                            var $header = $container.find("." + HEADER_PRF + LEFT_HORZ_SUM);
                            var pu = $header.find("table").data(internal.POPUP);
                            $header.empty();
                            render.process($header, exTable.leftHorzSumHeader, true);
                            if (pu && pu.css("display") !== "none")
                                pu.hide();
                        }
                        if (body) {
                            _.assignIn(exTable.leftHorzSumContent, body);
                            var $body = $container.find("." + BODY_PRF + LEFT_HORZ_SUM);
                            $body.empty();
                            render.process($body, exTable.leftHorzSumContent, true);
                        }
                    }
                    /**
                     * Update horzSum.
                     */
                    function updateHorzSum($container, header, body) {
                        var exTable = $container.data(NAMESPACE);
                        if (header) {
                            _.assignIn(exTable.horizontalSumHeader, header);
                            var $header = $container.find("." + HEADER_PRF + HORIZONTAL_SUM);
                            var pu = $header.find("table").data(internal.POPUP);
                            $header.empty();
                            render.process($header, exTable.horizontalSumHeader, true);
                            if (pu && pu.css("display") !== "none")
                                pu.hide();
                        }
                        if (body) {
                            _.assignIn(exTable.horizontalSumContent, body);
                            var $body = $container.find("." + BODY_PRF + HORIZONTAL_SUM);
                            $body.empty();
                            render.process($body, exTable.horizontalSumContent, true);
                        }
                    }
                    /**
                     * Set update mode.
                     */
                    function setUpdateMode($container, mode, occupation) {
                        var exTable = $container.data(NAMESPACE);
                        if (!mode)
                            return exTable.updateMode;
                        if (exTable.updateMode === mode)
                            return;
                        exTable.setUpdateMode(mode);
                        if (occupation) {
                            events.trigger($container, events.OCCUPY_UPDATE, occupation);
                        }
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        render.begin($grid, internal.getDataSource($grid), exTable.detailContent);
                        selection.tickRows($container.find("." + BODY_PRF + LEFTMOST), true);
                        if (mode === COPY_PASTE) {
                            selection.checkUp($container);
                            copy.on($grid, mode);
                            return;
                        }
                        selection.off($container);
                        copy.off($grid, mode);
                    }
                    /**
                     * Set view mode.
                     */
                    function setViewMode($container, mode, occupation) {
                        var exTable = $container.data(NAMESPACE);
                        if (!mode)
                            return exTable.viewMode;
                        if (occupation) {
                            events.trigger($container, events.OCCUPY_UPDATE, occupation);
                        }
                        if (exTable.viewMode === mode)
                            return;
                        if (exTable.updateMode === EDIT) {
                            if (errors.occurred($container))
                                return;
                            var editor = $container.data(update.EDITOR);
                            if (editor) {
                                $editor = editor.$editor;
                                $input = $editor.find("input");
                                var $editingCell = $editor.closest("." + update.EDIT_CELL_CLS).removeClass(update.EDIT_CELL_CLS);
                                update.triggerStopEdit($container, $editingCell, editor.land, $input.val());
                                $container.data(update.EDITOR, null);
                            }
                        }
                        exTable.setViewMode(mode);
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        render.begin($grid, internal.getDataSource($grid), exTable.detailContent);
                    }
                    /**
                     * Set paste overwrite.
                     */
                    function setPasteOverWrite($container, overwrite) {
                        var exTable = $container.data(NAMESPACE);
                        exTable.pasteOverWrite = overwrite;
                    }
                    /**
                     * Set stick overwrite.
                     */
                    function setStickOverWrite($container, overwrite) {
                        var exTable = $container.data(NAMESPACE);
                        exTable.stickOverWrite = overwrite;
                    }
                    /**
                     * Set stick mode.
                     */
                    function setStickMode($container, mode) {
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        var sticker = $grid.data(internal.STICKER);
                        if (!sticker) {
                            sticker = new spread.Sticker();
                            sticker.mode = mode;
                            $grid.data(internal.STICKER, sticker);
                        }
                        else {
                            sticker.mode = mode;
                        }
                    }
                    /**
                     * Set stick data.
                     */
                    function setStickData($container, data) {
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        var sticker = $grid.data(internal.STICKER);
                        if (!sticker) {
                            sticker = new spread.Sticker(data);
                            $grid.data(internal.STICKER, sticker);
                        }
                        else {
                            sticker.data = data;
                        }
                    }
                    /**
                     * Set stick validate.
                     */
                    function setStickValidate($container, validate) {
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        var sticker = $grid.data(internal.STICKER);
                        if (!sticker) {
                            sticker = new spread.Sticker();
                            sticker.validate = validate;
                            $grid.data(internal.STICKER, sticker);
                        }
                        else {
                            sticker.validate = validate;
                        }
                    }
                    /**
                     * Undo stick.
                     */
                    function undoStick($container) {
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        var histories = $grid.data(internal.STICK_HISTORY);
                        if (!histories)
                            return;
                        var items = histories.pop();
                        _.forEach(items, function (i) {
                            update.gridCell($grid, i.rowIndex, i.columnKey, -1, i.value, true);
                            internal.removeChange($grid, i);
                        });
                    }
                    /**
                     * Clear histories.
                     */
                    function clearHistories($container, type) {
                        var $grid = $container.find("." + BODY_PRF + DETAIL);
                        var histType;
                        switch (type) {
                            case "edit":
                                histType = internal.EDIT_HISTORY;
                                break;
                            case "copyPaste":
                                histType = internal.COPY_HISTORY;
                                break;
                            case "stick":
                                histType = internal.STICK_HISTORY;
                                break;
                        }
                        $grid.data(histType, null);
                    }
                    /**
                     * Lock cell.
                     */
                    function lockCell($container, rowId, columnKey) {
                        var $table = helper.getMainTable($container);
                        var ds = helper.getDataSource($table);
                        var pk = helper.getPrimaryKey($table);
                        var i = -1;
                        _.forEach(ds, function (r, j) {
                            if (r[pk] === rowId) {
                                i = j;
                                return false;
                            }
                        });
                        if (i === -1)
                            return;
                        var locks = $table.data(internal.DET);
                        var found = -1;
                        if (locks && locks[i] && locks[i].length > 0) {
                            _.forEach(locks[i], function (c, j) {
                                if (c === columnKey) {
                                    found = j;
                                    return false;
                                }
                            });
                        }
                        if (found === -1) {
                            var $cell = selection.cellAt($table, i, columnKey);
                            if (!locks) {
                                locks = {};
                                locks[i] = [columnKey];
                                $table.data(internal.DET, locks);
                            }
                            else if (locks && !locks[i]) {
                                locks[i] = [columnKey];
                            }
                            else
                                locks[i].push(columnKey);
                            helper.markCellWith(style.DET_CLS, $cell);
                        }
                    }
                    /**
                     * Unlock cell.
                     */
                    function unlockCell($container, rowId, columnKey) {
                        var $table = helper.getMainTable($container);
                        var ds = helper.getDataSource($table);
                        var pk = helper.getPrimaryKey($table);
                        var i = -1;
                        _.forEach(ds, function (r, j) {
                            if (r[pk] === rowId) {
                                i = j;
                                return false;
                            }
                        });
                        if (i === -1)
                            return;
                        var locks = $table.data(internal.DET);
                        var found = -1;
                        if (locks && locks[i] && locks[i].length > 0) {
                            _.forEach(locks[i], function (c, j) {
                                if (c === columnKey) {
                                    found = j;
                                    return false;
                                }
                            });
                        }
                        if (found > -1) {
                            var $cell = selection.cellAt($table, i, columnKey);
                            locks[i].splice(found, 1);
                            if (locks[i].length === 0)
                                delete locks[i];
                            helper.stripCellWith(style.DET_CLS, $cell);
                        }
                    }
                    /**
                     * Return popup value.
                     */
                    function returnPopupValue($container, value) {
                        var header = helper.getMainHeader($container).find("table:first");
                        if (!header)
                            return;
                        var $pu = header.data(internal.POPUP);
                        if (!$pu)
                            return;
                        events.trigger($pu, events.POPUP_INPUT_END, { value: value });
                    }
                    /**
                     * Get data source.
                     */
                    function getDataSource($container, name) {
                        switch (name) {
                            case "leftmost":
                                return helper.getPartialDataSource($container, LEFTMOST);
                            case "middle":
                                return helper.getPartialDataSource($container, MIDDLE);
                            case "detail":
                                return helper.getPartialDataSource($container, DETAIL);
                            case "verticalSummaries":
                                return helper.getPartialDataSource($container, VERTICAL_SUM);
                            case "leftHorizontalSummaries":
                                return helper.getPartialDataSource($container, LEFT_HORZ_SUM);
                            case "horizontalSummaries":
                                return helper.getPartialDataSource($container, HORIZONTAL_SUM);
                        }
                    }
                    /**
                     * Get cell by index.
                     */
                    function getCellByIndex($container, rowIndex, columnKey) {
                        var $tbl = helper.getMainTable($container);
                        if ($tbl.length === 0)
                            return;
                        return selection.cellAt($tbl, rowIndex, columnKey);
                    }
                    /**
                     * Get cell by Id.
                     */
                    function getCellById($container, rowId, columnKey) {
                        var $tbl = helper.getMainTable($container);
                        if ($tbl.length === 0)
                            return;
                        return selection.cellOf($tbl, rowId, columnKey);
                    }
                    /**
                     * Get updated cells.
                     */
                    function getUpdatedCells($container) {
                        var data = $container.data(NAMESPACE).modifications;
                        if (!data)
                            return [];
                        return helper.valuesArray(data);
                    }
                    /**
                     * Round retreat.
                     */
                    function roundRetreat($container, value) {
                        if (!value)
                            return;
                        events.trigger($container, events.ROUND_RETREAT, value);
                    }
                    /**
                     * Set cell value.
                     */
                    function setCellValue($container, name, rowId, columnKey, value) {
                        switch (name) {
                            case LEFT_TBL:
                                setValue($container, BODY_PRF + LEFTMOST, rowId, columnKey, value);
                                break;
                            case HORZ_SUM:
                                setValue($container, BODY_PRF + HORIZONTAL_SUM, rowId, columnKey, value);
                                break;
                            case VERT_SUM:
                                setValue($container, BODY_PRF + VERTICAL_SUM, rowId, columnKey, value);
                                break;
                        }
                    }
                    /**
                     * Set cell value by index.
                     */
                    function setCellValueByIndex($container, name, rowIdx, columnKey, value) {
                        switch (name) {
                            case LEFT_TBL:
                                setValueByIndex($container, BODY_PRF + LEFTMOST, rowIdx, columnKey, value);
                                break;
                            case HORZ_SUM:
                                setValueByIndex($container, BODY_PRF + HORIZONTAL_SUM, rowIdx, columnKey, value);
                                break;
                            case VERT_SUM:
                                setValueByIndex($container, BODY_PRF + VERTICAL_SUM, rowIdx, columnKey, value);
                                break;
                        }
                    }
                    /**
                     * Set value.
                     */
                    function setValue($container, selector, rowId, columnKey, value) {
                        var $grid = $container.find("." + selector);
                        if ($grid.length === 0)
                            return;
                        var rowIdx = helper.getRowIndex($grid, rowId);
                        var ds = helper.getDataSource($grid);
                        if (rowIdx === -1 || !ds || ds.length === 0)
                            return;
                        if (selector === BODY_PRF + LEFTMOST) {
                            if (ds[rowIdx][columnKey] !== value) {
                                update.gridCell($grid, rowIdx, columnKey, -1, value);
                                update.pushEditHistory($grid, new selection.Cell(rowIdx, columnKey, value, -1));
                            }
                        }
                        else {
                            ds[rowIdx][columnKey] = value;
                            refreshCell($grid, rowId, columnKey, value);
                        }
                    }
                    /**
                     * Set value by index.
                     */
                    function setValueByIndex($container, selector, rowIdx, columnKey, value) {
                        var $grid = $container.find("." + selector);
                        if ($grid.length === 0)
                            return;
                        var ds = helper.getDataSource($grid);
                        if (!ds || ds.length === 0)
                            return;
                        if (selector === BODY_PRF + LEFTMOST) {
                            if (ds[rowIdx][columnKey] !== value) {
                                update.gridCell($grid, rowIdx, columnKey, -1, value);
                                update.pushEditHistory($grid, new selection.Cell(rowIdx, columnKey, value, -1));
                            }
                        }
                        else {
                            ds[rowIdx][columnKey] = value;
                            refreshCellByIndex($grid, rowIdx, columnKey, value);
                        }
                    }
                    /**
                     * Refresh cell.
                     */
                    function refreshCell($grid, rowId, columnKey, value) {
                        var $c = selection.cellOf($grid, rowId, columnKey);
                        if ($c === intan.NULL || !$c)
                            return;
                        if (uk.util.isNullOrUndefined(value)) {
                            var ds = helper.getClonedDs($grid);
                            if (!ds || ds.length === 0)
                                return;
                            var rIdx = helper.getRowIndex($grid, rowId);
                            if (rIdx === -1)
                                return;
                            value = ds[rIdx][columnKey];
                        }
                        $c.text(value);
                    }
                    /**
                     * Refresh cell by index.
                     */
                    function refreshCellByIndex($grid, rowIdx, columnKey, value) {
                        var $c = selection.cellAt($grid, rowIdx, columnKey);
                        if ($c === intan.NULL || !$c)
                            return;
                        if (uk.util.isNullOrUndefined(value)) {
                            var ds = helper.getClonedDs($grid);
                            if (!ds || ds.length === 0)
                                return;
                            value = ds[rowIdx][columnKey];
                        }
                        $c.text(value);
                    }
                    /**
                     * Set row Id.
                     */
                    function setRowId($container, rowIndex, value) {
                        $container.find("div[class*='" + BODY_PRF + "']").filter(function () {
                            return !$(this).hasClass(BODY_PRF + HORIZONTAL_SUM) && !$(this).hasClass(BODY_PRF + LEFT_HORZ_SUM);
                        }).each(function () {
                            var key = helper.getPrimaryKey($(this));
                            var ds = internal.getDataSource($(this));
                            if (!ds || ds.length === 0 || !ds[rowIndex])
                                return;
                            if (ds[rowIndex][key] !== value) {
                                update.gridCell($(this), rowIndex, key, -1, value);
                                update.pushEditHistory($(this), new selection.Cell(rowIndex, key, value, -1));
                            }
                        });
                    }
                })(func || (func = {}));
                var internal;
                (function (internal) {
                    internal.X_OCCUPY = "ex-x-occupy";
                    internal.Y_OCCUPY = "ex-y-occupy";
                    internal.TANGI = "x-tangi";
                    internal.CANON = "x-canon";
                    internal.STICKER = "x-sticker";
                    internal.DET = "x-det";
                    internal.PAINTER = "painter";
                    internal.CELLS_STYLE = "body-cells-style";
                    internal.VIEW = "view";
                    internal.EX_PART = "expart";
                    internal.TIME_VALID_RANGE = "time-validate-range";
                    internal.SELECTED_CELLS = "selected-cells";
                    internal.LAST_SELECTED = "last-selected";
                    internal.SELECTED_ROWS = "selected-rows";
                    internal.COPY_HISTORY = "copy-history";
                    internal.EDIT_HISTORY = "edit-history";
                    internal.STICK_HISTORY = "stick-history";
                    internal.TOOLTIP = "tooltip";
                    internal.CONTEXT_MENU = "context-menu";
                    internal.POPUP = "popup";
                    internal.TEXT = "text";
                    internal.TIME = "time";
                    internal.DURATION = "duration";
                    internal.NUMBER = "number";
                    internal.DT_SEPARATOR = "/";
                    internal.COLUMN_IN = "column-in";
                    /**
                     * Get gem.
                     */
                    function getGem($grid) {
                        return $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                    }
                    internal.getGem = getGem;
                    /**
                     * Get data source.
                     */
                    function getDataSource($grid) {
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        if (!gen)
                            return;
                        return gen.dataSource;
                    }
                    internal.getDataSource = getDataSource;
                    /**
                     * Remove change.
                     */
                    function removeChange($grid, cell) {
                        var origDs = helper.getOrigDS($grid);
                        var exTable = helper.getExTableFromGrid($grid);
                        if (!origDs || !exTable)
                            return;
                        var oVal = origDs[cell.rowIndex][cell.columnKey];
                        var cells = exTable.modifications[cell.rowIndex];
                        if (!cells)
                            return;
                        var index = -1;
                        _.forEach(cells, function (c, i) {
                            if (helper.areSameCells(cell, c) && cell.value === oVal) {
                                index = i;
                                return false;
                            }
                        });
                        exTable.modifications[cell.rowIndex].splice(index, 1);
                    }
                    internal.removeChange = removeChange;
                    /**
                     * Clear states.
                     */
                    function clearStates($grid) {
                        $grid.data(internal.SELECTED_CELLS, null);
                        $grid.data(internal.LAST_SELECTED, null);
                        $grid.data(internal.COPY_HISTORY, null);
                        $grid.data(internal.EDIT_HISTORY, null);
                        $grid.data(internal.STICK_HISTORY, null);
                        var exTable = helper.getExTableFromGrid($grid);
                        if (!exTable)
                            return;
                        exTable.modifications = {};
                    }
                    internal.clearStates = clearStates;
                })(internal || (internal = {}));
                var helper;
                (function (helper) {
                    /**
                     * Get scroll width.
                     */
                    function getScrollWidth() {
                        var $outer = $('<div>').css({ visibility: 'hidden', width: 100, overflow: 'scroll' }).appendTo('body'), widthWithScroll = $('<div>').css({ width: '100%' }).appendTo($outer).outerWidth();
                        $outer.remove();
                        return 100 - widthWithScroll;
                    }
                    helper.getScrollWidth = getScrollWidth;
                    /**
                     * Get table.
                     */
                    function getTable($exTable, name) {
                        return $exTable.find("." + name);
                    }
                    helper.getTable = getTable;
                    /**
                     * Get main header.
                     */
                    function getMainHeader($exTable) {
                        return $exTable.find("." + HEADER_PRF + DETAIL);
                    }
                    helper.getMainHeader = getMainHeader;
                    /**
                     * Get main table.
                     */
                    function getMainTable($exTable) {
                        return $exTable.find("." + BODY_PRF + DETAIL);
                    }
                    helper.getMainTable = getMainTable;
                    /**
                     * Get leftmost table.
                     */
                    function getLeftmostTable($exTable) {
                        return $exTable.find("." + BODY_PRF + LEFTMOST);
                    }
                    helper.getLeftmostTable = getLeftmostTable;
                    /**
                     * Get exTable from grid.
                     */
                    function getExTableFromGrid($grid) {
                        return $grid.closest("." + NAMESPACE).data(NAMESPACE);
                    }
                    helper.getExTableFromGrid = getExTableFromGrid;
                    /**
                     * Get visible columns.
                     */
                    function getVisibleColumnsOn($grid) {
                        return ($grid.data(internal.TANGI) || $grid.data(internal.CANON)).painter.visibleColumns;
                    }
                    helper.getVisibleColumnsOn = getVisibleColumnsOn;
                    /**
                     * Get visible columns.
                     */
                    function getVisibleColumns(options) {
                        var visibleColumns = [];
                        filterColumns(options.columns, visibleColumns, []);
                        return visibleColumns;
                    }
                    helper.getVisibleColumns = getVisibleColumns;
                    /**
                     * Get origDS.
                     */
                    function getOrigDS($grid) {
                        return ($grid.data(internal.TANGI) || $grid.data(internal.CANON))._origDs;
                    }
                    helper.getOrigDS = getOrigDS;
                    /**
                     * Get data source.
                     */
                    function getDataSource($grid) {
                        return ($grid.data(internal.TANGI) || $grid.data(internal.CANON)).dataSource;
                    }
                    helper.getDataSource = getDataSource;
                    /**
                     * Get clonedDs.
                     */
                    function getClonedDs($grid) {
                        return _.cloneDeep(getDataSource($grid));
                    }
                    helper.getClonedDs = getClonedDs;
                    /**
                     * Get primary key.
                     */
                    function getPrimaryKey($grid) {
                        return ($grid.data(internal.TANGI) || $grid.data(internal.CANON)).primaryKey;
                    }
                    helper.getPrimaryKey = getPrimaryKey;
                    /**
                     * Classify columns.
                     */
                    function classifyColumns(options) {
                        var visibleColumns = [];
                        var hiddenColumns = [];
                        filterColumns(options.columns, visibleColumns, hiddenColumns);
                        return {
                            visibleColumns: visibleColumns,
                            hiddenColumns: hiddenColumns
                        };
                    }
                    helper.classifyColumns = classifyColumns;
                    /**
                     * Filter columns.
                     */
                    function filterColumns(columns, visibleColumns, hiddenColumns) {
                        _.forEach(columns, function (col) {
                            if (!uk.util.isNullOrUndefined(col.visible) && col.visible === false) {
                                hiddenColumns.push(col);
                                return;
                            }
                            if (!uk.util.isNullOrUndefined(col.group) && col.group.length > 0) {
                                filterColumns(col.group, visibleColumns, hiddenColumns);
                            }
                            else {
                                visibleColumns.push(col);
                            }
                        });
                    }
                    /**
                     * Get columns map.
                     */
                    function getColumnsMap(columns) {
                        return _.groupBy(columns, "key");
                    }
                    helper.getColumnsMap = getColumnsMap;
                    /**
                     * Get columns map from struct.
                     */
                    function columnsMapFromStruct(levelStruct) {
                        var map = {};
                        _.forEach(Object.keys(levelStruct), function (nth) {
                            _.forEach(levelStruct[nth], function (col) {
                                if (!uk.util.isNullOrUndefined(col.key)) {
                                    map[col.key] = col;
                                }
                            });
                        });
                        return map;
                    }
                    helper.columnsMapFromStruct = columnsMapFromStruct;
                    /**
                     * Get partial data source.
                     */
                    function getPartialDataSource($table, name) {
                        return {
                            header: getClonedDs($table.find("." + HEADER_PRF + name)),
                            body: getClonedDs($table.find("." + BODY_PRF + name))
                        };
                    }
                    helper.getPartialDataSource = getPartialDataSource;
                    /**
                     * Make connector.
                     */
                    function makeConnector() {
                        Connector[HEADER_PRF + LEFTMOST] = BODY_PRF + LEFTMOST;
                        Connector[HEADER_PRF + MIDDLE] = BODY_PRF + MIDDLE;
                        Connector[HEADER_PRF + DETAIL] = BODY_PRF + DETAIL;
                        Connector[HEADER_PRF + VERTICAL_SUM] = BODY_PRF + VERTICAL_SUM;
                        Connector[HEADER_PRF + HORIZONTAL_SUM] = BODY_PRF + HORIZONTAL_SUM;
                    }
                    helper.makeConnector = makeConnector;
                    /**
                     * Get class of header.
                     */
                    function getClassOfHeader($part) {
                        return $part.data(internal.EX_PART);
                    }
                    helper.getClassOfHeader = getClassOfHeader;
                    /**
                     * Is paste key.
                     */
                    function isPasteKey(evt) {
                        return evt.keyCode === 86;
                    }
                    helper.isPasteKey = isPasteKey;
                    /**
                     * Is copy key.
                     */
                    function isCopyKey(evt) {
                        return evt.keyCode === 67;
                    }
                    helper.isCopyKey = isCopyKey;
                    /**
                     * Is cut key.
                     */
                    function isCutKey(evt) {
                        return evt.keyCode === 88;
                    }
                    helper.isCutKey = isCutKey;
                    /**
                     * Is undo key.
                     */
                    function isUndoKey(evt) {
                        return evt.keyCode === 90;
                    }
                    helper.isUndoKey = isUndoKey;
                    /**
                     * Get cell coord.
                     */
                    function getCellCoord($cell) {
                        if ($cell.length === 0)
                            return;
                        var $td = $cell;
                        if ($cell.is("div")) {
                            $td = $cell.closest("td");
                        }
                        var view = $td.data(internal.VIEW);
                        if (!view)
                            return;
                        var coord = view.split("-");
                        if (uk.util.isNullOrUndefined(coord[0]) || uk.util.isNullOrUndefined(coord[1]))
                            return;
                        return {
                            rowIdx: Number(coord[0]),
                            columnKey: coord[1]
                        };
                    }
                    helper.getCellCoord = getCellCoord;
                    /**
                     * Get display column index.
                     */
                    function getDisplayColumnIndex($grid, key) {
                        var generator = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        var visibleColumns = generator.painter.visibleColumns;
                        var index;
                        _.forEach(visibleColumns, function (c, i) {
                            if (c.key === key) {
                                index = i;
                                return false;
                            }
                        });
                        return index;
                    }
                    helper.getDisplayColumnIndex = getDisplayColumnIndex;
                    /**
                     * Get row index.
                     */
                    function getRowIndex($grid, rowId) {
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        if (!gen)
                            return;
                        var start = gen.startIndex || 0;
                        var end = gen.endIndex || gen.dataSource.length - 1;
                        for (var i = start; i <= end; i++) {
                            if (gen.dataSource[i][gen.primaryKey] === rowId) {
                                return i;
                            }
                        }
                        return -1;
                    }
                    helper.getRowIndex = getRowIndex;
                    /**
                     * Grid visible columns.
                     */
                    function gridVisibleColumns($grid) {
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        if (!gen)
                            return;
                        return gen.painter.visibleColumns;
                    }
                    helper.gridVisibleColumns = gridVisibleColumns;
                    /**
                     * Grid columns map.
                     */
                    function gridColumnsMap($grid) {
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        if (!gen)
                            return;
                        return gen.painter.columnsMap;
                    }
                    helper.gridColumnsMap = gridColumnsMap;
                    /**
                     * Mark cell.
                     */
                    function markCellWith(clazz, $cell, nth, value) {
                        var $childCells = $cell.find("." + render.CHILD_CELL_CLS);
                        if ($cell.is("td") && $childCells.length > 0) {
                            if (!uk.util.isNullOrUndefined(nth) && nth !== -1) {
                                $($childCells[nth]).addClass(clazz);
                                if (clazz === errors.ERROR_CLS)
                                    $($childCells[nth]).text(value);
                            }
                            else {
                                $childCells.addClass(clazz);
                            }
                            return;
                        }
                        $cell.addClass(clazz);
                        if (clazz === errors.ERROR_CLS)
                            $cell.text(value);
                    }
                    helper.markCellWith = markCellWith;
                    /**
                     * Strip cell.
                     */
                    function stripCellWith(clazz, $cell, nth) {
                        var $childCells = $cell.find("." + render.CHILD_CELL_CLS);
                        if ($cell.is("td") && $childCells.length > 0) {
                            if (!uk.util.isNullOrUndefined(nth) && nth !== -1) {
                                $($childCells[nth]).removeClass(clazz);
                            }
                            else
                                $childCells.removeClass(clazz);
                            return;
                        }
                        $cell.removeClass(clazz);
                    }
                    helper.stripCellWith = stripCellWith;
                    /**
                     * Mark cells.
                     */
                    function markCellsWith(clazz, $cells) {
                        $cells.each(function () {
                            markCellWith(clazz, $(this));
                        });
                    }
                    helper.markCellsWith = markCellsWith;
                    /**
                     * Strip cells.
                     */
                    function stripCellsWith(clazz, $cells) {
                        $cells.each(function () {
                            stripCellWith(clazz, $(this));
                        });
                    }
                    helper.stripCellsWith = stripCellsWith;
                    /**
                     * Is detable.
                     */
                    function isDetable($cell) {
                        var children = $cell.children("." + render.CHILD_CELL_CLS);
                        return !($cell.is("." + style.HIDDEN_CLS) || $cell.is("." + style.SEAL_CLS)
                            || (children.length > 0
                                && ($(children[0]).is("." + style.HIDDEN_CLS)
                                    || $(children[0]).is("." + style.SEAL_CLS))));
                    }
                    helper.isDetable = isDetable;
                    /**
                     * Column index.
                     */
                    function indexOf(columnKey, visibleColumns) {
                        var index = -1;
                        _.forEach(visibleColumns, function (column, i) {
                            if (column.key === columnKey) {
                                index = i;
                                return false;
                            }
                        });
                        return index;
                    }
                    helper.indexOf = indexOf;
                    /**
                     * Next column key.
                     */
                    function nextKeyOf(columnIndex, visibleColumns) {
                        if (columnIndex >= visibleColumns.length - 1)
                            return;
                        return visibleColumns[columnIndex + 1].key;
                    }
                    helper.nextKeyOf = nextKeyOf;
                    /**
                     * Next cell.
                     */
                    function nextCellOf($grid, cell) {
                        var key, rowIndex, innerIdx;
                        var gen = $grid.data(internal.TANGI) || $grid.data(internal.CANON);
                        if (!gen)
                            return;
                        var visibleColumns = gen.painter.visibleColumns;
                        key = nextKeyOf(indexOf(cell.columnKey, visibleColumns), visibleColumns);
                        if (key) {
                            return new selection.Cell(cell.rowIndex, key, undefined, cell.innerIdx);
                        }
                        key = visibleColumns[0].key;
                        if (cell.rowIndex >= gen.dataSource.length - 1) {
                            if (cell.innerIdx === -1) {
                                rowIndex = 0;
                                innerIdx = -1;
                            }
                            else if (cell.innerIdx === 0) {
                                rowIndex = Number(cell.rowIndex);
                                innerIdx = 1;
                            }
                            else if (cell.innerIdx === 1) {
                                rowIndex = 0;
                                innerIdx = 0;
                            }
                        }
                        else {
                            if (cell.innerIdx === -1) {
                                rowIndex = Number(cell.rowIndex) + 1;
                                innerIdx = -1;
                            }
                            else if (cell.innerIdx === 0) {
                                rowIndex = Number(cell.rowIndex);
                                innerIdx = 1;
                            }
                            else if (cell.innerIdx === 1) {
                                rowIndex = Number(cell.rowIndex) + 1;
                                innerIdx = 0;
                            }
                        }
                        return new selection.Cell(rowIndex, key, undefined, innerIdx);
                    }
                    helper.nextCellOf = nextCellOf;
                    /**
                     * Call.
                     */
                    function call(fn) {
                        var args = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            args[_i - 1] = arguments[_i];
                        }
                        return function () {
                            return fn.apply(null, args);
                        };
                    }
                    helper.call = call;
                    /**
                     * Check br.
                     */
                    function containsBr(text) {
                        return text && text.indexOf("<br/>") > -1;
                    }
                    helper.containsBr = containsBr;
                    /**
                     * Compare cells.
                     */
                    function areSameCells(one, other) {
                        if (parseInt(one.rowIndex) !== parseInt(other.rowIndex)
                            || one.columnKey !== other.columnKey
                            || one.innerIdx !== other.innerIdx)
                            return false;
                        return true;
                    }
                    helper.areSameCells = areSameCells;
                    /**
                     * Is det cell.
                     */
                    function isDetCell($grid, rowIdx, key) {
                        var $cell = selection.cellAt($grid, rowIdx, key);
                        var $childCells = $cell.children("." + render.CHILD_CELL_CLS);
                        return ($childCells.length === 0 && $cell.is("." + style.DET_CLS))
                            || ($childCells.length > 0 && $($childCells[0]).is("." + style.DET_CLS));
                    }
                    helper.isDetCell = isDetCell;
                    /**
                     * Is xcell.
                     */
                    function isXCell($grid, rowId, key) {
                        var clazz = [];
                        for (var _i = 3; _i < arguments.length; _i++) {
                            clazz[_i - 3] = arguments[_i];
                        }
                        var cellsStyle = $grid.data(internal.CELLS_STYLE);
                        if (!cellsStyle)
                            return;
                        var result = _.find(cellsStyle, function (deco) {
                            return deco.columnKey === key && deco.rowId === rowId && clazz.some(function (c) { return deco.clazz === c; });
                        });
                        return result !== undefined;
                    }
                    helper.isXCell = isXCell;
                    /**
                     * Is xcell shown.
                     */
                    function isXCellShown($grid, rowIdx, key) {
                        var clazz = [];
                        for (var _i = 3; _i < arguments.length; _i++) {
                            clazz[_i - 3] = arguments[_i];
                        }
                        var $cell = selection.cellAt($grid, rowIdx, key);
                        var $childCells = $cell.children("." + render.CHILD_CELL_CLS);
                        var returnVal = false;
                        _.forEach(clazz, function (c) {
                            if (($childCells.length === 0 && $cell.is("." + c))
                                || ($childCells.length > 0 && $($childCells[0]).is("." + c))) {
                                returnVal = true;
                                return false;
                            }
                        });
                        return returnVal;
                    }
                    helper.isXCellShown = isXCellShown;
                    /**
                     * Is empty.
                     */
                    function isEmpty(obj) {
                        if (obj && obj.constructor === Array) {
                            var empty_1 = true;
                            _.forEach(obj, function (o) {
                                if (!uk.util.isNullOrUndefined(o)) {
                                    empty_1 = false;
                                    return false;
                                }
                            });
                            return empty_1;
                        }
                        if (!obj)
                            return true;
                        return false;
                    }
                    helper.isEmpty = isEmpty;
                    /**
                     * Values array.
                     */
                    function valuesArray(obj) {
                        var values = [];
                        _.forEach(Object.keys(obj), function (k, i) {
                            values = _.concat(values, obj[k]);
                        });
                        return values;
                    }
                    helper.valuesArray = valuesArray;
                    /**
                     * String value.
                     */
                    function stringValue(val) {
                        return _.isObject(val) ? JSON.stringify(val) : val;
                    }
                    helper.stringValue = stringValue;
                    /**
                     * Get cell data.
                     */
                    function getCellData(data) {
                        try {
                            return JSON.parse(data);
                        }
                        catch (e) {
                            return data;
                        }
                    }
                    helper.getCellData = getCellData;
                    /**
                     * View data.
                     */
                    function viewData(view, viewMode, obj) {
                        if (!view || !viewMode)
                            return;
                        var result = [];
                        _.forEach(view(viewMode), function (f) {
                            if (!f)
                                return;
                            result.push(obj[f]);
                        });
                        return result.length === 1 ? result[0] : result;
                    }
                    helper.viewData = viewData;
                    /**
                     * Is equal.
                     */
                    function isEqual(one, two, fields) {
                        if (_.isObject(one) && _.isObject(two)) {
                            return (fields && fields.length > 0)
                                ? _.isEqual(_.omitBy(one, function (d, p) { return fields.every(function (f) { return f !== p; }); }), _.omitBy(two, function (d, p) { return fields.every(function (f) { return f !== p; }); }))
                                : _.isEqual(_.omit(one, _.isFunction), _.omit(two, _.isFunction));
                        }
                        return _.isEqual(one, two);
                    }
                    helper.isEqual = isEqual;
                    /**
                     * Block.
                     */
                    function block($exTable) {
                        $exTable.block({
                            message: null,
                            fadeIn: 200,
                            css: {
                                width: $exTable.width(),
                                height: $exTable.height()
                            }
                        });
                    }
                    helper.block = block;
                    /**
                     * Unblock.
                     */
                    function unblock($exTable) {
                        $exTable.unblock();
                    }
                    helper.unblock = unblock;
                    /**
                     * Highlight column.
                     */
                    function highlightColumn($container, columnIndex) {
                        var grid = $container[0].querySelector("." + BODY_PRF + DETAIL);
                        var header = $container[0].querySelector("." + HEADER_PRF + DETAIL);
                        _.forEach(grid.getElementsByTagName("tr"), function (t) {
                            var tds = t.getElementsByTagName("td");
                            if (!tds || tds.length === 0)
                                return;
                            helper.addClass1n(tds[columnIndex], render.HIGHLIGHT_CLS);
                        });
                        _.forEach(header.getElementsByTagName("tr"), function (t) {
                            var tds = t.getElementsByTagName("td");
                            if (!tds || tds.length === 0)
                                return;
                            helper.addClass1n(tds[columnIndex], render.HIGHLIGHT_CLS);
                        });
                    }
                    helper.highlightColumn = highlightColumn;
                    /**
                     * Unhighlight column.
                     */
                    function unHighlightColumn($container, columnIndex) {
                        var grid = $container[0].querySelector("." + BODY_PRF + DETAIL);
                        var header = $container[0].querySelector("." + HEADER_PRF + DETAIL);
                        unHighlightGrid(grid, columnIndex);
                        unHighlightGrid(header, columnIndex);
                    }
                    helper.unHighlightColumn = unHighlightColumn;
                    /**
                     * Unhighlight grid.
                     */
                    function unHighlightGrid(grid, columnIndex) {
                        if (!grid)
                            return;
                        _.forEach(grid.getElementsByTagName("tr"), function (t) {
                            var tds = t.getElementsByTagName("td");
                            if (!tds || tds.length === 0)
                                return;
                            helper.removeClass1n(tds[columnIndex], render.HIGHLIGHT_CLS);
                        });
                    }
                    helper.unHighlightGrid = unHighlightGrid;
                    /**
                     * First sibling.
                     */
                    function firstSibling(node, clazz) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        for (var i = 0; i < children.length; i++) {
                            if (node !== children[i] && children[i].classList.contains(clazz)) {
                                return children[i];
                            }
                        }
                    }
                    helper.firstSibling = firstSibling;
                    /**
                     * Class siblings.
                     */
                    function classSiblings(node, partialClass) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        var results = [];
                        for (var i = 0; i < children.length; i++) {
                            if (children[i] === node)
                                continue;
                            var classList = children[i].classList;
                            for (var j = 0; j < classList.length; j++) {
                                if (classList.item(j).indexOf(partialClass) >= 0) {
                                    results.push(children[i]);
                                }
                            }
                        }
                        return results;
                    }
                    helper.classSiblings = classSiblings;
                    /**
                     * Consume siblings.
                     */
                    function consumeSiblings(node, op) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        for (var i = 0; i < children.length; i++) {
                            if (node !== children[i]) {
                                op(children[i]);
                            }
                        }
                    }
                    helper.consumeSiblings = consumeSiblings;
                    /**
                     * Closest.
                     */
                    function closest(el, selector) {
                        var matches;
                        ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'].some(function (fn) {
                            if (typeof document.body[fn] === 'function') {
                                matches = fn;
                                return true;
                            }
                            return false;
                        });
                        var parent;
                        while (el) {
                            parent = el.parentElement;
                            if (parent && parent[matches](selector)) {
                                return parent;
                            }
                            el = parent;
                        }
                    }
                    helper.closest = closest;
                    /**
                     * Add class.
                     */
                    function addClass1n(node, clazz) {
                        if (node && node.constructor !== HTMLCollection) {
                            var children = node.querySelectorAll("." + render.CHILD_CELL_CLS);
                            if (children.length > 0)
                                addClass(children, clazz);
                            else
                                addClass(node, clazz);
                            return;
                        }
                        for (var i = 0; i < node.length; i++) {
                            var children = node[i].querySelectorAll("." + render.CHILD_CELL_CLS);
                            if (children.length > 0)
                                addClass(children, clazz);
                            else
                                addClass(node[i], clazz);
                        }
                    }
                    helper.addClass1n = addClass1n;
                    /**
                     * Remove class.
                     */
                    function removeClass1n(node, clazz) {
                        if (node && node.constructor !== HTMLCollection) {
                            var children = node.querySelectorAll("." + render.CHILD_CELL_CLS);
                            if (children.length > 0)
                                removeClass(children, clazz);
                            else
                                removeClass(node, clazz);
                            return;
                        }
                        for (var i = 0; i < node.length; i++) {
                            var children = node[i].querySelectorAll("." + render.CHILD_CELL_CLS);
                            if (children.length > 0)
                                removeClass(children, clazz);
                            else
                                removeClass(node[i], clazz);
                        }
                    }
                    helper.removeClass1n = removeClass1n;
                    /**
                     * Add class.
                     */
                    function addClass(node, clazz) {
                        if (node && node.constructor !== HTMLCollection && node.constructor !== NodeList) {
                            node.classList.add(clazz);
                            return;
                        }
                        for (var i = 0; i < node.length; i++) {
                            if (!node[i].classList.contains(clazz)) {
                                node[i].classList.add(clazz);
                            }
                        }
                    }
                    helper.addClass = addClass;
                    /**
                     * Remove class.
                     */
                    function removeClass(node, clazz) {
                        if (node && node.constructor !== HTMLCollection && node.constructor !== NodeList) {
                            node.classList.remove(clazz);
                            return;
                        }
                        for (var i = 0; i < node.length; i++) {
                            if (node[i].classList.contains(clazz)) {
                                node[i].classList.remove(clazz);
                            }
                        }
                    }
                    helper.removeClass = removeClass;
                    /**
                     * Has class.
                     */
                    function hasClass(node, clazz) {
                        return node.classList.contains(clazz);
                    }
                    helper.hasClass = hasClass;
                    /**
                     * Index.
                     */
                    function indexInParent(node) {
                        var parent = node.parentElement;
                        if (!parent)
                            return;
                        var children = parent.children;
                        var index = 0;
                        for (var i = 0; i < children.length; i++) {
                            if (children[i] === node)
                                return index;
                            if (children[i].nodeType === 1)
                                index++;
                        }
                        return -1;
                    }
                    helper.indexInParent = indexInParent;
                })(helper || (helper = {}));
                var widget;
                (function (widget) {
                    widget.MENU = "menu";
                    widget.POPUP = "popup";
                    widget.MENU_CLS = "x-context-menu";
                    widget.POPUP_CLS = "x-popup-panel";
                    widget.PARTITION_CLS = "partition";
                    widget.MENU_ITEM_CLS = "menu-item";
                    widget.MENU_ICON_CLS = "menu-icon";
                    widget.DISABLED_CLS = "disabled";
                    /**
                     * Widget.
                     */
                    var XWidget = (function () {
                        function XWidget($selector) {
                            this.$selector = $selector;
                        }
                        /**
                         * Get table.
                         */
                        XWidget.prototype.getTable = function () {
                            this.$table = this.$selector.closest("table");
                        };
                        return XWidget;
                    }());
                    /**
                     * Tooltip.
                     */
                    var Tooltip = (function (_super) {
                        __extends(Tooltip, _super);
                        function Tooltip($selector, options) {
                            _super.call(this, $selector);
                            this.options = options;
                            this.defaultOpts = {
                                showRight: true,
                                width: "100px"
                            };
                            this.initialize();
                        }
                        /**
                         * Initialize.
                         */
                        Tooltip.prototype.initialize = function () {
                            var self = this;
                            $.extend(true, self.options, self.defaultOpts);
                            self.$selector.on(events.MOUSE_OVER, function (evt) {
                                self.getTable();
                                if (self.$table.length === 0)
                                    return;
                                var $t2 = self.$table.data(internal.TOOLTIP);
                                if (!$t2) {
                                    $t2 = $("<div/>").addClass(cssClass(self.options));
                                    $t2.appendTo("body");
                                    self.$table.data(internal.TOOLTIP, $t2);
                                }
                                $t2.empty().append(self.options.sources).css({ visibility: "visible" })
                                    .position({ my: "left top", at: "left+" + self.$selector.outerWidth() + " top+5", of: self.$selector });
                            });
                            self.$selector.on(events.MOUSE_OUT, function (evt) {
                                self.getTable();
                                if (self.$table.length === 0)
                                    return;
                                var $t2 = self.$table.data(internal.TOOLTIP);
                                if (!$t2 || $t2.css("display") === "none")
                                    return;
                                $t2.css({ visibility: "hidden" });
                            });
                        };
                        return Tooltip;
                    }(XWidget));
                    widget.Tooltip = Tooltip;
                    /**
                     * Popup.
                     */
                    var Popup = (function (_super) {
                        __extends(Popup, _super);
                        function Popup($selector) {
                            _super.call(this, $selector);
                            this.initialize();
                        }
                        /**
                         * Initialize.
                         */
                        Popup.prototype.initialize = function () {
                            var self = this;
                            self.$selector.on(events.MOUSE_DOWN, function (evt) {
                                self.getTable();
                                if (evt.ctrlKey && self.$table.closest("." + NAMESPACE).data(NAMESPACE).determination)
                                    return;
                                self.click(evt);
                            });
                        };
                        return Popup;
                    }(XWidget));
                    /**
                     * Context menu.
                     */
                    var ContextMenu = (function (_super) {
                        __extends(ContextMenu, _super);
                        function ContextMenu($selector, items) {
                            _super.call(this, $selector);
                            this.items = items;
                        }
                        /**
                         * Click.
                         */
                        ContextMenu.prototype.click = function (evt) {
                            var self = this;
                            var $menu = self.$table.data(internal.CONTEXT_MENU);
                            if (!$menu) {
                                $menu = $("<ul/>").addClass(widget.MENU_CLS).appendTo("body").hide();
                                _.forEach(self.items, function (item) {
                                    self.createItem($menu, item);
                                });
                                self.$table.data(internal.CONTEXT_MENU, $menu);
                            }
                            if ($menu.css("display") === "none") {
                                var pos = eventPageOffset(evt, false);
                                $menu.show().css({ top: pos.pageY, left: pos.pageX });
                            }
                            else {
                                $menu.hide();
                            }
                            var $pu = self.$table.data(internal.POPUP);
                            if ($pu && $pu.css("display") !== "none") {
                                $pu.hide();
                            }
                            update.outsideClick(self.$table.closest("." + NAMESPACE), self.$selector);
                            evt.stopPropagation();
                            hideIfOutside($menu);
                        };
                        /**
                         * Create item.
                         */
                        ContextMenu.prototype.createItem = function ($menu, item) {
                            if (item.id === widget.PARTITION_CLS) {
                                $("<li/>").addClass(widget.MENU_ITEM_CLS + " " + widget.PARTITION_CLS).appendTo($menu);
                                return;
                            }
                            var $li = $("<li/>").addClass(widget.MENU_ITEM_CLS).text(item.text)
                                .on(events.CLICK_EVT, function (evt) {
                                if (item.disabled)
                                    return;
                                item.selectHandler(item.id);
                                $menu.hide();
                            }).appendTo($menu);
                            if (item.disabled) {
                                $li.addClass(widget.DISABLED_CLS);
                            }
                            if (item.icon) {
                                $li.append($("<span/>").addClass(widget.MENU_ICON_CLS + " " + item.icon));
                            }
                        };
                        return ContextMenu;
                    }(Popup));
                    widget.ContextMenu = ContextMenu;
                    /**
                     * Menu item.
                     */
                    var MenuItem = (function () {
                        function MenuItem(text, selectHandler, disabled, icon) {
                            this.text = text;
                            this.selectHandler = selectHandler ? selectHandler : $.noop();
                            this.disabled = disabled;
                            this.icon = icon;
                        }
                        return MenuItem;
                    }());
                    widget.MenuItem = MenuItem;
                    /**
                     * Popup panel.
                     */
                    var PopupPanel = (function (_super) {
                        __extends(PopupPanel, _super);
                        function PopupPanel($selector, $panel, position) {
                            _super.call(this, $selector);
                            this.$panel = $panel;
                            this.position = position;
                        }
                        /**
                         * Click.
                         */
                        PopupPanel.prototype.click = function (evt) {
                            var self = this;
                            var $pu = self.$table.data(internal.POPUP);
                            if (!$pu) {
                                $pu = self.$panel.addClass(widget.POPUP_CLS).hide();
                                self.$table.data(internal.POPUP, $pu);
                            }
                            if ($pu.css("display") === "none") {
                                var pos = eventPageOffset(evt, false);
                                $pu.show().css(self.getPosition($pu, pos, self.position || "top left"));
                                events.trigger(self.$table, events.POPUP_SHOWN, $(evt.target));
                                self.addListener($pu, $(evt.target));
                            }
                            else {
                                $pu.hide();
                            }
                            var $menu = self.$table.data(internal.CONTEXT_MENU);
                            if ($menu && $menu.css("display") !== "none") {
                                $menu.hide();
                            }
                            evt.stopPropagation();
                            hideIfOutside($pu);
                        };
                        /**
                         * Add listener.
                         */
                        PopupPanel.prototype.addListener = function ($pu, $t) {
                            var self = this;
                            $pu.off(events.POPUP_INPUT_END);
                            $pu.on(events.POPUP_INPUT_END, function (evt, ui) {
                                var $header = self.$selector.closest("table").parent();
                                if ($header.hasClass(HEADER)) {
                                    var ds = helper.getDataSource($header);
                                    if (!ds || ds.length === 0)
                                        return;
                                    var coord = helper.getCellCoord($t);
                                    ds[coord.rowIdx][coord.columnKey] = ui.value;
                                    $t.text(ui.value);
                                    $pu.hide();
                                }
                            });
                        };
                        /**
                         * Get position.
                         */
                        PopupPanel.prototype.getPosition = function ($pu, pos, my) {
                            if (my === "top left") {
                                return { top: pos.pageY - $pu.outerHeight(), left: pos.pageX - $pu.outerWidth() };
                            }
                            else if (my === "bottom left") {
                                return { top: pos.pageY, left: pos.pageX - $pu.outerWidth() };
                            }
                            else if (my === "top right") {
                                return { top: pos.pageY - $pu.outerHeight(), left: pos.pageX };
                            }
                            else if (my === "bottom right") {
                                return { top: pos.pageY, left: pos.pageX };
                            }
                        };
                        return PopupPanel;
                    }(Popup));
                    widget.PopupPanel = PopupPanel;
                    /**
                     * Bind.
                     */
                    function bind($row, rowIdx, headerPopupFt) {
                        var wType;
                        if (!headerPopupFt)
                            return;
                        _.forEach(headerPopupFt.menu.rows, function (rId) {
                            if (rId === rowIdx) {
                                new ContextMenu($row, headerPopupFt.menu.items);
                                wType = widget.MENU;
                                return false;
                            }
                        });
                        if (wType)
                            return;
                        _.forEach(headerPopupFt.popup.rows, function (rId) {
                            if (rId === rowIdx) {
                                new PopupPanel($row, headerPopupFt.popup.provider());
                                wType = widget.POPUP;
                                return false;
                            }
                        });
                        return wType;
                    }
                    widget.bind = bind;
                    /**
                     * Hide.
                     */
                    function hideIfOutside($w) {
                        $(document).on(events.MOUSE_DOWN, function (evt) {
                            if (outsideOf($w, evt.target)) {
                                $w.hide();
                            }
                        });
                        var outsideOf = function ($container, target) {
                            return !$container.is(target) && $container.has(target).length === 0;
                        };
                    }
                    /**
                     * Offset.
                     */
                    function eventPageOffset(evt, isFixed) {
                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
                        var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                        return isFixed ? { pageX: evt.pageX - scrollLeft, pageY: evt.pageY - scrollTop }
                            : { pageX: evt.pageX, pageY: evt.pageY };
                    }
                    /**
                     * Class.
                     */
                    function cssClass(options) {
                        var css = options.showBelow ? 'bottom' : 'top';
                        css += '-';
                        css += (options.showRight ? 'right' : 'left');
                        css += '-tooltip';
                        return css;
                    }
                })(widget || (widget = {}));
            })(exTable = ui_25.exTable || (ui_25.exTable = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_26) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Dialog binding handler
                 */
                var NtsMonthDaysBindingHandler = (function () {
                    function NtsMonthDaysBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsMonthDaysBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var $container = $(element);
                        var self = this;
                        var value = ko.unwrap(data.value);
                        var dataName = ko.unwrap(data.name);
                        var enable = data.enable === undefined ? true : ko.unwrap(data.enable);
                        var tabIndex = nts.uk.util.isNullOrEmpty($container.attr("tabindex")) ? "0" : $container.attr("tabindex");
                        $container.removeAttr("tabindex");
                        $container.data("tabindex", tabIndex);
                        $container.addClass("ntsControl ntsMonthDays_Container");
                        $container.append("<div class='ntsMonthDays'/>");
                        var $control = $container.find(".ntsMonthDays");
                        $control.append("<div class='ntsMonthPicker ntsComboBox ntsMonthDays_Component' /><div class='ntsMonthLabel ntsLabel ntsMonthDays_Component'/>" +
                            "<div class='ntsDayPicker ntsComboBox ntsMonthDays_Component' /><div class='ntsDayLabel ntsLabel ntsMonthDays_Component'/>");
                        var $monthPicker = $control.find(".ntsMonthPicker");
                        var $dayPicker = $control.find(".ntsDayPicker");
                        var $monthLabel = $control.find(".ntsMonthLabel");
                        var $dayLabel = $control.find(".ntsDayLabel");
                        $monthLabel.append("<label>月</label>");
                        $dayLabel.append("<label>日</label>");
                        $monthPicker.igCombo({
                            dataSource: NtsMonthDaysBindingHandler.getMonths(),
                            textKey: "text",
                            valueKey: "value",
                            width: "60px",
                            height: "30px",
                            mode: "dropdown",
                            selectionChanged: function (evt, ui) {
                                var currentMonth = ui.items[0].data.value;
                                var currentDay = $dayPicker.igCombo("selectedItems");
                                var days = NtsMonthDaysBindingHandler.getDaysInMonth(currentMonth);
                                var value = currentDay[0].data.value > days.length ? days.length : currentDay[0].data.value;
                                $dayPicker.igCombo("option", "dataSource", days);
                                data.value(currentMonth * 100 + value);
                            }
                        });
                        $dayPicker.igCombo({
                            dataSource: NtsMonthDaysBindingHandler.getDaysInMonth(1),
                            textKey: "text",
                            valueKey: "value",
                            width: "60px",
                            height: "30px",
                            mode: "dropdown",
                            selectionChanged: function (evt, ui) {
                                var currentDay = ui.items[0].data.value;
                                var currentMonth = $monthPicker.igCombo("selectedItems")[0].data.value;
                                data.value(currentMonth * 100 + currentDay);
                            }
                        });
                    };
                    /**
                     * Update
                     */
                    NtsMonthDaysBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var $container = $(element);
                        var value = ko.unwrap(data.value);
                        var enable = data.enable === undefined ? true : ko.unwrap(data.enable);
                        var $monthPicker = $container.find(".ntsMonthPicker");
                        var $dayPicker = $container.find(".ntsDayPicker");
                        if (enable !== false) {
                            $monthPicker.igCombo('option', 'disabled', false);
                            $dayPicker.igCombo('option', 'disabled', false);
                            $container.find("input").attr("tabindex", $container.data("tabindex"));
                        }
                        else {
                            $monthPicker.igCombo('option', 'disabled', true);
                            $dayPicker.igCombo('option', 'disabled', true);
                            $container.find("input").attr("tabindex", "-1");
                        }
                        if (!nts.uk.util.isNullOrUndefined(value) && nts.uk.ntsNumber.isNumber(value)) {
                            var month = nts.uk.ntsNumber.trunc(parseInt(value) / 100);
                            var day = parseInt(value) % 100;
                            $monthPicker.igCombo("value", month);
                            $dayPicker.igCombo("value", day);
                        }
                        var currentDay = $dayPicker.igCombo("selectedItems")[0].data.value;
                        var currentMonth = $monthPicker.igCombo("selectedItems")[0].data.value;
                        data.value(currentMonth * 100 + currentDay);
                    };
                    NtsMonthDaysBindingHandler.getMonths = function () {
                        var monthSource = [];
                        while (monthSource.length < 12) {
                            monthSource.push({ text: monthSource.length + 1, value: monthSource.length + 1 });
                        }
                        return monthSource;
                    };
                    NtsMonthDaysBindingHandler.getDaysInMonth = function (month) {
                        var daysInMonth = moment(month, "MM").daysInMonth();
                        if (daysInMonth !== NaN) {
                            //                if (month === 2){
                            //                    daysInMonth++;        
                            //                }
                            var days = [];
                            while (days.length < daysInMonth) {
                                days.push({ text: days.length + 1, value: days.length + 1 });
                            }
                            return days;
                        }
                        return [];
                    };
                    return NtsMonthDaysBindingHandler;
                }());
                ko.bindingHandlers['ntsMonthDays'] = new NtsMonthDaysBindingHandler();
            })(koExtentions = ui_26.koExtentions || (ui_26.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var accordion;
                (function (accordion) {
                    $.widget("ui.accordion", $.ui.accordion, {
                        _create: function () {
                            this["tabindex"] = this.element.attr("tabindex") ? this.element.attr("tabindex") : 0;
                            this.element.removeAttr("tabindex");
                            return this._super();
                        },
                        _refresh: function () {
                            this._super();
                            if (!this.active.length) {
                                this.headers.eq(0).attr("tabIndex", this.tabindex);
                            }
                            else {
                                this.active.attr({
                                    tabIndex: this.tabindex
                                });
                            }
                        },
                        _toggle: function (data) {
                            this._super(data);
                            var toShow = data.newPanel;
                            toShow.prev().attr({ tabIndex: this.tabindex });
                        },
                        _keydown: function (event) {
                            if (event.altKey || event.ctrlKey) {
                                return;
                            }
                            var keyCode = $.ui.keyCode, length = this.headers.length, currentIndex = this.headers.index(event.target), toFocus = false;
                            switch (event.keyCode) {
                                case keyCode.RIGHT:
                                case keyCode.DOWN:
                                    toFocus = this.headers[(currentIndex + 1) % length];
                                    break;
                                case keyCode.LEFT:
                                case keyCode.UP:
                                    toFocus = this.headers[(currentIndex - 1 + length) % length];
                                    break;
                                case keyCode.SPACE:
                                case keyCode.ENTER:
                                    this._eventHandler(event);
                                    break;
                                case keyCode.HOME:
                                    toFocus = this.headers[0];
                                    break;
                                case keyCode.END:
                                    toFocus = this.headers[length - 1];
                                    break;
                            }
                            if (toFocus) {
                                $(event.target).attr("tabIndex", -1);
                                $(toFocus).attr("tabIndex", this.tabindex);
                                $(toFocus).trigger("focus");
                                event.preventDefault();
                            }
                        }
                    });
                })(accordion || (accordion = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsTreeView;
                (function (ntsTreeView) {
                    var OUTSIDE_AUTO_SCROLL_SPEED = {
                        RATIO: 0.2,
                        MAX: 30
                    };
                    $.fn.ntsTreeView = function (action, param) {
                        var $tree = $(this);
                        switch (action) {
                            case 'getSelected':
                                return getSelected($tree);
                            case 'setSelected':
                                return setSelected($tree, param);
                            case 'deselectAll':
                                return deselectAll($tree);
                        }
                    };
                    function getSelected($tree) {
                        if ($tree.igTreeGridSelection('option', 'multipleSelection')) {
                            var selectedRows = $tree.igTreeGridSelection('selectedRows');
                            if (selectedRows)
                                return _.map(selectedRows, convertSelected);
                            return [];
                        }
                        else {
                            var selectedRow = $tree.igTreeGridSelection('selectedRow');
                            if (selectedRow)
                                return convertSelected(selectedRow);
                            return undefined;
                        }
                    }
                    function convertSelected(selectedRow) {
                        return {
                            id: selectedRow.id,
                            index: selectedRow.index
                        };
                    }
                    function setSelected($tree, selectedId) {
                        deselectAll($tree);
                        if ($tree.igTreeGridSelection('option', 'multipleSelection')) {
                            selectedId.forEach(function (id) { return $tree.igTreeGridSelection('selectRowById', id); });
                        }
                        else {
                            $tree.igTreeGridSelection('selectRowById', selectedId);
                        }
                    }
                    function deselectAll($grid) {
                        $grid.igTreeGridSelection('clearSelection');
                    }
                })(ntsTreeView || (ntsTreeView = {}));
                var ntsTreeDrag;
                (function (ntsTreeDrag) {
                    $.fn.ntsTreeDrag = function (action, param) {
                        var $tree = $(this);
                        switch (action) {
                            case 'getSelected':
                                return getSelected($tree);
                            case 'setSelected':
                                return setSelected($tree, param);
                            case 'deselectAll':
                                return deselectAll($tree);
                            case 'isMulti':
                                return isMultiple($tree);
                        }
                    };
                    function isMultiple($tree) {
                        var isMulti = $tree.igTree("option", "checkboxMode") !== "off";
                        return isMulti;
                    }
                    function getSelected($tree) {
                        var isMulti = isMultiple($tree);
                        if (isMulti) {
                            var values = $tree.igTree("checkedNodes");
                            _.forEach(values, function (e) {
                                return e["id"] = e.data[e.binding.valueKey];
                            });
                            return values;
                        }
                        else {
                            var value = $tree.igTree("selectedNode");
                            value["id"] = value.data[value.binding.valueKey];
                            return value;
                        }
                    }
                    function setSelected($tree, selectedId) {
                        deselectAll($tree);
                        var isMulti = isMultiple($tree);
                        if (isMulti) {
                            if (!$.isArray(selectedId)) {
                                selectedId = [selectedId];
                            }
                            selectedId.forEach(function (id) {
                                var $node = $tree.igTree("nodesByValue", id);
                                $tree.igTree("toggleCheckstate", $node);
                            });
                        }
                        else {
                            var $node = $tree.igTree("nodesByValue", selectedId);
                            $tree.igTree("select", $node);
                        }
                    }
                    function deselectAll($tree) {
                        _.forEach($tree.igTree("checkedNodes"), function (node) {
                            $tree.igTree("toggleCheckstate", node.element);
                        });
                    }
                })(ntsTreeDrag || (ntsTreeDrag = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_27) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Dialog binding handler
                 */
                var NtsImageEditorBindingHandler = (function () {
                    function NtsImageEditorBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsImageEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var editable = nts.uk.util.isNullOrUndefined(data.editable) ? false : ko.unwrap(data.editable);
                        var zoomble = nts.uk.util.isNullOrUndefined(data.zoomble) ? false : ko.unwrap(data.zoomble);
                        var width = nts.uk.util.isNullOrUndefined(data.width) ? 600 : ko.unwrap(data.width);
                        var freeResize = nts.uk.util.isNullOrUndefined(data.freeResize) ? true : ko.unwrap(data.freeResize);
                        var resizeRatio = nts.uk.util.isNullOrUndefined(data.resizeRatio) ? 1 : ko.unwrap(data.resizeRatio);
                        var height = nts.uk.util.isNullOrUndefined(data.height) ? 600 : ko.unwrap(data.height);
                        var extension = nts.uk.util.isNullOrUndefined(data.accept) ? [] : ko.unwrap(data.accept);
                        var msgIdForUnknownFile = nts.uk.util.isNullOrUndefined(data.msgIdForUnknownFile) ? 'Msg_77' : ko.unwrap(data.msgIdForUnknownFile);
                        var croppable = false;
                        var helper = new ImageEditorHelper(extension, msgIdForUnknownFile);
                        var $container = $("<div>", { 'class': 'image-editor-container' }), $element = $(element).append($container);
                        var constructSite = new ImageEditorConstructSite($element, helper);
                        var $uploadArea = $("<div>", { "class": "image-upload-container image-editor-area cf" });
                        $container.append($uploadArea);
                        if (editable === true) {
                            croppable = true;
                            var confirm_1 = { checked: ko.observable(true) };
                            $(element).data('checkbox', confirm_1);
                            var $editContainer = $("<div>", { "class": "edit-action-container image-editor-area" });
                            $container.append($editContainer);
                            constructSite.buildCheckBoxArea(allBindingsAccessor, viewModel, bindingContext);
                        }
                        constructSite.buildActionArea();
                        constructSite.buildUploadAction();
                        constructSite.buildImagePreviewArea();
                        constructSite.buildFileChangeHandler();
                        var customOption = {
                            aspectRatio: freeResize ? 0 : resizeRatio,
                            dragMode: croppable ? "crop" : "none",
                            modal: false
                        };
                        constructSite.buildImageLoadedHandler(zoomble, customOption);
                        constructSite.buildSrcChangeHandler();
                        constructSite.buildImageDropEvent();
                        $element.find(".image-holder").width(width - 12).height(height - 12);
                        return { 'controlsDescendantBindings': true };
                    };
                    /**
                     * Update
                     */
                    NtsImageEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor(), $element = $(element), confirm = $(element).data('checkbox'), $checkbox = $element.find('.comfirm-checkbox');
                        if (!nts.uk.util.isNullOrEmpty($checkbox)) {
                            ko.bindingHandlers["ntsCheckBox"].update($checkbox[0], function () {
                                return confirm;
                            }, allBindingsAccessor, viewModel, bindingContext);
                        }
                    };
                    return NtsImageEditorBindingHandler;
                }());
                var ImageEditorConstructSite = (function () {
                    function ImageEditorConstructSite($root, helper) {
                        this.$root = $root;
                        this.helper = helper;
                    }
                    ImageEditorConstructSite.prototype.buildCheckBoxArea = function (allBindingsAccessor, viewModel, bindingContext) {
                        var self = this;
                        var $checkboxHolder = $("<div>", { "class": "checkbox-holder image-editor-component" });
                        var $editContainer = this.$root.find(".edit-action-container");
                        $editContainer.append($checkboxHolder);
                        this.$checkbox = $("<div>", { "class": "comfirm-checkbox style-button", text: "表示エリア選択する" });
                        var $comment = $("<div>", { "class": "crop-description cf" });
                        $checkboxHolder.append(this.$checkbox);
                        $checkboxHolder.append($comment);
                        var $cropAreaIcon = $("<div>", { "class": "crop-icon inline-container" });
                        var $cropText = $("<div>", { "class": "crop-description-text inline-container" });
                        var $mousePointerIcon = $("<div>", { "class": "mouse-icon inline-container" });
                        var $mouseText = $("<div>", { "class": "mouse-description-text inline-container" });
                        $("<label>", { "class": "info-label", "text": "のエリア内をメイン画面に表示します。" }).appendTo($cropText);
                        $("<label>", { "class": "info-label", "text": "マウスのドラッグ＆ドロップでエリアを変更できます。" }).appendTo($mouseText);
                        $comment.append($cropAreaIcon).append($cropText).append($mousePointerIcon).append($mouseText);
                        var checkboxId = nts.uk.util.randomId();
                        ko.bindingHandlers["ntsCheckBox"].init(this.$checkbox[0], function () {
                            return self.$root.data('checkbox');
                        }, allBindingsAccessor, viewModel, bindingContext);
                    };
                    ImageEditorConstructSite.prototype.buildActionArea = function () {
                        this.$inputFile = $("<input>", { "class": "fileinput", "type": "file", "accept": this.helper.toStringExtension() })
                            .appendTo($("<div>", { "class": "image-editor-component inline-container nts-fileupload-container" }));
                        this.$imageNameLbl = $("<label>", { "class": "image-name-lbl info-label" })
                            .appendTo($("<div>", { "class": "image-editor-component inline-container" }));
                        this.$imageSizeLbl = $("<label>", { "class": "image-info-lbl info-label" })
                            .appendTo(this.$imageNameLbl.parent());
                        this.$uploadBtn = $("<button>", { "class": "upload-btn" })
                            .appendTo($("<div>", { "class": "image-editor-component inline-container" }));
                        var $uploadArea = this.$root.find(".image-upload-container");
                        $uploadArea.append(this.$uploadBtn.parent());
                        $uploadArea.append(this.$imageNameLbl.parent());
                        $uploadArea.append(this.$inputFile.parent());
                    };
                    ImageEditorConstructSite.prototype.buildImagePreviewArea = function () {
                        this.$previewArea = $("<div>", { "class": "image-preview-container image-editor-area" });
                        this.$previewArea.appendTo(this.$root.find(".image-editor-container"));
                        var imagePreviewId = nts.uk.util.randomId();
                        var $imageContainer = $("<div>", { "class": "image-container container-no-upload-background" }).appendTo(this.$previewArea);
                        var $imageHolder = $("<div>", { "class": "image-holder image-editor-component image-upload-icon" }).appendTo($imageContainer);
                        this.$imagePreview = $("<img>", { "class": "image-preview", "id": imagePreviewId }).appendTo($imageHolder);
                    };
                    ImageEditorConstructSite.prototype.buildUploadAction = function () {
                        var self = this;
                        self.$uploadBtn.text("参照").click(function (evt) {
                            self.$inputFile.click();
                        });
                    };
                    ImageEditorConstructSite.prototype.buildImageDropEvent = function () {
                        var self = this;
                        self.$previewArea.on('drop dragdrop', function (evt, ui) {
                            event.preventDefault();
                            var files = evt.originalEvent["dataTransfer"].files;
                            if (!nts.uk.util.isNullOrEmpty(files)) {
                                self.validateFile(files);
                            }
                        });
                        this.$previewArea.on('dragenter', function (event) {
                            event.preventDefault();
                        });
                        this.$previewArea.on('dragleave', function (evt, ui) {
                        });
                        this.$previewArea.on('dragover', function (event) {
                            event.preventDefault();
                        });
                    };
                    ImageEditorConstructSite.prototype.buildImageLoadedHandler = function (zoomble, customOption) {
                        var self = this;
                        self.$root.data("img-status", self.buildImgStatus("not init", 0));
                        self.$imagePreview.on('load', function () {
                            var image = new Image();
                            image.src = self.$imagePreview.attr("src");
                            image.onload = function () {
                                self.$imageSizeLbl.text("　(大きさ " + this.height + "x" + this.width + "　　サイズ " + self.helper.getFileSize(self.$root.data("size")) + ")");
                                if (!nts.uk.util.isNullOrUndefined(self.cropper)) {
                                    self.cropper.destroy();
                                }
                                self.$root.data("original-img", image.src);
                                var option = {
                                    viewMode: 1,
                                    guides: false,
                                    autoCrop: false,
                                    highlight: false,
                                    zoomable: zoomble,
                                    crop: function (e) {
                                        //                            console.log(e);
                                    }, cropstart: function (e) {
                                        //                            e.preventDefault();
                                        //                            console.log(e);
                                        //                            return croppable;
                                    }
                                };
                                jQuery.extend(option, customOption);
                                self.cropper = new Cropper(self.$imagePreview[0], option);
                                self.$root.data("cropper", self.cropper);
                                self.$root.data("img-status", self.buildImgStatus("loaded", 4));
                                var evtData = {
                                    size: self.$root.data("size"),
                                    height: this.height,
                                    width: this.width,
                                    name: self.$root.data("file-name"),
                                    fileType: self.$root.data("file-type")
                                };
                                self.$root.trigger("imgloaded", evtData);
                            };
                        }).on("error", function () {
                            self.$root.data("img-status", self.buildImgStatus("load fail", 3));
                        });
                    };
                    ImageEditorConstructSite.prototype.buildImgStatus = function (status, statusCode) {
                        return {
                            imgOnView: statusCode === 4 ? true : false,
                            imgStatus: status,
                            imgStatusCode: statusCode
                        };
                    };
                    ImageEditorConstructSite.prototype.buildSrcChangeHandler = function () {
                        var self = this;
                        self.$root.bind("srcchanging", function (evt, query) {
                            self.$root.data("img-status", self.buildImgStatus("img loading", 2));
                            var target = self.helper.getUrl(query);
                            var xhr = self.getXRequest();
                            if (xhr === null) {
                                self.destroyImg();
                                return;
                            }
                            xhr.open('GET', target);
                            xhr.responseType = 'blob';
                            xhr.onload = function (e) {
                                if (this.status == 200) {
                                    if (xhr.response.type.indexOf("image") >= 0) {
                                        var reader = new FileReader();
                                        reader.readAsDataURL(xhr.response);
                                        reader.onload = function () {
                                            self.helper.getFileNameFromUrl().done(function (fileName) {
                                                var fileType = xhr.response.type.split("/")[1], fileName = self.helper.data.isOutSiteUrl ? (fileName + "." + fileType) : fileName;
                                                self.backupData(null, fileName, fileType, xhr.response.size);
                                                self.$imagePreview.attr("src", reader.result);
                                                self.$imagePreview.closest(".image-holder").removeClass(".image-upload-icon");
                                                self.$imagePreview.closest(".image-container").removeClass(".container-no-upload-background");
                                            });
                                        };
                                    }
                                    else {
                                        self.destroyImg();
                                    }
                                }
                                else {
                                    self.destroyImg();
                                }
                            };
                            xhr.send();
                        });
                    };
                    ImageEditorConstructSite.prototype.destroyImg = function () {
                        var self = this;
                        nts.uk.ui.dialog.alert("画像データが正しくないです。。");
                        self.$root.data("img-status", self.buildImgStatus("load fail", 3));
                        self.backupData(null, "", "", 0);
                        self.$imagePreview.attr("src", "");
                        self.$imagePreview.closest(".image-holder").addClass(".image-upload-icon");
                        self.$imagePreview.closest(".image-container").addClass(".container-no-upload-background");
                        self.$imageSizeLbl.text("");
                        if (!nts.uk.util.isNullOrUndefined(self.cropper)) {
                            self.cropper.destroy();
                        }
                        self.$root.data("cropper", self.cropper);
                    };
                    ImageEditorConstructSite.prototype.getXRequest = function () {
                        if (typeof XDomainRequest != "undefined") {
                            // IE8
                            return new XDomainRequest();
                        }
                        else if (typeof XMLHttpRequest != "undefined") {
                            // firefox 他
                            return new XMLHttpRequest();
                        }
                        else if (window.ActiveXObject) {
                            // IE 7 以前
                            return new ActiveXObject("Microsoft.XMLHTTP");
                        }
                        else {
                            // 未対応ブラウザ
                            return null;
                        }
                    };
                    ImageEditorConstructSite.prototype.buildFileChangeHandler = function () {
                        var self = this;
                        self.$inputFile.change(function () {
                            self.$root.data("img-status", self.buildImgStatus("img loading", 2));
                            if (nts.uk.util.isNullOrEmpty(this.files)) {
                                self.$root.data("img-status", self.buildImgStatus("load fail", 3));
                                return;
                            }
                            self.validateFile(this.files);
                        });
                    };
                    ImageEditorConstructSite.prototype.validateFile = function (files) {
                        var self = this;
                        var firstImageFile = self.helper.getFirstFile(files);
                        if (!nts.uk.util.isNullOrUndefined(firstImageFile)) {
                            self.assignImageToView(firstImageFile);
                        }
                        else {
                            nts.uk.ui.dialog.alertError({ messageId: self.helper.getMsgIdForUnknownFile(), messageParams: [self.helper.toStringExtension()] });
                        }
                    };
                    ImageEditorConstructSite.prototype.assignImageToView = function (file) {
                        var self = this;
                        if (FileReader && file) {
                            var fr = new FileReader();
                            fr.onload = function () {
                                self.$imagePreview.attr("src", fr.result);
                                self.backupData(file, file.name, file.type.split("/")[1], file.size);
                            };
                            fr.onerror = function () {
                                self.destroyImg();
                            };
                            fr.readAsDataURL(file);
                        }
                    };
                    ImageEditorConstructSite.prototype.backupData = function (file, name, format, size) {
                        var self = this;
                        self.$root.data("file", file);
                        self.$root.data("file-name", name);
                        self.$root.data("file-type", format);
                        self.$root.data("size", size);
                        self.$imageNameLbl.text(name);
                    };
                    return ImageEditorConstructSite;
                }());
                var ImageEditorHelper = (function () {
                    function ImageEditorHelper(extensions, msgIdForUnknownFile, query) {
                        this.IMAGE_EXTENSION = [".png", ".PNG", ".jpg", ".JPG", ".JPEG", ".jpeg"];
                        this.BYTE_SIZE = 1024;
                        this.SIZE_UNITS = ["BYTE", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
                        var self = this;
                        self.data = query;
                        self.msgIdForUnknownFile = msgIdForUnknownFile;
                        if (!nts.uk.util.isNullOrEmpty(extensions)) {
                            self.IMAGE_EXTENSION = [];
                            _.forEach(extensions, function (ex) {
                                self.IMAGE_EXTENSION.push(ex.toLowerCase());
                                self.IMAGE_EXTENSION.push(ex.toUpperCase());
                            });
                        }
                    }
                    ImageEditorHelper.prototype.toStringExtension = function () {
                        return this.IMAGE_EXTENSION.join(", ");
                    };
                    ImageEditorHelper.prototype.getMsgIdForUnknownFile = function () {
                        return this.msgIdForUnknownFile;
                    };
                    ImageEditorHelper.prototype.getFirstFile = function (files) {
                        var IMAGE_EXTENSION = this.IMAGE_EXTENSION;
                        return _.find(files, function (file) {
                            return _.find(IMAGE_EXTENSION, function (ie) {
                                var isType = file.type === ie.replace(".", "");
                                var isType2 = file.name.substr(file.name.lastIndexOf(".")) === ie;
                                return isType || isType2;
                            }) !== undefined;
                        });
                    };
                    ImageEditorHelper.prototype.getFileSize = function (originalSize) {
                        var i = 0, result = originalSize;
                        while (result > 5 * this.BYTE_SIZE) {
                            result = result / this.BYTE_SIZE;
                            i++;
                        }
                        var idx = i < this.SIZE_UNITS.length ? i : this.SIZE_UNITS.length - 1;
                        return uk.ntsNumber.trunc(result) + this.SIZE_UNITS[idx];
                    };
                    ImageEditorHelper.prototype.getUrl = function (query) {
                        if (!nts.uk.util.isNullOrUndefined(query)) {
                            this.data = query;
                        }
                        if (!this.isOutSiteUrl(this.data.url)) {
                            return this.data.url;
                        }
                        else {
                            return "http://cors-anywhere.herokuapp.com/" + this.data.url;
                        }
                    };
                    ImageEditorHelper.prototype.getFileNameFromUrl = function () {
                        var dfd = $.Deferred();
                        var urlElements = this.data.url.split("/"), fileName = urlElements[urlElements.length - 1];
                        if (this.data.isOutSiteUrl) {
                            dfd.resolve(fileName);
                        }
                        else {
                            nts.uk.request.ajax("/shr/infra/file/storage/infor/" + fileName).done(function (res) {
                                dfd.resolve(res.originalName);
                            }).fail(function (error) {
                                dfd.reject(error);
                            });
                        }
                        return dfd.promise();
                    };
                    ImageEditorHelper.prototype.isOutSiteUrl = function (url) {
                        return url.indexOf(nts.uk.request.location.siteRoot.rawUrl) < 0;
                    };
                    return ImageEditorHelper;
                }());
                ko.bindingHandlers['ntsImageEditor'] = new NtsImageEditorBindingHandler();
            })(koExtentions = ui_27.koExtentions || (ui_27.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_28) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * CheckBox binding handler
                 */
                var NtsFunctionPanelBindingHandler = (function () {
                    /**
                     * Constructor.
                     */
                    function NtsFunctionPanelBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsFunctionPanelBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var width = (data.width !== undefined) ? ko.unwrap(data.width) : 100;
                        var headerText = (data.headerText !== undefined) ? ko.unwrap(data.headerText) : "";
                        var items = (data.dataSource !== undefined) ? ko.unwrap(data.dataSource) : [];
                        // Container
                        var container = $(element);
                        if (nts.uk.util.isNullOrEmpty(container.attr("id"))) {
                            container.attr("id", nts.uk.util.randomId());
                        }
                        container.width(width);
                        container.addClass("ntsControl ntsFunctionPanel").on("click", function (e) {
                            if (container.data("readonly") === true)
                                e.preventDefault();
                        });
                        container.append("<div class='function-header' /><div class='function-items'/>");
                        var header = container.find('.function-header');
                        header.append("<div class='function-icon'/><div class='function-link'><a class='header-link function-item'>" + headerText + "</a></div>");
                        var itemAreas = container.find('.function-items');
                        header.find(".function-item").click(function (evt, ui) {
                            var current = $(this);
                            if ($(this).data("dbClick") === false) {
                                itemAreas.find(".function-item-container").hide("fast", function () {
                                    current.data("dbClick", true);
                                });
                            }
                            else {
                                itemAreas.find(".function-item-container").show("fast", "linear", function () {
                                    current.data("dbClick", false);
                                });
                            }
                        });
                        container.mouseleave(function (evt) {
                            var current = header.find(".function-item");
                            itemAreas.find(".function-item-container").hide("fast", function () {
                                current.data("dbClick", true);
                            });
                        });
                    };
                    /**
                     * Update
                     */
                    NtsFunctionPanelBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        // Get data
                        var data = valueAccessor();
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var readonly = (data.readonly !== undefined) ? ko.unwrap(data.readonly) : true;
                        var width = (data.width !== undefined) ? ko.unwrap(data.width) : 100;
                        var headerText = (data.headerText !== undefined) ? ko.unwrap(data.headerText) : "";
                        var items = (data.dataSource !== undefined) ? ko.unwrap(data.dataSource) : [];
                        // Container
                        var container = $(element);
                        var itemAreas = container.find('.function-items');
                        var headerLink = container.find('.header-link');
                        var containerId = container.attr("id");
                        headerLink.text(headerText);
                        itemAreas.empty();
                        _.forEach(items, function (item, idx) {
                            var div = $("<div class='function-item-container' />");
                            div.attr("data-idx", idx);
                            div.width(width);
                            div.append("<div class='function-icon'/><div class='function-link'/>");
                            var itemLink = $("<a id='" + (containerId + '-' + idx) + "' class='function-item'>" + item["text"] + "</a>");
                            itemLink.click(item["action"]);
                            itemLink.appendTo(div.find(".function-link"));
                            var icon = $("<img class='ft-icon' src='" + item["icon"] + "'/>");
                            icon.appendTo(div.find(".function-icon"));
                            div.appendTo(itemAreas);
                        });
                        container.find(".function-item-container").hide();
                    };
                    return NtsFunctionPanelBindingHandler;
                }());
                ko.bindingHandlers['ntsFunctionPanel'] = new NtsFunctionPanelBindingHandler();
            })(koExtentions = ui_28.koExtentions || (ui_28.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsEditor;
                (function (ntsEditor) {
                    $.fn.ntsEditor = function (action) {
                        var $editor = $(this);
                        switch (action) {
                            case 'validate':
                                validate($editor);
                            default:
                                break;
                        }
                    };
                    function validate($editor) {
                        var validateEvent = new CustomEvent("validate", {});
                        $editor.each(function (index) {
                            var $input = $(this);
                            document.getElementById($input.attr('id')).dispatchEvent(validateEvent);
                        });
                        //            document.getElementById($editor.attr('id')).dispatchEvent(validateEvent);
                        //            $editor.trigger("validate");
                    }
                })(ntsEditor || (ntsEditor = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var isNotNull = nts.uk.util.isNullOrUndefined;
                var ntsImageEditor;
                (function (ntsImageEditor) {
                    $.fn.ntsImageEditor = function (method, option) {
                        var $element = $(this);
                        switch (method) {
                            case "upload": {
                                return uploadImage($element, option);
                            }
                            case "uploadOriginal": {
                                return uploadImageOriginal($element, option);
                            }
                            case "selectByFileId": {
                                return downloadImage($element, option);
                            }
                            case "showByUrl": {
                                return viewByUrl($element, option);
                            }
                            case "clear": {
                                return clear($element);
                            }
                            case "getImgStatus": {
                                return getImgStatus($element);
                            }
                            default:
                                return;
                        }
                    };
                    function getImgStatus($element) {
                        return $element.data("img-status");
                    }
                    function uploadImage($element, option) {
                        var dataFile = $element.find(".image-preview").attr("src");
                        return upload($element, option, dataFile, isNotNull($element.data('checkbox')) ? false : $element.data('checkbox').checked());
                    }
                    function uploadImageOriginal($element, option) {
                        return upload($element, option, $element.data("original-img"), false);
                    }
                    function upload($element, option, fileData, isCrop) {
                        var dfd = $.Deferred();
                        if (!isNotNull(fileData)) {
                            var cropper = $element.data("cropper");
                            var cropperData = cropper.getData(true);
                            var formData = {
                                "fileName": $element.data("file-name"),
                                "stereoType": isNotNull(option) ? "image" : option.stereoType,
                                "file": fileData,
                                "format": $element.data("file-type"),
                                "x": cropperData.x,
                                "y": cropperData.y,
                                "width": cropperData.width,
                                "height": cropperData.height,
                                "crop": isCrop
                            };
                            nts.uk.request.ajax("com", "image/editor/cropimage", formData).done(function (data) {
                                if (nts.uk.util.exception.isBusinessError(data)) {
                                    dfd.reject(data);
                                }
                                else {
                                    dfd.resolve(data);
                                }
                            }).fail(function () {
                                dfd.reject({ message: "Please check your network", messageId: "1" });
                            });
                        }
                        else {
                            dfd.reject({ message: "Please select file", messageId: "0" });
                        }
                        return dfd.promise();
                    }
                    function downloadImage($element, fileId) {
                        $element.trigger("srcchanging", { url: nts.uk.request.liveView(fileId), isOutSiteUrl: false });
                    }
                    function viewByUrl($element, sourceUrl) {
                        $element.trigger("srcchanging", { url: sourceUrl, isOutSiteUrl: true });
                    }
                    function clear($element) {
                        var cropper = $element.data("cropper");
                        if (!isNotNull(cropper)) {
                            cropper.clear();
                        }
                    }
                })(ntsImageEditor || (ntsImageEditor = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var sharedvm;
            (function (sharedvm) {
                var KibanTimer = (function () {
                    function KibanTimer(target) {
                        var self = this;
                        self.elapsedSeconds = 0;
                        self.formatted = ko.observable(uk.time.formatSeconds(this.elapsedSeconds, 'hh:mm:ss'));
                        self.targetComponent = target;
                        self.isTimerStart = ko.observable(false);
                        self.oldDated = ko.observable(undefined);
                        document.getElementById(self.targetComponent).innerHTML = self.formatted();
                    }
                    KibanTimer.prototype.run = function (timer) {
                        var x = new Date().getTime() - timer.oldDated().getTime();
                        x = Math.floor(x / 1000);
                        timer.elapsedSeconds = x;
                        document.getElementById(timer.targetComponent).innerHTML
                            = uk.time.formatSeconds(x, 'hh:mm:ss');
                    };
                    KibanTimer.prototype.start = function () {
                        var self = this;
                        if (!self.isTimerStart()) {
                            self.oldDated(new Date());
                            self.isTimerStart(true);
                            self.interval = setInterval(self.run, 1000, self);
                        }
                    };
                    KibanTimer.prototype.end = function () {
                        var self = this;
                        if (self.isTimerStart()) {
                            self.oldDated(undefined);
                            self.isTimerStart(false);
                            clearInterval(self.interval);
                        }
                    };
                    return KibanTimer;
                }());
                sharedvm.KibanTimer = KibanTimer;
            })(sharedvm = ui.sharedvm || (ui.sharedvm = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui) {
            var jqueryExtentions;
            (function (jqueryExtentions) {
                var ntsFileUpload;
                (function (ntsFileUpload) {
                    $.fn.ntsFileUpload = function (option) {
                        var dfd = $.Deferred();
                        var fileInput;
                        if ($(this).find("input[type='file']").length == 0) {
                            fileInput = $(this).get(0);
                        }
                        else {
                            fileInput = $(this).find("input[type='file']").get(0);
                        }
                        if (fileInput !== undefined) {
                            var files = fileInput.files;
                            if (files.length > 0) {
                                // Check file is deleted on Chrome
                                if (files[0].size == 0) {
                                    dfd.reject({ message: nts.uk.resource.getMessage("Msg_158"), messageId: "Msg_158" });
                                    return dfd.promise();
                                }
                                var formData = new FormData();
                                formData.append("stereotype", option.stereoType);
                                formData.append("userfile", files[0]);
                                formData.append("filename", files[0].name);
                                nts.uk.request.uploadFile(formData, option).done(function (data, textStatus, jqXHR) {
                                    // Business Exception
                                    if (nts.uk.util.exception.isBusinessError(data)) {
                                        if (option.onFail)
                                            option.onFail();
                                        dfd.reject(data);
                                    }
                                    else {
                                        if (option.onSuccess)
                                            option.onSuccess();
                                        dfd.resolve(data);
                                    }
                                }).fail(function (jqXHR, textStatus, errorThrown) {
                                    if (jqXHR.status === 413) {
                                        dfd.reject({ message: "ファイルサイズが大きすぎます。", messageId: "0" });
                                    }
                                    else {
                                        // Client Exception
                                        dfd.reject({ message: "アップロード処理に失敗しました。", messageId: "0" });
                                    }
                                });
                            }
                            else {
                                dfd.reject({ message: "ファイルを選択してください。", messageId: "0" });
                            }
                        }
                        else {
                            dfd.reject({ messageId: "0", message: "ファイルを読み込めません。" });
                        }
                        return dfd.promise();
                    };
                })(ntsFileUpload = jqueryExtentions.ntsFileUpload || (jqueryExtentions.ntsFileUpload = {}));
            })(jqueryExtentions = ui.jqueryExtentions || (ui.jqueryExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
/// <reference path="../../reference.ts"/>
var nts;
(function (nts) {
    var uk;
    (function (uk) {
        var ui;
        (function (ui_29) {
            var koExtentions;
            (function (koExtentions) {
                /**
                 * Accordion binding handler
                 */
                var NtsAccordionBindingHandler = (function () {
                    function NtsAccordionBindingHandler() {
                    }
                    /**
                     * Init.
                     */
                    NtsAccordionBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var active = (data.active !== undefined) ? (data.active) : ko.observable(false);
                        var realActive = (nts.uk.ntsNumber.isNumber(ko.unwrap(active))) ? Number(ko.unwrap(active)) : ko.unwrap(active);
                        var animate = (data.animate !== undefined) ? ko.unwrap(data.animate) : {};
                        var collapsible = (data.collapsible !== undefined) ? ko.unwrap(data.collapsible) : true;
                        var event = (data.event !== undefined) ? ko.unwrap(data.event) : "click";
                        var header = (data.header !== undefined) ? ko.unwrap(data.header) : "> li > :first-child,> :not(li):even";
                        var heightStyle = (data.heightStyle !== undefined) ? ko.unwrap(data.heightStyle) : "content";
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var activate = (data.activate !== undefined) ? (data.activate) : function (event, ui) { };
                        var create = (data.create !== undefined) ? (data.create) : function (event, ui) { };
                        var container = $(element);
                        container.accordion({
                            active: realActive,
                            animate: animate,
                            collapsible: collapsible,
                            event: event,
                            header: header,
                            heightStyle: heightStyle,
                            disabled: !enable,
                            beforeActivate: function (event, ui) {
                                ui.newPanel.removeClass("disappear");
                                ui.newPanel.stop(false, false);
                            },
                            activate: function (event, ui) {
                                if (ko.isObservable(active))
                                    active(container.accordion("option", "active"));
                                ui.oldPanel.addClass("disappear");
                                ui.newPanel.removeClass("disappear");
                                activate.call(this, event, ui);
                            },
                            create: function (event, ui) {
                                container.find(".nts-accordion-content").addClass("disappear");
                                ui.panel.removeClass("disappear");
                                create.call(this, event, ui);
                            },
                            icons: { "header": "ui-icon-caret-1-s", "activeHeader": "ui-icon-caret-1-n" },
                            classes: {
                                "ui-accordion": "ntsAccordion",
                                "ui-accordion-content": "ui-corner-bottom nts-accordion-content"
                            }
                        });
                    };
                    /**
                     * Update
                     */
                    NtsAccordionBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var data = valueAccessor();
                        var active = (data.active !== undefined) ? (data.active) : ko.observable(false);
                        var animate = (data.animate !== undefined) ? ko.unwrap(data.animate) : {};
                        var collapsible = (data.collapsible !== undefined) ? ko.unwrap(data.collapsible) : true;
                        var event = (data.event !== undefined) ? ko.unwrap(data.event) : "click";
                        var heightStyle = (data.heightStyle !== undefined) ? ko.unwrap(data.heightStyle) : "content";
                        var enable = (data.enable !== undefined) ? ko.unwrap(data.enable) : true;
                        var container = $(element);
                        var currentOption = container.accordion("option");
                        if (ko.isObservable(active) && currentOption.active !== ko.unwrap(active))
                            container.accordion("option", "active", Number(ko.unwrap(active)));
                        if (currentOption.animate != animate)
                            container.accordion("option", "animate", animate);
                        if (currentOption.collapsible != collapsible)
                            container.accordion("option", "collapsible", collapsible);
                        if (currentOption.event != event)
                            container.accordion("option", "event", event);
                        if (currentOption.heightStyle != heightStyle)
                            container.accordion("option", "heightStyle", heightStyle);
                        if (currentOption.disabled != !enable)
                            container.accordion("option", "disabled", !enable);
                    };
                    return NtsAccordionBindingHandler;
                }());
                ko.bindingHandlers['ntsAccordion'] = new NtsAccordionBindingHandler();
            })(koExtentions = ui_29.koExtentions || (ui_29.koExtentions = {}));
        })(ui = uk.ui || (uk.ui = {}));
    })(uk = nts.uk || (nts.uk = {}));
})(nts || (nts = {}));
//# sourceMappingURL=nts.uk.com.web.nittsu.bundles.js.map