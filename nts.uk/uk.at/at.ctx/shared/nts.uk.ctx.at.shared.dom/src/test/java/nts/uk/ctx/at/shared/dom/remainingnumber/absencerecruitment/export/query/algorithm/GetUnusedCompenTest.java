package nts.uk.ctx.at.shared.dom.remainingnumber.absencerecruitment.export.query.algorithm;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Optional;

import org.assertj.core.groups.Tuple;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import lombok.val;
import mockit.Expectations;
import mockit.Injectable;
import mockit.integration.junit4.JMockit;
import nts.arc.time.GeneralDate;
import nts.uk.ctx.at.shared.dom.remainingnumber.absencerecruitment.export.query.MngDataStatus;
import nts.uk.ctx.at.shared.dom.remainingnumber.absencerecruitment.export.query.OccurrenceDigClass;
import nts.uk.ctx.at.shared.dom.remainingnumber.absencerecruitment.interim.InterimRecAbsMng;
import nts.uk.ctx.at.shared.dom.remainingnumber.base.DigestionAtr;
import nts.uk.ctx.at.shared.dom.remainingnumber.interimremain.primitive.DataManagementAtr;
import nts.uk.ctx.at.shared.dom.remainingnumber.interimremain.primitive.SelectedAtr;
import nts.uk.ctx.at.shared.dom.remainingnumber.interimremain.primitive.UseDay;
import nts.uk.ctx.at.shared.dom.remainingnumber.paymana.PayoutManagementData;
import nts.uk.ctx.at.shared.dom.worktype.HolidayAtr;

@RunWith(JMockit.class)
public class GetUnusedCompenTest {

	private static String CID = "000000000000-0117";

	private static String SID = "292ae91c-508c-4c6e-8fe8-3e72277dec16";

	@Injectable
	private GetUnusedCompen.Require require;

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	/*
	 * 　テストしたい内容
	 * 　　逐次発生の休暇明細データを作成しない
	 * 
	 * 　準備するデータ
	 * 　　確定データがない
	 * 　　　
	 * */
	@Test
	public void testEmpty() {
		val actualResult = GetUnusedCompen.process(require, CID, SID, GeneralDate.ymd(2019, 11, 1));
		assertThat(actualResult).isEqualTo(new ArrayList<>());
	}

	/*
	 * 　テストしたい内容
	 * 　　未使用数のデータだけが取得できるか。
	 * 
	 * 　準備するデータ
	 * 　　未使用数のデータ
	 * 　　　→紐づけがなくて残ってるやつ
	 * 　　　→紐づけしても残ってるやつ
	 * 　　相殺済みのデータ
	 * 　　　→最初から残ってない
	 * 　　　→紐づけしたら残ってない

	 * */
	@Test
	public void testCreate() {

		new Expectations() {
			{

				require.getByUnUseState(CID, SID, (GeneralDate) any, 0, DigestionAtr.UNUSED);
				result = Arrays.asList(createPayoutMngData("a1", 
						GeneralDate.ymd(2019, 11, 28), // 振出日
						GeneralDate.max(), //使用期限日
						1.0),// 未使用日数	
						createPayoutMngData("a2", 
								GeneralDate.ymd(2019, 11, 27), // 振出日
								GeneralDate.ymd(2020, 10, 05), //使用期限日
								0.0),// 未使用日数	
						createPayoutMngData("a3",
								GeneralDate.ymd(2019, 11, 25),// 振出日
								GeneralDate.ymd(2020, 10, 05), //使用期限日
								1.0));// 未使用日数	

				require.getRecBySidMngAtr(DataManagementAtr.CONFIRM, DataManagementAtr.INTERIM,
						"a1");
				result = Arrays.asList(
						createRecAbs("a1",1.0));//使用日数
				
				require.getRecBySidMngAtr(DataManagementAtr.CONFIRM, DataManagementAtr.INTERIM,
						"a3");
				result = Arrays.asList(
						createRecAbs("a3",0.5));//使用日数

			}
		};

		val actualResult = GetUnusedCompen.process(require, CID, SID, GeneralDate.ymd(2019, 11, 1));
		assertThat(actualResult)
		.extracting(x -> x.getManageId(),
				x -> x.getDataAtr(),//状態
				x -> x.getDateOccur().isUnknownDate(), x -> x.getDateOccur().getDayoffDate(),//年月日
				x -> x.getOccurrentClass(),//発生消化区分
				x -> x.getUnbalanceNumber().getDay().v())//未相殺数
				.containsExactly(Tuple.tuple("a3",
						MngDataStatus.CONFIRMED,
						false, Optional.of(GeneralDate.ymd(2019, 11, 25)), 
						OccurrenceDigClass.OCCURRENCE, 
						0.5));
	}

	private PayoutManagementData createPayoutMngData(String id, GeneralDate dateExec, GeneralDate deadLine,
			Double unUse) {
		return new PayoutManagementData(id, CID, SID, dateExec == null, dateExec, deadLine,
				HolidayAtr.PUBLIC_HOLIDAY.value, 1.0, unUse, 0);
	}
	
	private InterimRecAbsMng createRecAbs(String id, Double useDay) {
		return new InterimRecAbsMng(id,
				DataManagementAtr.INTERIM, id, DataManagementAtr.INTERIM, new UseDay(useDay), SelectedAtr.MANUAL);
	}
}
