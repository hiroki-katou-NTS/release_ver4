package nts.uk.ctx.at.shared.dom.remainingnumber.absencerecruitment.export.query.algorithm;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Optional;

import org.assertj.core.groups.Tuple;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import lombok.val;
import mockit.Expectations;
import mockit.Injectable;
import mockit.integration.junit4.JMockit;
import nts.arc.time.GeneralDate;
import nts.uk.ctx.at.shared.dom.remainingnumber.absencerecruitment.export.query.MngDataStatus;
import nts.uk.ctx.at.shared.dom.remainingnumber.absencerecruitment.export.query.OccurrenceDigClass;
import nts.uk.ctx.at.shared.dom.remainingnumber.absencerecruitment.interim.InterimRecAbsMng;
import nts.uk.ctx.at.shared.dom.remainingnumber.base.DigestionAtr;
import nts.uk.ctx.at.shared.dom.remainingnumber.interimremain.primitive.DataManagementAtr;
import nts.uk.ctx.at.shared.dom.remainingnumber.interimremain.primitive.SelectedAtr;
import nts.uk.ctx.at.shared.dom.remainingnumber.interimremain.primitive.UseDay;
import nts.uk.ctx.at.shared.dom.remainingnumber.paymana.PayoutManagementData;
import nts.uk.ctx.at.shared.dom.worktype.HolidayAtr;

@RunWith(JMockit.class)
public class GetUnusedCompenTest {

	private static String CID = "000000000000-0117";

	private static String SID = "292ae91c-508c-4c6e-8fe8-3e72277dec16";

	@Injectable
	private GetUnusedCompen.Require require;

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@Test
	public void testEmpty() {
		val actualResult = GetUnusedCompen.process(require, CID, SID, GeneralDate.ymd(2019, 11, 1));
		assertThat(actualResult).isEqualTo(new ArrayList<>());
	}

	@Test
	public void testCreate() {

//		// PayoutManagementDataRepository
//				List<PayoutManagementData> getByUnUseState(String cid, String sid, GeneralDate ymd, double unUse,
//						DigestionAtr state);
//
//				List<InterimRecAbsMng> getRecBySidMngAtr(DataManagementAtr recAtr, DataManagementAtr absAtr, String recId);

		new Expectations() {
			{

				require.getByUnUseState(CID, SID, (GeneralDate) any, 0, DigestionAtr.UNUSED);
				result = Arrays.asList(new PayoutManagementData("adda6a46-2cbe-48c8-85f8-c04ca554e132", CID, SID, false,
						GeneralDate.ymd(2019, 11, 28), GeneralDate.max(), HolidayAtr.PUBLIC_HOLIDAY.value, 1.0, 1.0, 0),

						new PayoutManagementData("adda6a46-2cbe-48c8-85f8-c04ca554e134", CID, SID, false,
								GeneralDate.ymd(2019, 11, 25), GeneralDate.ymd(2019, 10, 05),
								HolidayAtr.PUBLIC_HOLIDAY.value, 1.0, 1.0, 0));

				require.getRecBySidMngAtr(DataManagementAtr.CONFIRM, DataManagementAtr.INTERIM,
						"adda6a46-2cbe-48c8-85f8-c04ca554e132");
				result = Arrays.asList(new InterimRecAbsMng("adda6a46-2cbe-48c8-85f8-c04ca554e132",
						DataManagementAtr.CONFIRM, "", DataManagementAtr.INTERIM, new UseDay(1.0), SelectedAtr.MANUAL));

				require.getRecBySidMngAtr(DataManagementAtr.CONFIRM, DataManagementAtr.INTERIM,
						"adda6a46-2cbe-48c8-85f8-c04ca554e134");
				result = Arrays.asList(
						new InterimRecAbsMng("", DataManagementAtr.CONFIRM, "adda6a46-2cbe-48c8-85f8-c04ca554e134",
								DataManagementAtr.INTERIM, new UseDay(0.5), SelectedAtr.MANUAL));

			}
		};

		val actualResult = GetUnusedCompen.process(require, CID, SID, GeneralDate.ymd(2019, 11, 1));
		assertThat(actualResult)
				.extracting(x -> x.getManageId(), x -> x.getEmployeeId(), x -> x.getDataAtr(),
						x -> x.getDateOccur().isUnknownDate(), x -> x.getDateOccur().getDayoffDate(),
						x -> x.getNumberOccurren().getDay().v(), x -> x.getOccurrentClass(),
						x -> x.getUnbalanceNumber().getDay().v())
				.containsExactly(Tuple.tuple("adda6a46-2cbe-48c8-85f8-c04ca554e134", SID, MngDataStatus.CONFIRMED,
						false, Optional.of(GeneralDate.ymd(2019, 11, 25)), 1.0, OccurrenceDigClass.OCCURRENCE, 0.5));
	}

}
