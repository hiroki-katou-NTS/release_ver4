var nts = nts || {};

// wrap Web Storage API
(function () {
    function buildStorage (storage) {
        var wrapper = {
            setItem: function (key, value) {
                if (value === undefined) {
                    return;
                }
                storage.setItem(key, value);
            },
            setItemStringifyJson: function (key, value) {
                wrapper.setItem(key, JSON.stringify(value));
            },
            containsKey: function (key) {
                return this.getItem(key) !== null;
            },
            getItem: function (key) {
                var value = storage.getItem(key);
                if (value === null || value === undefined || value === 'undefined') {
                    return null;
                }
                return value;
            },
            getItemParsedJson: function (key) {
                var json = wrapper.getItem(key);
                if (json !== null) {
                    return JSON.parse(json);
                } else {
                    return null;
                }
            },
            getItemAndRemove: function (key) {
                var item = this.getItem(key);
                this.removeItem(key);
                return item;
            },
            ifPresent: function (key, consumer) {
                var value = wrapper.getItem(key);
                if (value !== null) {
                    consumer(value);
                }
            },
            ifPresentParsedJson: function (key, consumer) {
                wrapper.ifPresent(key, function (json) {
                    consumer(JSON.parse(json));
                });
            },
            removeItem: function (key) {
                storage.removeItem(key);
            },
            clear: function () {
                storage.clear();
            }
        };

        // 開発時のローカル実行用にフェイクを作っておく
        if (storage === undefined) {
            var fake = {};
            for ( var key in wrapper) {
                if (wrapper.hasOwnProperty(key) && typeof wrapper[key] === 'function') {
                    fake[key] = function () {
                    };
                }
            }

            wrapper = fake;
        }

        return wrapper;
    }

    nts.sessionStorage = buildStorage(window.sessionStorage);
    nts.localStorage = buildStorage(window.localStorage);
})();

nts.consts = {
    date: {
        max: new Date(9999, 11, 31),
        min: new Date(1900, 0, 1)
    }
};

nts.util = (function () {
    var exports = {};
    
    exports.isNullOrUndefined = function (target) {
        return target === null || target === undefined;
    };
        
    exports.matchArgs = function (args, pattern) {
        var argSpecs = pattern.split(' ');

        if (argSpecs.length !== args.length) {
            return false;
        }

        for (var i = 0; i < args.length; i++) {
            var realArgType = typeof args[i];
            var argSpec = argSpecs[i];

            if (argSpec === 'any') {
                continue;
            }

            if (realArgType !== argSpec) {
                return false;
            }
        }

        return true;
    };
        
    exports.alwaysTrue = function () {
        return true;
    };
        
    exports.randomId = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            return ((c == 'x') ? r : (r & 0x3 | 0x8)).toString(16);
        });
    };
        
    exports.isInFrame = function () {
        return window.parent != window;
    };
        
    exports.orDefault = function (valueMaybeEmpty, defaultValue) {
        return nts.util.isNullOrUndefined(valueMaybeEmpty) ? defaultValue : valueMaybeEmpty;
    };
        
    exports.isIn = function (actual, expects) {
        for (var i = 0; i < expects.length; i++) {
            if (actual === expects[i]) return true;
        }
        return false;
    };

    exports.deferred = function (action) {
        var dfd = $.Deferred();
        
        action(dfd);
        
        return dfd.promise();
    };
    
    return exports;
})();

nts.date = (function () {
	
	var exports = {};
	
	exports.today = function () {
		return exports.withoutTime(new Date());
	};
	
	exports.withoutTime = function (dateWithTime) {
		return new Date(dateWithTime.getFullYear(), dateWithTime.getMonth(), dateWithTime.getDate());
	};
	
	return exports;
})();

nts.optional = (function () {
    
    function isEmpty(value) {
        return nts.util.isNullOrUndefined(value);
    };
    
    function optional(value) {
        
        var pub = {};
        
        pub.isPresent = function () {
            return !isEmpty(value);
        };
        
        pub.get = function () {
            return value;
        };
        
        pub.orElse = function (elseValue) {
            return this.isPresent() ? value : elseValue;
        };
        
        pub.orElseThrow = function (errorBuilder) {
            if (this.isPresent()) {
                return value;
            }
            
            throw errorBuilder();
        };
        
        pub.ifPresent = function (consumer) {
            this.isPresent() && consumer(value);
            return this;
        };
        
        pub.ifNotPresent = function (callback) {
            !this.isPresent() && callback();
            return this;
        };
        
        pub.map = function (mapper) {
            var mapped = mapper(value);
            return optional(mapped);
        };
        
        return pub;
    };
    
    var exports = {};
    
    exports.of = function (value) {
        return optional(value);
    };
    
    exports.empty = function () {
        return optional();
    };
    
    return exports;
})();

nts.log = (function () {
	var exports = {};
	
	function AuditDetails() {
		this.items = [];
	}
	
	AuditDetails.single = function (key, value, supplement) {
		return new AuditDetails().add(key, value, nts.util.orDefault(supplement, null));
	};
	
	AuditDetails.prototype.add = function (key, value, supplement) {
		return this.addItem({
			key: key,
			value: value,
			supplement: nts.util.orDefault(supplement, null)
		});
	};
	
	AuditDetails.prototype.addItem = function (item) {
		this.items.push(item);
		return this;
	};
	
	exports.audit = {
		started: function (remarks, details) {
			return nts.request.ajax('/log/audittrail/started', {
				requestId: __viewContext.system.requestId,
				remarks: nts.util.orDefault(remarks, {}).items,
				details: nts.util.orDefault(details, {}).items
			});
		},
		
		single: function () {
			return AuditDetails.single.apply(this, arguments);
		},
		
		list: function () {
			return new AuditDetails();
		}
	};
	
	return exports;
})();

nts.ko = (function () {

    var exports = {};

    exports.mergeJS = function (jsObject, koDestination) {
        ko.mapping.fromJS(jsObject, {}, koDestination);
    };

    // ko.mapping.toJSが空のobjectを返すことがある（バグ？）ので、代替手段
    exports.toJS = function (koSource) {
        var jsObject = ko.toJS(koSource);
        delete jsObject.__ko_mapping__;
        return jsObject;
    };
    
    exports.observableBooleanRadio = function (defaultValue) {
        var observable = ko.observable(defaultValue);
        
        observable.Radio = ko.computed({
            read: function() {
                var value = observable();
                return (value === undefined) ? undefined : value.toString();  
            },
            write: function(newValue) {
                observable(newValue === "true");
            },
            owner: this        
        });
        return observable;
    };

    return exports;
})();

// Array.prototype.forEach, for IE8
if (typeof Array.prototype.forEach !== 'function') {
    Array.prototype.forEach = function (callback) {
        for (var i = 0; i < this.length; i++) {
            callback.apply(this, [this[i], i, this]);
        }
    };
}