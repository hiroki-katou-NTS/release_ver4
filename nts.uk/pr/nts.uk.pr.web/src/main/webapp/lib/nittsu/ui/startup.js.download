/* global ko */

/// <reference path="../../../Generic/jQuery/jquery-2.0.3.js" />
/// <reference path="../../Text.js" />

var nts = nts || {};
nts.ui = window.nts.ui || {};

(function () {
    // unhandled error
    window.onerror = function (message) {
        //alert(message);
    };
    
    var buildCommonUi = function () {

        // ダイアログ
        var isDialog = window.isDialog === true;
        
        // ログイン画面など
        var isFreeLayout = $('body').hasClass('freelayout');
        
        // ヘッダは無いがファンクションエリアとかはある…ダイアログだけか？
        var isNoHeader = isDialog || isFreeLayout || $('body').hasClass('noheader');
        
        // タイトルエリアが無い（トップページとか）
        var isNoTitle = isNoHeader || (window.isNoTitle === true);
        
        // 参照ダイアログ
        var isReadOnlyDialog = window.isReadOnlyDialog;
        
        var $programHeader = $('<div/>').attr('id', 'program-header')
                .appendTo('body');

        // メニューやロゴなど
        if (!isNoHeader) {
            var $navigationArea = $('#navigation-area').addClass('cf');
            
            var $header = $('<header/>')
            		.append($('<div/>').attr('id', 'hidable-header')
	                    .append($('<div/>').attr('id', 'logo-area').addClass('cf')
	                    	.click(function () { nts.request.jumpToTop(); })
	                        .append($('<div/>').attr('id', 'logo').text('へるすけあ！'))
	                        .append($('<div/>').attr('id', 'user-info')
	                            .append(__viewContext.user.isCompanyUser
	                                    ? $('<div/>').addClass('company').text(__viewContext.user.companyName) : '')
	                            .append($('<div/>').addClass('user').text(__viewContext.user.userName))))
	                    .append($navigationArea)
	                    .append($('<div/>').addClass('margin-area').text(' ')));
            
            // メニュー無しオプション
            if (nts.ui.noHeader) {
                var $hidableHeader = $header.find('#hidable-header').remove();
                $hidableHeader.find('.margin-area').remove();                
            }
            
            // メニュー非表示オプション
            if (nts.ui.hidesHeader) {
            	var $hidableHeader = $header.find('#hidable-header').addClass('hidden');
                $hidableHeader.find('.margin-area').remove();
            	
            	var slidingSize;
            	var hidingThreshold;
            	
            	setTimeout(function () {
            		// height値は描画後でなければ取得できないので、setTimeoutが必須
            		slidingSize = $hidableHeader.outerHeight();
            		
                	$hidableHeader.animate({
                		top: -slidingSize
                	}, {
                		duration: 200,
                		easing: 'linear',
                		queue: false
                	});
            	}, 700);
            	
            	var headerShown = false;
            	var animatingOptions = {
					duration: 200,
					easing: 'linear',
					queue: false
            	};
            	
            	$('body').mousemove(function (e) {
            		if (headerShown && !nts.ui.menu.expanding && e.clientY >= slidingSize + 20) {
            			// hide
        				$hidableHeader.animate({ top: -slidingSize }, $.extend(animatingOptions, {
        					complete: function () { headerShown = false; }
        				}));
            		} else if (e.clientY <= 15) {
            			// show
        				$hidableHeader.animate({ top: 0 }, $.extend(animatingOptions, {
        					complete: function () { headerShown = true; }
        				}));
            		}
            	});
            }
            
            if (!isNoTitle) {
                $header
                    .append($('<div/>').attr('id', 'title-area')
                        .append($('<div/>').addClass('title-band'))
                        .append($('<div/>').addClass('title-text').text(__viewContext.system.programName))
                        .append($('<div/>').addClass('help-text').text('ヘルプ').click(function () {
                        	nts.request.newWindow('/manual/indexes/01.html?pgid=' + __viewContext.system.programId);
                        })))
                    .append($('<div/>').addClass('margin-area').text(' '));
                
            }

            $header.appendTo($programHeader);
        }
        
        if (!isFreeLayout) {
            var $functionsArea = $('#functions-area');
            buildFunctions($functionsArea);
            
            var isReadOnlyDialog = $functionsArea.hasClass('readonly-dialog');
            
            var $contentsArea = $('#contents-area');
            var $programBody = (isDialog ? $('<div/>').addClass('dialog') : $('<div/>'))
                    .attr('id', 'program-body');
            
            if (isReadOnlyDialog) {
                // 参照ダイアログ
                $contentsArea.css('padding', 0);
                
                var programHeaderHeight = $programHeader.outerHeight();
                var programBodyMarginTop = Math.max((programHeaderHeight || 2) - 2, 10);
                
                $programBody.css('top', programBodyMarginTop)
                        .append($contentsArea)
                        .append($functionsArea) // ファンクションエリアは最後
                        .appendTo('body');
                
            } else {
                // 通常の画面
                $programHeader.append($functionsArea);
                
                var programHeaderHeight = $programHeader.outerHeight();
                var programBodyMarginTop = Math.max((programHeaderHeight || 2) - 2, 10);
    
                // 通知エリアは参照系ダイアログには無い、こちらだけ
                var $noticeAreaWrapper = $('<div/>')
                        .attr('id', 'notice-area-wrapper')
                        .css('top', programBodyMarginTop)
                        .append($('<div/>').attr('id', 'notice-area'))
                        .appendTo('body');
                
                var $mainNav = $('#main-nav');

                $programBody
                		.css('top', programBodyMarginTop)
                		.css('min-width', $mainNav.outerWidth(true) + $('#logout-button').outerWidth(true))
                        .append($contentsArea)
                        .appendTo('body');
                
                $(window).scroll(function () {
                	$mainNav.css('left', -window.scrollX);
                	$('#session-control-area').css('left', -window.scrollX);
                });
            }
        }
        
        // ボタンアイコン
        (function () {
        	$('button[data-icon]').each(function () {
        		var $button = $(this);
                var iconName = $button.data('icon');
                if (iconName !== undefined) {
                    var iconPath = nts.request.location.appRoot + 'resources/lib/nittsu/ui/common/icon/' + $button.data('icon') + '.png';
                    var text = $button.text();
                    
                    $button.addClass('with-icon')
		                    .css('background-image', 'url(' + iconPath + ')');
                }
        	})
            
        })();
        
        // fix position of '.column.left'
        (function () {
        	var $contentsArea = $('#contents-area');
        	if (!$contentsArea.hasClass('two-column-layout')) {
        		return;
        	}
        	
        	var $left = $contentsArea.children('.column.left');
        	
        	if (!$left.hasClass('fixed')) {
        		return;
        	}
        	
        	var $right = $contentsArea.children('.column.right');
        	
        	$left.css({
    			position: 'fixed',
    			width: $left.width() + 'px'
    		});
        	var defaultMarginLeft = Number($left.css('left').replace('px', ''));
        	
        	$right.css({
        		position: 'relative',
        		left: $left.width() + 'px'
        	});
        	
        	$(window).scroll(function () {
        		$left.css('left', -window.scrollX + defaultMarginLeft);
        	});
        })();

        // table.form構築
        (function () {
            function createConstraintText($const) {
                var dataType = $const.data('value') || 'text';
                
                if (dataType === 'int' || dataType === 'real') {
                    return window.__validation.createNumberConstraintText($const.data('const'));
                }
                
                var dataConst = $const.data('const');
                var splitted = dataConst.split(',');
                var charTypeName = splitted[0];
                var length = splitted[1];

                var charType = window.__validation.charTypes[charTypeName];
                if (charType === undefined) {
                    return 'unknown char type: ' + dataConst;
                }
                
                return charType.getConstraintText(length);
            }
            
            $('table.form').each(function () {
                $(this).children('tbody').children('tr').children('th').each(function () {
                    var $th = $(this);
                    
                    var constLabel = $th.find('.const-label').text();
                    $th.find('.const-label').remove();
                    
                    var labelText = $th.text();

                    var $container = $('<div/>')
                            .addClass('form-label')
                            .append($('<span/>').text(labelText));

                    if ($th.hasClass('required')) {
                        $container.addClass('required');
                    }

                    if ($th.hasClass('disabled')) {
                        $container.addClass('disabled');
                    }
                    
                    var constraint = $th.data('const');
                    
                    if (constLabel){
                        $container.addClass('has-constraint')
                                .append($('<i/>').text(constLabel));
                    } else if (constraint) {
                        $container.addClass('has-constraint')
                                .append($('<i/>').text(createConstraintText($th)));
                    }
                    
                    $th.html($container);
                });
            });
        })();

        // エラー一覧構築
        $('<div/>').attr('id', 'error-board')
                .append($('<table/>').append($('<tbody/>')))
                .hide()
                .appendTo('body');
        
        // ブラウザの戻る進むでキャッシュされるフォームの値をクリアする
        // これをしないとvalidationが変なタイミングで働いてしまうので・・・
        $('input[type=text],input[type=password],textarea').val('');

        nts.ui.formError();
        
        nts.ui.notice();

    };


    // リボンUI構築
    var buildFunctions = function ($functionsArea) {
        
        var isReadOnlyDialog = $functionsArea.hasClass('readonly-dialog');

        var $pages = $('#functions-area .page');
        if ($pages.length === 0) {
            var $singlePage = $('<div/>').addClass('page')
                    .append($functionsArea.children())
                    .appendTo($functionsArea);
            $pages = $([]).add($singlePage);
        }
        var $tabs = $('<div/>').addClass('tabs');

        $pages.hide();

        $pages.map(function (i, e) { return $(e).data('name'); })
                .each(function (i, n) {
                    $('<div/>').addClass('item').text(n).data('index', i).appendTo($tabs);
                });

        $pages.each(function (i, page) {
            $(page).find('button').each(function (j, button) {
                var $button = $(button);
                
                var buttonSizeClass = (isReadOnlyDialog && $button.hasClass('proceed'))
                        ? 'x-large'
                        :'large';
                
                $button.addClass(buttonSizeClass)
                		.bind('selectstart', function () {
		                    return false;
		                });
            });
        });

        // 指定したタブページを表示
        var showPage = function (index) {
            $pages.hide();
            $pages.eq(index).show();
            $tabs.children('.item').removeClass('selected');
            $tabs.children('.item').eq(index).addClass('selected');
        };

        $tabs.children()
                .each(function (i, tab) {
                    $(tab).data('index', i);
                })
                .click(function () {
                    showPage($(this).data('index'));
                });

        $('<div/>').addClass('functions-pin')
                .click(function () {
                    //$('body').toggleClass('vertical-functions');
                })
                .prependTo($functionsArea);

        $tabs.prependTo('#functions-area').bind('selectstart', function () {
            return false;
        });

        if ($pages.length === 1) {
            $('body').addClass('single-page-functions');
        }
        
        $('#logout-button').click(function () {
            nts.request.logout();
        });

        showPage(0);
    };

    // グリッド用の基盤
    var windowResizeEventManager = (function () {
        var functions = $.Callbacks();

        function add(func) {
            /// <summary>
            /// コールバックを追加する
            /// </summary>
            /// <param name="func">関数</param>
            /// <returns type="void">void</returns>

            functions.add(func);
        }
        ;

        function remove(func) {
            /// <summary>
            /// コールバックを削除する
            /// </summary>
            /// <param name="func">関数</param>
            /// <returns type="void">void</returns>

            functions.remove(func);
        }
        ;

        $(window).resize(function () {
            functions.fire();
        });

        return {
            add: add,
            remove: remove
        };
    })();

    var gridManager = (function () {
        var grids = {};

        var defaultOpts = {
            // ウィンドウサイズ変更に伴ってグリッドサイズを変更する
            adjustWidth: true, // true:変更する、false:変更しない

            // カラムサイズ変更をブラウザに保存する
            saveColumnWidth: false // true:保存する、false:保存しない
        };

        function onRendering(event, ui) {
            /// <summary>
            /// レンダリングするときのイベント
            /// </summary>
            /// <param name="event">イベント</param>
            /// <param name="ui">ターゲット</param>
            /// <returns type="void">void</returns>

            var id = event.target.id;
            grids[id] = ui.owner; // グリッドインスタンス保存

            setDefultNtsOption(event, ui);
            restoreColumnSize(event, ui);
        }

        function setDefultNtsOption(event, ui) {
            /// <summary>
            /// 独自定義したオプションのデフォルト値を設定する
            /// </summary>
            /// <param name="event">イベント</param>
            /// <param name="ui">ターゲット</param>
            /// <returns type="void">void</returns>

            ui.owner.options.ntsOpts = $.extend(true, {}, defaultOpts, ui.owner.options.ntsOpts);

            // featureにリサイズが設定されていたら、LocalStorageにカラムサイズを保存する
            if (ui.owner.options.features !== undefined) {
                $.each(ui.owner.options.features, function (index, value) {
                    if (value.name === "Resizing") {
                        ui.owner.options.ntsOpts.saveColumnWidth = true;
                        return false;
                    }
                });
            }
        }

        function restoreColumnSize(event, ui) {
            /// <summary>
            /// カラムサイズを復元する
            /// </summary>
            /// <param name="event">イベント</param>
            /// <param name="ui">ターゲット</param>
            /// <returns type="void">void</returns>

            var id = event.target.id;
            if (grids[id].options.ntsOpts.saveColumnWidth) {
                var store = localStorage.getItem(id);
                if (store === null) {
                    return;
                }

                store = JSON.parse(store);

                $.map(store, function (value, key) {
                    var column = ui.owner.columnByKey(key);
                    if (column !== undefined || column !== null) {
                        column.width = store[key];
                    }
                });
            }
        }

        function columnResized(event, ui) {
            /// <summary>
            /// カラムサイズが変わったときに実行する
            /// </summary>
            /// <param name="event">イベント</param>
            /// <param name="ui">ターゲット</param>
            /// <returns type="void">void</returns>

            var id = event.target.id.split('_')[0]; // IDだけを抽出
            if (grids[id].options.ntsOpts.saveColumnWidth) {
                var store = localStorage.getItem(id);
                if (store === null) {
                    store = {};
                } else {
                    store = JSON.parse(store);
                }

                store[ui.columnKey] = ui.newWidth;

                localStorage.setItem(id, JSON.stringify(store));
            }
        }

        function windowResized() {
            /// <summary>
            /// ウィンドウサイズが変わったときにグリッドサイズをウィンドウに合わせる
            /// </summary>
            /// <param name="event">イベント</param>
            /// <param name="ui">ターゲット</param>
            /// <returns type="void">void</returns>

            var width = $('#program-body').width() - 30;

            $.map(grids, function (value, key) {
                // 設定がtrueだったらリサイズする
                if (grids[key].options.ntsOpts.adjustWidth) {
                    $('#' + key).igGrid({width: width});
                }
            });
        }

        windowResizeEventManager.add(windowResized);

        return {
            columnResized: columnResized,
            onRendering: onRendering
        };
    })();

    var init = function () {
        
        var title = __viewContext.system.systemName;
        if (window.__notProgram !== true) {
            title += ' - ' + __viewContext.system.programName;
        }
        
        document.title = title;
        
        if (!$('body').hasClass('specialized-ui')) {
            buildCommonUi();
        }

        $('body').css('visibility', 'visible');

        // IgEdit系の下記問題を回避
        //// knockoutのtwo-way bindingに対応できていない問題
        // height: 100% がインラインで設定されてしまう問題
        (function () {
            var funcs = [
                         'igEditor',
                         'igTextEditor',
                         'igDateEditor',
                         'igCurrencyEditor',
                         'igMaskEditor',
                         'igNumericEditor',
                         'igPercentEditor'
                         ];
            
            _.each(funcs, function (funcName) {
                var originalFunc = $.fn[funcName];
                $.fn[funcName] = function () {
                    //$(this).data('editorName', funcName);
                    var ret = originalFunc.apply(this, arguments);
                    
                    $(this).css('height', '');
                    
                    return ret;
                };
            });
            
            var igTextEditor = $.fn.igTextEditor;
            $.fn.igTextEditor = function () {
                var isTextArea = false;
                var elementId = $(this).attr('id');
                
                if (arguments.length === 1 && $.isPlainObject(arguments[0])) {
                    if (this[0].nodeName.toLowerCase() === 'textarea') {
                        isTextArea = true;
                        arguments[0].textMode = 'multiline';
                    } else if (this.attr('type') === 'password') {
                        arguments[0].textMode = 'password';
                    }
                }
                
                var ret = igTextEditor.apply(this, arguments);
                
                // textareaのrows属性を優先する
                if (arguments[0].textMode === 'multiline') {
                    $(this).closest('.ui-igedit-container').css('height', 'auto');
                }
                
                // IgniteUIのバグ回避：textareaのid属性に 'EditingInput' という文字列が付加されてしまう
                if (isTextArea) {
                    $(this).attr('id', elementId);
                }
                
                return ret;
            };
            
            var igDatePicker = $.fn.igDatePicker;
            $.fn.igDatePicker = function () {
                if (arguments.length === 1 && $.isPlainObject(arguments[0])) {
                    arguments[0].width = '120px';
                    
                    // カレンダーをクリックしたときのblurイベントでvalidationが実行されてしまうので、カレンダーが開いている間はvalidationを抑制する
                    arguments[0].dropDownListOpening = function () {
                    	$(this).data('suppress-validate', true);
                    };
                    arguments[0].dropDownListClosed = function () {
                    	$(this).data('suppress-validate', false);
                    }
                }
                
                var ret = igDatePicker.apply(this, arguments);
                $(this).css('height', '');
                $(this).closest('.ui-igedit-container').addClass('nts-datepicker');
                return ret;
            };
        })();

        var startPage = function(context) {
        	if (typeof(window.startPage) == 'function') {
        		window.startPage(context);
        	} else {
        		window.setTimeout(function(){
        			startPage(context);
        		}, 20);
        	}
        };
        
        // Get SubSessionId
		nts.sessionStorage().ifPresentParsedJson(nts.names.sessionStorage.crossPageTemp, function (crossPageTemp) {
			
			nts.request.setBack(crossPageTemp.from);
			
			// nts.request.jumpに渡したデータは、F5リロードなどの場合のみ、再利用可能とする
			// そのため、SessionStorageに格納したデータを、遷移後に即時消去するわけではない
			// jumpで指定した宛先以外のページを開いた時点で、データを消去する
			if (crossPageTemp.path !== nts.request.location.current.appRootRelative()) {
				transferredData = null;
				nts.sessionStorage().removeItem(nts.names.sessionStorage.crossPageTemp);
			} else {
				window.__viewContext.transferredData = crossPageTemp.data;
			}
		});
		
		window.__viewContext.getTransferredData = function () {
			if (this.transferredData === undefined) {
				nts.request.back();
			} else {
				return this.transferredData;
			}
		};

		startPage(window.__viewContext);

    };
    
    $(function () {
        if (window.isDialog) {
            // buildCommonUiがダイアログ自体のopen処理に先行してしまい、サイズ計算がうまくいかないので
            // タイマーをかませる
            setTimeout(function () {
                init();
            }, 0);
        } else {
            init();
        }
    });

})();
