var nts = nts || {};
nts.ui = nts.ui || {};

nts.ui.formError =　function (formError) {
    var formError = {};
    
    if (window.isDialog) {
    	nts.ui.formError = window.parent.nts.ui.formError;
    	return;
    } else {
    	nts.ui.formError = formError;
    }
    
    var errorStorage = {};
    
    var $errorBoard = $('#error-board')
            .igDialog({
                headerText: nts.ui.name('Com_UiErrorListDialog'),
                width: 550,
                height: 150,
                zIndex: 100001,
                resizable: false,
                stateChanged: function (evt, ui) {
                    switch (ui.action) {
                        case 'open': formError.appearance = 'opened'; break;
                        case 'close': formError.appearance = 'closed'; break;
                    }
                }
            })
            .igDialog('close');

    var $errorBoardContent = $errorBoard.find('.ui-dialog-content').children('table').children('tbody');

    /**
     * Event to notify an error occurred.
     * If any errors ALREADY EXISTS, this event is NOT fired.
     */
    formError.occurred = $.Callbacks();

    /**
     * Event to notify an error occurred.
     * WHENEVER formError.add is called, this event is fired.
     */
    formError.added = $.Callbacks();

    /**
     * Event to notify an error removed.
     * WHENEVER formError.remove is called, this event is fired.
     */
    formError.removed = $.Callbacks();

    /**
     * Event to notify all errors is resolved.
     */
    formError.resolved = $.Callbacks();
    
    /**
     * Event to notify error item was clicked.
     * Use this if you want control focusing to textbox.
     */
    formError.focusing = $.Callbacks();

    /**
     * Returns number of errors.
     * 
     * @returns number of errors
     */
    formError.count = function (dialogId) {
    	dialogId = dialogId || nts.ui.getSelfDialogId();
    	
    	if (dialogId in errorStorage) {
    		return errorStorage[dialogId].length;
    	}
    	return 0;
    };

    /**
     * Returns true if error exists.
     * 
     * @returns {Boolean} true if error exists
     */
    formError.isEmpty = function (dialogId) {
    	dialogId = dialogId || nts.ui.getSelfDialogId();
    	
        return formError.count(dialogId) === 0;
    };

    /**
     * Add error.
     * 
     * @returns {undefined}
     */
    formError.add = function () {
        if (nts.util.matchArgs(arguments, 'string any')) {
            addErrorMessageOnly(arguments[0], arguments[1]);
        } else if (nts.util.matchArgs(arguments, 'any string any any')) {
            addErrorWithInputItem(arguments[0], arguments[1], arguments[2], arguments[3]);
        }
    };
    
    function addErrorMessageOnly(message, dialogId) {
    	dialogId = dialogId || nts.ui.getSelfDialogId();
    	
        var itemId = message;
        var $item = findItem(itemId, dialogId);
        if ($item.length === 0) {
            $item = createItem(dialogId, itemId);
            $item.children('td').text(message);
            appendItemOnBoard($item.clone(true, true));
        } else {
        	$item.children('td').text(message);
        	updateItemMessageOnBoard($item.clone(true, true));
        }

        dialogId !== 'main' ? fireErrorEventAtDialog(dialogId, function(evt) { evt.added.fire(null, null, message); }) 
        					: formError.added.fire(null, null, message);

        postAddError(dialogId);
    }
    
    function addErrorWithInputItem($input, message, itemName, dialogId) {
    	dialogId = dialogId || nts.ui.getSelfDialogId();
    	
        var itemId = getId($input);
        var $item = findItem(itemId, dialogId);
        if ($item.length === 0) {
            $item = createItem(dialogId, itemId, $input);
            $item.children('td').text(message.replace(/\{0\}/g, itemName));
            appendItemOnBoard($item.clone(true, true));
        } else {
        	$item.children('td').text(message.replace(/\{0\}/g, itemName));
        	updateItemMessageOnBoard($item.clone(true, true));
        }

        dialogId !== 'main' ? fireErrorEventAtDialog(dialogId, function(evt) { evt.added.fire($input, itemName, message); })
        					: formError.added.fire($input, itemName, message);
        
        postAddError(dialogId);
    }
    
    function getId($input) {
        var id = $input.data('formerror-input-id');
        if (id === undefined) {
            id = nts.util.randomId();
            $input.data('formerror-input-id', id);
        }
        return id;
    }

    formError.addWithBind = function (bindName, message, dialogId, optionsString) {
        dialogId = dialogId || nts.ui.getSelfDialogId();
        bindName = String(bindName);
     
        var duplicated = _.find(errorStorage[dialogId], function ($item) {
            return $item.data('bind-name') === bindName && $item.text() === message;
        }) !== undefined;
        if (duplicated) {
            return;
        }
     
        var $items = findItemsWithBind(dialogId, bindName, message);
        var $item = $items.length === 1 ? $items.eq(0) : createItemWithBind(dialogId, bindName);
        
        $item.children('td').text(message);
        $item.data('options-string', optionsString);
        dialogId !== 'main' ? fireErrorEventAtDialog(dialogId, function(evt) { evt.added.fire(null, null, message); }) 
        					: formError.added.fire(null, null, message);
        
        appendItemOnBoard($item.clone(true, true));
        postAddError(dialogId);
    };
    
    function postAddError(dialogId) {
    	if (dialogId === 'main') {
    		nts.ui.notice.error(nts.ui.message('Com_0000104'));
        	if (formError.count(dialogId) === 1) {
                formError.occurred.fire();
            }
    	} else {
    		var dialogWindow = getDialogWindow(dialogId);
    		if (dialogWindow) dialogWindow.nts.ui.notice.error(nts.ui.message('Com_0000104'));
    		if (formError.count(dialogId) === 1)
    			fireErrorEventAtDialog(dialogId, function(evt) { evt.occurred.fire(); });
    	}
    	
    	var numberOfErrors = formError.count(dialogId);
    	resetHeightOfBoard(numberOfErrors);
    }
    
    function fireErrorEventAtDialog(dialogId, fireEvent) {
    	var dialogWindow = getDialogWindow(dialogId);
    	if (dialogWindow) fireEvent(dialogWindow.nts.ui.dialogError);
    }
    
    function getDialogWindow(dialogId) {
    	var activeDialogWindow;
    	$('body').children('.ui-dialog').not('#error-board').each(function() {
    		var $dialog = $(this).children('.ui-dialog-content:first').find('iframe').contents()[0];
    		if ($dialog === undefined) return true;
        	var dialogWindow = $dialog.defaultView || $dialog.parentWindow;
        	if (dialogWindow.nts.ui.getSelfDialogId() === dialogId) {
        		activeDialogWindow = dialogWindow;
        		return false;
        	}
    	});
    	return activeDialogWindow;
    }
    
    /**
     * Remove error.
     * 
     * @returns {undefined}
     */
    formError.remove = function () {
        if (nts.util.matchArgs(arguments, 'string any')) {
            removeErrorMessageOnly(arguments[0], arguments[1]);
        } else if (nts.util.matchArgs(arguments, 'any any')) {
            removeErrorWithInputItem(arguments[0], arguments[1]);
        }
    };

    function removeErrorMessageOnly(message, dialogId) {
    	dialogId = dialogId || nts.ui.getSelfDialogId();
    	
        var itemId = message;
        if (dialogId in errorStorage) {
        	errorStorage[dialogId].forEach(function(error, idx) {
        		var $item = $(error);
        		if ($item.data('item-id') === itemId) {
        			errorStorage[dialogId].splice(idx, 1);
        			dialogId !== 'main' ? fireErrorEventAtDialog(dialogId, function(evt) { evt.removed.fire(message); }) 
        								: formError.removed.fire(message);
        			$item.remove();
        			removeItemOnBoard(itemId, dialogId);
        	        postRemoveError(dialogId);
        			return false;
        		}
        	});
        }
    }
    
    function removeErrorWithInputItem($input, dialogId) {
    	dialogId = dialogId || nts.ui.getSelfDialogId();
    	
        var itemId = getId($input);
        if (dialogId in errorStorage) {
        	errorStorage[dialogId].forEach(function(error, idx) {
        		var $item = $(error);
        		if ($item.data('item-id') === itemId) {
        			errorStorage[dialogId].splice(idx, 1);
        			dialogId !== 'main' ? fireErrorEventAtDialog(dialogId, function(evt) { evt.removed.fire($input); })
        								: formError.removed.fire($input);
        			$item.remove();
        			removeItemOnBoard(itemId, dialogId);
        	        postRemoveError(dialogId);
        			return false;
        		}
        	});
        }
    }
    
    formError.removeWithBind = function (bindName, dialogId) {
    	dialogId = dialogId || nts.ui.getSelfDialogId();
        bindName = String(bindName);
    	
    	if (dialogId in errorStorage) {
    		errorStorage[dialogId] = _.reject(errorStorage[dialogId], function (error) {
    			return error.data('bind-name') === bindName;
    		});
	    }
    	removeBindItemOnBoard(bindName);
        postRemoveError(dialogId);
    };
    
    formError.removeAllBinds = function (dialogId) {
    	dialogId = dialogId || nts.ui.getSelfDialogId();
    	
    	// use map instead of array, in order to prevent duplicating, 
    	var bindNames = {};
    	if (dialogId in errorStorage) {
    		errorStorage[dialogId].forEach(function ($error) {
    			var bindName = $error.data('bind-name');
    			if (bindName !== undefined) {
    				bindNames[bindName] = true;
    			}
    		});
	    }
    	
    	for (var bindName in bindNames) {
    		formError.removeWithBind(bindName, dialogId);
    	}
    }
    
    formError.removeWithBindByOptionsString = function (bindName, optionsString, dialogId) {
    	dialogId = dialogId || nts.ui.getSelfDialogId();
        bindName = String(bindName);
        
    	if (dialogId in errorStorage) {
	    	 errorStorage[dialogId].forEach(function (error, idx) {
		         var $item = $(error);
		         if ($item.data('bind-name') === bindName && $item.data('options-string') === optionsString) {
		             errorStorage[dialogId].splice(idx, 1);
		             return false;
		         }
		     });
	    }
    	removeBindItemOnBoardByOptionsString(bindName, optionsString);
        postRemoveError(dialogId);
    }
    
    function postRemoveError(dialogId) {
        if (formError.count(dialogId) === 0) {
        	if (dialogId === 'main') {
        		nts.ui.notice.clearError();
        		formError.resolved.fire();
        	} else {
        		var dialogWindow = getDialogWindow(dialogId);
        		if (dialogWindow) dialogWindow.nts.ui.notice.clearError();
        		fireErrorEventAtDialog(dialogId, function(evt) { evt.resolved.fire(); });
        	}
            
            formError.hideBoard();
        }
        
        var numberOfErrors = formError.count(dialogId);
        resetHeightOfBoard(numberOfErrors);
    }
    
    formError.appearance = 'closed'; // opened|closing|closed

    /**
     * Shows error list board.
     * 
     * @param {type} forceShowing true if you want to show even if error list board has been closed by user
     * @param {dialogId} dialog Id whose errors are shown 
     * @returns {undefined}
     */
    formError.showBoard = function (forceShowing, dialogId) {
        
        if (formError.appearance === 'opened') {
            return;
        }
        
//        if (forceShowing !== true && formError.appearance === 'closed' && $errorBoard.is(':visible')) {
//            return;
//        }
        
        //$errorBoard.stop();

        //if (!$errorBoard.is(':visible')) {
        //if (formError.appearance !== 'opened')
        	var errors = [];
        	errors = dialogId === undefined ? errorStorage['main'] : errorStorage[dialogId];
        	
        	if (errors === undefined || errors.length === 0) return;
        	
        	clearErrors();
        	errors.forEach(function(error) {
        		var err = error.clone(true, true);
        		err.appendTo($errorBoardContent);
        	});
        	
        	$errorBoard
        	    .position({
                    my: 'center',
                    at: 'center',
                    of: window
        	    })
        	    .igDialog('open');
        	
        	resetHeightOfBoard(errors.length);
        	
            moveBoardToTop();
        //}
    };
    
    function resetHeightOfBoard(numberOfErros) {
        
        var tableHeight = $errorBoard.find('table').height();
        
        
        $errorBoard.find('.ui-igdialog-content')
            .height(Math.min(tableHeight, 10 * 27) + 15 + 15 + 2);
    }
    
    var clearErrors = function() {
    	$errorBoardContent.children().each(function() {
    		$(this).remove();
    	});
    };
    
    var moveBoardToTop = function() {
    	var maxZIndex = 0;
    	$('body').children('.ui-dialog').each(function() {
    		var $dialog = $(this);
    		maxZIndex = Math.max(maxZIndex, Number($dialog.css('z-index')));
    	});
    	
        $errorBoard.igDialog({
			zIndex: maxZIndex + 1
		});
    };
    
    /**
     * Hides error list board.
     * 
     * @returns {undefined}
     */
    formError.hideBoard = function () {
        if (formError.appearance === 'closed' || formError.appearance === 'closing') {
            return;
        }
        
        formError.appearance = 'closing';
        
        // animationすると短時間でshow/hideしたときにおかしくなるので断念
        //$errorBoard.animate({opacity: 0}, 200, function () {
            $errorBoard.igDialog('close')//.css('opacity', 1);
        //});
    };
    
    var createItem = function (dialogId, itemId, $input) {
    	var error = $('<tr/>').addClass('error-item')
			        .data('item-id', itemId)
			        .append('<td/>')
			        .click(function () {
			            if ($input) {
			                formError.focusing.fire($input);
			                $input.focus().select();
			            }
			        });
			        
    	if (dialogId in errorStorage) {
    		errorStorage[dialogId].push(error);
    	} else {
    		var errors = [];
    		errors.push(error);
    		errorStorage[dialogId] = errors;
    	}
    	return error;
    }
    
    var findItem = function (itemId, dialogId) {
    	var $found = $([]);
    	
    	if (dialogId in errorStorage) {
    		errorStorage[dialogId].forEach(function(error) {
    			var $item = $(error);
    			if ($item.data('item-id') === itemId) {
    				$found = $item;
    				return false;
    			}
    		});
    	}
    	
    	return $found;
    }
    
    var appendItemOnBoard = function(item) {
    	if (formError.appearance === 'closed') return;
    	$errorBoardContent.append(item);
    }
    
    var updateItemMessageOnBoard = function($item) {
    	var itemId = $item.data('item-id');
    	var message = $item.find('td').html();
    	$errorBoardContent.children().each(function() {
    		if ($(this).data('item-id') === itemId
    			&& $(this).find('td').html() !== message) {
    			$(this).find('td').html(message);
    			return false;
    		}
    	});
    }
    
    var removeItemOnBoard = function(itemId, dialogId) {
    	if (formError.appearance === 'closed') return;
    	$errorBoardContent.children().each(function() {
    		if ($(this).data('item-id') === itemId) {
    			$(this).remove();
    			return false;
    		}
    	});
    }
    
    var removeBindItemOnBoard = function(bindName) {
    	if (formError.appearance === 'closed') return;
    	$errorBoardContent.children().each(function() {
    		if ($(this).data('bind-name') === bindName) {
    			$(this).remove();
    		}
    	});
    }
    
    var removeBindItemOnBoardByOptionsString = function(bindName, optionsString) {
    	if (formError.appearance === 'closed') return;
    	$errorBoardContent.children().each(function() {
    		if ($(this).data('bind-name') === bindName && $(this).data('options-string') === optionsString) {
    			$(this).remove();
    			return false;
    		}
    	});
    }
    
    var removeBindItemOnBoardByMessage = function (message) {
        $errorBoardContent.children().each(function() {
    		if ($(this).data('bind-name') !== undefined && message === $(this).text()) {
    			$(this).remove();
    			return false;
    		}
    	});
    };
    
    var createItemWithBind = function(dialogId, bindName) {
    	var error = $('<tr/>').addClass('error-item')
				      .data('bind-name', bindName)
				      .append('<td/>')
                                      .click(function () {
                                          formError.focusing.fire(bindName, error.text(), error);
                                      });
        
		if (dialogId in errorStorage) {
			errorStorage[dialogId].push(error);
		} else {
			var errors = [];
			errors.push(error);
			errorStorage[dialogId] = errors;
		}
		return error;
    }
    
    var findItemsWithBind = function (dialogId, bindName, message) {
	      var boundItems = [];
	      
	      if (dialogId in errorStorage) {
	    	  errorStorage[dialogId].forEach(function (error) {
		          var $item = error;
		          if ($item.data('bind-name') === bindName) {
		              boundItems.push($item);
		          }
		      });
	      }
	      
	      var $boundItems = $(boundItems);
	      if (typeof message === 'string') {
	          return $boundItems.filter(function () {
	              return $(this).children('td').text() === message;
	          });
	      } else {
	          return $boundItems;
	      }
    }

    function FormErrorItem($item) {
        this.$item = $item;
    }

    FormErrorItem.prototype.remove = function () {
        this.$item.remove();
    };
};
