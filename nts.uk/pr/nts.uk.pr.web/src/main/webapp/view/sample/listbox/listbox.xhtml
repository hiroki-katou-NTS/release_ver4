<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:com="http://xmlns.jcp.org/jsf/component"
      xmlns:h="http://xmlns.jcp.org/jsf/html">

    <body>
		
        <ui:composition template="../../../master/base.xhtml">
            <ui:define name="htmlHead">
            	<script>var dialogSize = { width: 300, height: 200 };</script>
				<com:stylefile path="../catalog/catalog.css" />
				<com:scriptfile path="start.js" />
				<com:scriptfile path="../catalog/catalog.js" />
            </ui:define>
            
            <ui:define name="content">
            	<div id="contents-area">
					<div id="side-menu" class="cf"></div>
					<div id="content" class="cf">
						<h1>ListBox </h1>
						<h2>Overview</h2>
						<div>
							<input data-bind="value: itemName"></input>
							<button data-bind="click: addOptions">Add Item</button>
						</div>
						<br />
						<div id="list-box"
							data-bind="ntsListBox: {options: itemList,
											optionsValue: 'code',
											optionsText: 'name',
											multiple: true,
											value: selectedCodes,
											enable: isEnable(),
											rows: 3,
											required: isRequired,
											columns: [
												{ prop: 'code', length: 4 },
												{ prop: 'name', length: 10 },
												{ prop: 'description', length: 10 }
											]}"
							class="cf"></div>
						<button data-bind="click: remove">Remove Item</button>
						<button data-bind="click: selectAll">Select All</button>
						<button data-bind="click: deselectAll">Deselect All</button>
						<span data-bind="ntsCheckBox: { checked: isEnable }">Enable</span>
						<br />
						<!-- Multiple is false -->
						<span data-bind="text: selectedCode()"></span>
						<!-- Multiple is true -->
						<span data-bind="text: selectedCodes()"></span> <br />
						<span data-bind="text: 'Selected: ' + selectedCodes().length"></span> <br />
						<article class="cf">
							<div class="tabs">
								<ol>
									<li><a href="#tabs-html">HTML Binding</a></li>
									<li><a href="#tabs-viewmodel">ViewModel</a></li>
								</ol>
								<div id="tabs-html" class="cf">

								</div>
								<div id="tabs-viewmodel" class="cf">
									<h2>TypeScript</h2>
<pre><![CDATA[class ScreenModel {
    itemList: KnockoutObservableArray<ItemModel>;
    itemName: KnockoutObservable<string>;
    currentCode: KnockoutObservable<number>
    selectedCode: KnockoutObservable<string>;
    selectedCodes: KnockoutObservableArray<string>;
    isEnable: KnockoutObservable<boolean>;
    isRequired: KnockoutObservable<boolean>;
    
    constructor() {
        var self = this;
        self.itemList = ko.observableArray([
            new ItemModel('基本給2', '基本給', "description 1"),
            new ItemModel('基本給1', '役職手当', "description 2"),
            new ItemModel('基本給3', '基本給', "description 3")
        ]);
        self.itemName = ko.observable('');
        self.currentCode = ko.observable(3);
        self.selectedCode = ko.observable(null)
        self.isEnable = ko.observable(true);
        self.isRequired = ko.observable(true);
        self.selectedCodes = ko.observableArray([]);
        
        $('#list-box').on('selectionChanging', function(event) {
            console.log('Selecting value:' + (<any>event.originalEvent).detail);
        })
        $('#list-box').on('selectionChanged', function(event: any) {
            console.log('Selected value:' + (<any>event.originalEvent).detail)
        })
    }
    
    deselectAll() {
        $('#list-box').ntsListBox('deselectAll');
    }
    
    selectAll() {
        $('#list-box').ntsListBox('selectAll');
    }
}

class ItemModel {
    code: string;
    name: string;
    description: string;
    
    constructor(code: string, name: string, description: string) {
        this.code = code;
        this.name = name;
        this.description = description;
    }
}]]></pre>
								</div>
							</div>
						</article>
						<div class="footer cf">
							<button class="previous large">Previous</button>
							<button class="next proceed large">Next</button>
						</div>
            		</div>
           		</div>
            </ui:define>
    	</ui:composition>
   	</body>
</html>