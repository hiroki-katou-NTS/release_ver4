import org.gradle.api.Project

apply plugin: 'java'

buildscript {
	repositories {
		maven {
			name 'nsvnmk'
			url 'http://1506-v0001:8081/artifactory/plugins-release'
		}
	}
	dependencies {
		//http://mvnrepository.com/artifact/de.aaschmid.gradle.plugins/gradle-cpd-plugin
		classpath "de.aaschmid.gradle.plugins:gradle-cpd-plugin:0.5"

		//http://mvnrepository.com/artifact/com.bmuschko/gradle-cargo-plugin
		classpath "com.bmuschko:gradle-cargo-plugin:2.2.1"

		//http://mvnrepository.com/artifact/com.eriwen/gradle-js-plugin
		classpath 'com.eriwen:gradle-js-plugin:1.12.0'
		
		//Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
	}
}

//すべてのプロジェクトに適応すべき内容はここに追記する
allprojects {
	apply from: "$rootDir/gradle/properties.gradle"
	apply from: "$rootDir/gradle/library_properties.gradle"
	apply plugin: "com.jfrog.artifactory"

	//ビルド及び実行は、Java8を対象とする
	sourceCompatibility = "$javaVersion"
	targetCompatibility = "$javaVersion" 

	task cleanandbuildallproject (dependsOn: ['clean', 'build'])<< {
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'eclipse-wtp'
	repositories {
		maven {
			name 'aspose'
			url 'http://maven.aspose.com/artifactory/simple/ext-release-local/'
		}
	}
	
	//compileJavaとcompileTestJavaの実行時の文字コードをunicodeで指定
	[compileJava, compileTestJava]*.options*.encoding = "$defaultEncoding"
	
	dependencies {
       // Apache commons lang
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
        
		// Lombok
		compile group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
		
		// JUnit
		testCompile group: 'junit', name: 'junit', version: '4.12'
		
		// JMockit
		testCompile group: 'org.jmockit', name: 'jmockit', version: '1.28'
		
	    // CDI
	    compileOnly group: 'javax.enterprise', name: 'cdi-api', version: '1.2'

	    // EJB
	    compileOnly group: 'javax.ejb', name: 'javax.ejb-api', version: '3.2'
	    
	    // Concurrency Utilities for Java EE
	    compile group: 'javax.enterprise.concurrent', name: 'javax.enterprise.concurrent-api', version: '1.0'
	    
	    // JPA
	    compile group: 'org.eclipse.persistence', name: 'javax.persistence', version: '2.1.1'
	    compile group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.6.4'
		
		// JAX-RS
		compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0.1'
		
		// Jackson
		compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.4'
		compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.4'

        // servlet
        compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
	    
	    compile group: 'nts.gul', name: 'nts.gul', version: '0.7'
	    compile group: 'nts.arc', name: 'nts.arc', version: '0.9.8.6'
	}
}

project (':shr:nts.uk.shr.com') {
	dependencies {
		compile group: 'com.sun.faces', name: 'jsf-api', version: '2.2.13'
	}
}

project (':proto:nts.uk.pr.proto.ws') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':proto:nts.uk.pr.proto.app')
	}
}

project (':proto:nts.uk.pr.proto.dom') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
	}
}

project (':proto:nts.uk.pr.proto.app') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':proto:nts.uk.pr.proto.dom')
	}
}

project (':proto:nts.uk.pr.proto.infra') {
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		compile project(':proto:nts.uk.pr.proto.dom')
	}
}
project (':screen') {
	apply plugin: 'eclipse-wtp'
}
project ('nts.uk.pr.web') {
	apply plugin: 'war'
	war {
        baseName= "nts.uk.pr.web"
    }
	def explodedPath = "${buildDir}/exploded"
    def explodedWarPath = "${explodedPath}/${war.baseName}.war"
    def explodedWarDeployPath = "${explodedWarPath}.dodeploy"
    def explodedWarFolder = new File(explodedWarPath);
    def explodedWarDeployFile = new File(explodedWarDeployPath);
    def staticSourcePath = "${rootDir}/nts.uk.pr.web/src/main/webapp"
    def deployPattern = ~/${war.baseName}\.war\.*/

    task explodedWar(type: Copy) {  
        into explodedWarPath
        with war
        doLast {
            explodedWarDeployFile.write ''
        }
    }
    
    war.dependsOn explodedWar
    
    task copyStaticResource(type: Sync) {
        from staticSourcePath
        into explodedWarPath
    }
	dependencies {
		compile project(':shr:nts.uk.shr.com')
		providedCompile group: 'com.sun.faces', name: 'jsf-api', version: '2.2.13'

		runtime project (':proto:nts.uk.pr.proto.ws')
		runtime project (':proto:nts.uk.pr.proto.app')
		runtime project (':proto:nts.uk.pr.proto.dom')
		runtime project (':proto:nts.uk.pr.proto.infra')
		runtime project (':screen:nts.uk.pr.screen.ws')
		runtime project (':screen:nts.uk.pr.screen.app')
		runtime project (':screen:nts.uk.pr.screen.infra')
		runtime project (':file:nts.uk.pr.file.ws')
		runtime project (':file:nts.uk.pr.file.infra')
	}
}
project (':screen:nts.uk.pr.screen.ws') {
	dependencies {
		compile project (':screen:nts.uk.pr.screen.app')
	}
}
project (':screen:nts.uk.pr.screen.app') {
 	dependencies {
 	 	compile project (':proto:nts.uk.pr.proto.dom')
 	 }
}
project (':screen:nts.uk.pr.screen.infra') {
	dependencies {
		compile project (':screen:nts.uk.pr.screen.app')
	}
}
project (':file:nts.uk.pr.file.ws') {
	dependencies {
		compile project (':file:nts.uk.pr.file.infra')
	}
}
project (':file:nts.uk.pr.file.infra') {
	dependencies {
 	 	compile project (':proto:nts.uk.pr.proto.dom')
	    compile group: 'aspose', name: 'cells', version: '9.0.0'
	}
}
artifactory {
	contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
	publish {
		repository {
			repoKey = 'libs-release-local'
			username = "${artifactory_user}"
			password = "${artifactory_password}"
			maven = true
			
		}
	}
	resolve {
		repository {
			repoKey = 'libs-release'
			username = "${artifactory_user}"
			password = "${artifactory_password}"
			maven = true
			
		}
	}
}